import { isServer as E, on as L, off as M } from "@opentiny/utils";
const O = ({ onMounted: r, onActivated: f, nextTick: i }) => (o) => {
  let s;
  r(() => {
    o(), i(() => s = !0);
  }), f(() => s && o());
}, W = ({ unref: r, isRef: f, watch: i, nextTick: o, onMounted: s, onUnmounted: g, onActivated: h, onDeactivated: x }) => (d, m, A = {}) => {
  if (E) return;
  const { target: t = window, passive: v = !1, capture: p = !1 } = A;
  let l = !1, a;
  const w = (n) => {
    if (l) return;
    const e = r(n);
    e && !a && (L(e, d, m, { capture: p, passive: v }), a = !0);
  }, c = (n) => {
    if (l) return;
    const e = r(n);
    e && a && (M(e, d, m, { capture: p, passive: v }), a = !1);
  };
  g(() => c(t)), x(() => c(t)), O({ onMounted: s, onActivated: h, nextTick: o })(() => w(t));
  let u;
  return f(t) && (u = i(t, (n, e) => {
    c(e), w(n);
  })), () => {
    u && u(), c(t), l = !0;
  };
};
export {
  O as onMountedOrActivated,
  W as useEventListener
};
