import { useCanvas as _, useBlock as S, usePage as k, useLayout as y, useModal as b, callEntry as D, useNotify as B } from "@opentiny/tiny-engine-meta-register";
import { constants as M } from "@opentiny/tiny-engine-utils";
import { ToolbarBase as x } from "@opentiny/tiny-engine-common";
import { resolveComponent as v, createBlock as h, openBlock as E } from "vue";
const {
  PAGE_STATUS: A
} = M, I = {
  components: {
    ToolbarBase: x
  },
  props: {
    options: {
      type: Object,
      default: () => ({})
    }
  },
  setup() {
    const {
      pageState: n,
      isBlock: o
    } = _(), {
      getCurrentBlock: t
    } = S(), {
      initCurrentPageData: e,
      isChangePageData: a
    } = k(), {
      PLUGIN_NAME: i,
      activePlugin: s,
      layoutState: l,
      isEmptyPage: p
    } = y(), {
      confirm: u,
      message: m
    } = b(), d = D(() => {
      s(i.BlockManage).then((c) => {
        c.openSettingPanel({
          item: t()
        });
      });
    }, {
      metaData: {
        id: "engine.toolbars.setting.Main.openBlockSetting"
      },
      ctx: () => ({
        pageState: n,
        isBlock: o,
        getCurrentBlock: t,
        initCurrentPageData: e,
        isChangePageData: a,
        PLUGIN_NAME: i,
        activePlugin: s,
        layoutState: l,
        isEmptyPage: p,
        confirm: u,
        message: m,
        openBlockSetting: d,
        openPageAndInit: r,
        openPageSetting: f,
        openSetting: P,
        useCanvas: _,
        useLayout: y,
        useBlock: S,
        usePage: k,
        useModal: b,
        useNotify: B,
        constants: M,
        ToolbarBase: x,
        PAGE_STATUS: A
      })
    }), r = D(async (c) => {
      const {
        currentPage: C
      } = n;
      c.openPageSettingPanel();
      const g = await c.getPageById(C.id);
      e(g);
    }, {
      metaData: {
        id: "engine.toolbars.setting.Main.openPageAndInit"
      },
      ctx: () => ({
        pageState: n,
        isBlock: o,
        getCurrentBlock: t,
        initCurrentPageData: e,
        isChangePageData: a,
        PLUGIN_NAME: i,
        activePlugin: s,
        layoutState: l,
        isEmptyPage: p,
        confirm: u,
        message: m,
        openBlockSetting: d,
        openPageAndInit: r,
        openPageSetting: f,
        openSetting: P,
        useCanvas: _,
        useLayout: y,
        useBlock: S,
        usePage: k,
        useModal: b,
        useNotify: B,
        constants: M,
        ToolbarBase: x,
        PAGE_STATUS: A
      })
    }), f = D(() => {
      var C;
      const {
        pageStatus: c
      } = l;
      if (c.state === A.Lock) {
        const g = ((C = c.data) == null ? void 0 : C.username) || "";
        m({
          message: `您点击的页面被${g}锁定，暂时无法编辑，请联系解锁`
        });
        return;
      }
      s(i.AppManage).then((g) => {
        if (a()) {
          u({
            title: "提示",
            message: "当前页面尚未保存，是否要继续切换?",
            exec: () => {
              r(g);
            }
          });
          return;
        }
        r(g);
      });
    }, {
      metaData: {
        id: "engine.toolbars.setting.Main.openPageSetting"
      },
      ctx: () => ({
        pageState: n,
        isBlock: o,
        getCurrentBlock: t,
        initCurrentPageData: e,
        isChangePageData: a,
        PLUGIN_NAME: i,
        activePlugin: s,
        layoutState: l,
        isEmptyPage: p,
        confirm: u,
        message: m,
        openBlockSetting: d,
        openPageAndInit: r,
        openPageSetting: f,
        openSetting: P,
        useCanvas: _,
        useLayout: y,
        useBlock: S,
        usePage: k,
        useModal: b,
        useNotify: B,
        constants: M,
        ToolbarBase: x,
        PAGE_STATUS: A
      })
    }), P = D(() => {
      if (p()) {
        B({
          type: "warning",
          message: "请先创建页面"
        });
        return;
      }
      if (o()) {
        d();
        return;
      }
      f();
    }, {
      metaData: {
        id: "engine.toolbars.setting.Main.openSetting"
      },
      ctx: () => ({
        pageState: n,
        isBlock: o,
        getCurrentBlock: t,
        initCurrentPageData: e,
        isChangePageData: a,
        PLUGIN_NAME: i,
        activePlugin: s,
        layoutState: l,
        isEmptyPage: p,
        confirm: u,
        message: m,
        openBlockSetting: d,
        openPageAndInit: r,
        openPageSetting: f,
        openSetting: P,
        useCanvas: _,
        useLayout: y,
        useBlock: S,
        usePage: k,
        useModal: b,
        useNotify: B,
        constants: M,
        ToolbarBase: x,
        PAGE_STATUS: A
      })
    });
    return {
      openSetting: P,
      isBlock: o
    };
  }
}, T = (n, o) => {
  const t = n.__vccOpts || n;
  for (const [e, a] of o)
    t[e] = a;
  return t;
};
function L(n, o, t, e, a, i) {
  const s = v("toolbar-base");
  return E(), h(s, {
    content: e.isBlock() ? "区块设置" : "页面设置",
    icon: t.options.icon.default || t.options.icon,
    options: t.options,
    onClickApi: e.openSetting
  }, null, 8, ["content", "icon", "options", "onClickApi"]);
}
const N = /* @__PURE__ */ T(I, [["render", L]]), w = {
  id: "engine.toolbars.setting",
  title: "setting",
  type: "toolbars",
  options: {
    icon: {
      default: "setting"
    },
    renderType: "icon",
    collapsed: !0
  }
}, q = {
  ...w,
  entry: N
};
export {
  q as default
};
//# sourceMappingURL=index.js.map
