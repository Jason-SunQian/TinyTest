import "./style.css";
import { useLayout as k, useBreadcrumb as y, callEntry as u, useBlock as d, HOOK_NAME as A } from "@opentiny/tiny-engine-meta-register";
import { reactive as L, computed as P, resolveComponent as _, createBlock as E, openBlock as T, withCtx as D, createElementVNode as O, createVNode as x, createCommentVNode as K, normalizeClass as X, createElementBlock as G, Fragment as w, renderList as M, createTextVNode as I, toDisplayString as V, ref as z } from "vue";
import { Button as U, BreadcrumbItem as j, Breadcrumb as F } from "@opentiny/vue";
import { ToolbarBase as C, BlockDeployDialog as S } from "@opentiny/tiny-engine-common";
const H = {
  id: "engine.toolbars.breadcrumb",
  type: "toolbars",
  title: "breadcrumb",
  options: {
    icon: {
      default: ""
    },
    renderType: "slot"
  }
}, q = {
  components: {
    TinyBreadcrumb: F,
    TinyBreadcrumbItem: j,
    BlockDeployDialog: S,
    TinyButton: U,
    ToolbarBase: C
  },
  props: {
    options: {
      type: Object,
      default: () => ({})
    }
  },
  setup() {
    const t = {
      PAGEID: "engine.plugins.appmanage",
      BLOCKID: "engine.plugins.blockmanage"
    }, {
      layoutState: a
    } = k(), {
      plugins: r
    } = a || {}, e = L({
      showDeployBlock: !1
    }), {
      CONSTANTS: n,
      getBreadcrumbData: g
    } = y(), c = g(), l = u(() => {
      e.showDeployBlock = !0;
    }, {
      metaData: {
        id: "engine.toolbars.breadcrumb.Main.publishBlock"
      },
      ctx: () => ({
        PLUGINS_ID: t,
        layoutState: a,
        plugins: r,
        state: e,
        CONSTANTS: n,
        getBreadcrumbData: g,
        breadcrumbData: c,
        publishBlock: l,
        open: b,
        currentBlock: i,
        handleChangeSchema: m,
        useBreadcrumb: y,
        useLayout: k,
        useBlock: d,
        ToolbarBase: C,
        BlockDeployDialog: S
      })
    }), b = u(() => {
      r && (r.render = c.value[0] === n.PAGETEXT ? t.PAGEID : t.BLOCKID);
    }, {
      metaData: {
        id: "engine.toolbars.breadcrumb.Main.open"
      },
      ctx: () => ({
        PLUGINS_ID: t,
        layoutState: a,
        plugins: r,
        state: e,
        CONSTANTS: n,
        getBreadcrumbData: g,
        breadcrumbData: c,
        publishBlock: l,
        open: b,
        currentBlock: i,
        handleChangeSchema: m,
        useBreadcrumb: y,
        useLayout: k,
        useBlock: d,
        ToolbarBase: C,
        BlockDeployDialog: S
      })
    }), i = P(() => {
      var s, o, N;
      return (N = (o = (s = d) == null ? void 0 : s()) == null ? void 0 : o.getCurrentBlock) == null ? void 0 : N.call(o);
    }), m = u((s) => {
      d().initBlock({
        ...d().getCurrentBlock(),
        content: s
      });
    }, {
      metaData: {
        id: "engine.toolbars.breadcrumb.Main.handleChangeSchema"
      },
      ctx: () => ({
        PLUGINS_ID: t,
        layoutState: a,
        plugins: r,
        state: e,
        CONSTANTS: n,
        getBreadcrumbData: g,
        breadcrumbData: c,
        publishBlock: l,
        open: b,
        currentBlock: i,
        handleChangeSchema: m,
        useBreadcrumb: y,
        useLayout: k,
        useBlock: d,
        ToolbarBase: C,
        BlockDeployDialog: S
      })
    });
    return {
      breadcrumbData: c,
      publishBlock: l,
      state: e,
      CONSTANTS: n,
      open: b,
      currentBlock: i,
      handleChangeSchema: m
    };
  }
}, J = (t, a) => {
  const r = t.__vccOpts || t;
  for (const [e, n] of a)
    r[e] = n;
  return r;
}, Q = { class: "top-panel-breadcrumb" };
function R(t, a, r, e, n, g) {
  const c = _("tiny-breadcrumb-item"), l = _("tiny-breadcrumb"), b = _("tiny-button"), i = _("block-deploy-dialog"), m = _("toolbar-base");
  return T(), E(m, { options: r.options }, {
    default: D(() => {
      var s;
      return [
        O("div", Q, [
          O("div", {
            class: X([
              "top-panel-breadcrumb-title",
              { "top-panel-breadcrumb-title-block": e.breadcrumbData[0] === e.CONSTANTS.BLOCKTEXT }
            ])
          }, [
            x(l, {
              separator: "：",
              onSelect: e.open
            }, {
              default: D(() => [
                (T(!0), G(w, null, M(e.breadcrumbData.slice(0, 2), (o) => (T(), E(c, { key: o }, {
                  default: D(() => [
                    I(V(o), 1)
                  ]),
                  _: 2
                }, 1024))), 128))
              ]),
              _: 1
            }, 8, ["onSelect"])
          ], 2),
          e.breadcrumbData[0] === e.CONSTANTS.BLOCKTEXT && ((s = e.currentBlock) != null && s.id) ? (T(), E(b, {
            key: 0,
            class: "publish",
            onClick: a[0] || (a[0] = (o) => e.publishBlock()),
            type: "primary",
            size: "small"
          }, {
            default: D(() => a[2] || (a[2] = [
              I("发布区块 ", -1)
            ])),
            _: 1,
            __: [2]
          })) : K("", !0)
        ]),
        x(i, {
          visible: e.state.showDeployBlock,
          "onUpdate:visible": a[1] || (a[1] = (o) => e.state.showDeployBlock = o),
          block: e.currentBlock,
          onChangeSchema: e.handleChangeSchema
        }, null, 8, ["visible", "block", "onChangeSchema"])
      ];
    }),
    _: 1
  }, 8, ["options"]);
}
const W = /* @__PURE__ */ J(q, [["render", R], ["__scopeId", "data-v-2a09202d"]]), p = z([]), B = {
  PAGETEXT: "页面",
  BLOCKTEXT: "区块"
}, f = u((t) => {
  p.value = [B.PAGETEXT, ...t], sessionStorage.setItem("pageInfo", t);
}, {
  metaData: {
    id: "engine.service.breadcrumb.useBreadcrumb.setBreadcrumbPage"
  },
  ctx: () => ({
    breadcrumbData: p,
    CONSTANTS: B,
    setBreadcrumbPage: f,
    setBreadcrumbBlock: v,
    getBreadcrumbData: h
  })
}), v = u((t) => {
  p.value = [B.BLOCKTEXT, ...t];
}, {
  metaData: {
    id: "engine.service.breadcrumb.useBreadcrumb.setBreadcrumbBlock"
  },
  ctx: () => ({
    breadcrumbData: p,
    CONSTANTS: B,
    setBreadcrumbPage: f,
    setBreadcrumbBlock: v,
    getBreadcrumbData: h
  })
}), h = u(() => p, {
  metaData: {
    id: "engine.service.breadcrumb.useBreadcrumb.getBreadcrumbData"
  },
  ctx: () => ({
    breadcrumbData: p,
    CONSTANTS: B,
    setBreadcrumbPage: f,
    setBreadcrumbBlock: v,
    getBreadcrumbData: h
  })
}), Y = () => ({
  CONSTANTS: B,
  setBreadcrumbPage: f,
  setBreadcrumbBlock: v,
  getBreadcrumbData: h
}), Z = {
  id: "engine.service.breadcrumb",
  type: "MetaService",
  apis: Y(),
  composable: {
    name: A.useBreadcrumb
  }
}, oe = {
  ...H,
  entry: W,
  metas: [Z]
};
export {
  Z as BreadcrumbService,
  oe as default
};
//# sourceMappingURL=index.js.map
