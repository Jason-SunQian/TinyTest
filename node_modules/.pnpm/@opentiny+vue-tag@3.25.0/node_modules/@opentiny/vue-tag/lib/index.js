function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
import { defineComponent, $props, $setup, $prefix } from "@opentiny/vue-common";
import PcTemplate from "./pc.js";
import MobileFirstTemplate from "./mobile-first.js";
import "@opentiny/vue-theme/tag/index.css";
var template = function template2(mode) {
  var _process$env;
  var tinyMode = typeof process === "object" ? (_process$env = process.env) == null ? void 0 : _process$env.TINY_MODE : null;
  if ("pc" === (tinyMode || mode)) {
    return PcTemplate;
  }
  if ("mobile-first" === (tinyMode || mode)) {
    return MobileFirstTemplate;
  }
  return PcTemplate;
};
var tagProps = _extends({}, $props, {
  hit: Boolean,
  text: String,
  type: String,
  theme: String,
  size: String,
  color: {
    type: [String, Array],
    default: ""
  },
  closable: Boolean,
  operable: Boolean,
  disabled: Boolean,
  selectable: Boolean,
  onlyIcon: Boolean,
  // 仅图标模式
  customClass: {
    type: String,
    default: ""
  },
  effect: {
    type: String,
    default: "light",
    validator: function validator(value) {
      return Boolean(~["dark", "light", "plain"].indexOf(value));
    }
  },
  beforeDelete: Function,
  value: [Number, String],
  maxWidth: {
    type: [String, Number],
    default: null
  },
  // mobile
  mini: {
    type: Boolean,
    default: false
  }
});
var Tag = defineComponent({
  name: $prefix + "Tag",
  props: tagProps,
  setup: function setup(props, context) {
    return $setup({
      props,
      context,
      template
    });
  }
});
var version = "3.undefined";
Tag.install = function(Vue) {
  Vue.component(Tag.name, Tag);
};
Tag.version = version;
export {
  Tag as default
};
