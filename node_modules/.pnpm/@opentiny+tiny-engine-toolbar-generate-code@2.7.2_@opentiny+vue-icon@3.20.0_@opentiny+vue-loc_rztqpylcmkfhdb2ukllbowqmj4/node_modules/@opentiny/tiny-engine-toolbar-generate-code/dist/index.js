import { callEntry as h, getMetaApi as p, META_SERVICE as u, useNotify as f, useCanvas as b, useBlock as A, getMergeMeta as _, META_APP as H, useLayout as T, useEnv as q, HOOK_NAME as ge } from "@opentiny/tiny-engine-meta-register";
import { reactive as Y, ref as pe, computed as fe, nextTick as me, resolveComponent as G, createBlock as ue, openBlock as Z, withCtx as R, createElementVNode as he, createVNode as E, createTextVNode as X, createElementBlock as ve } from "vue";
import { fs as B } from "@opentiny/tiny-engine-utils";
import { ToolbarBase as $ } from "@opentiny/tiny-engine-common";
import { GridColumn as ye, Grid as be, Button as _e, DialogBox as De, Modal as W } from "@opentiny/vue";
const xe = {
  id: "engine.toolbars.generate-code",
  type: "toolbars",
  title: "generate-code",
  options: {
    icon: {
      default: "flow-download"
    },
    renderType: "button"
  }
}, O = "x-lowcode-org", z = h(async ({
  platform: a,
  app: n,
  pageInfo: t,
  tenant: e
} = {}) => p(u.Http).post("/app-center/api/schema2code", {
  platform: a,
  app: n,
  pageInfo: t
}, {
  headers: {
    [O]: e
  }
}), {
  metaData: {
    id: "engine.toolbars.generate-code.http.fetchCode"
  },
  ctx: () => ({
    getMetaApi: p,
    META_SERVICE: u,
    HEADER_LOWCODE_ORG: O,
    fetchCode: z,
    fetchMetaData: D,
    fetchPageList: x,
    fetchBlockSchema: S
  })
}), D = h(async ({
  platform: a,
  app: n,
  type: t,
  id: e,
  history: i,
  tenant: s
} = {}) => e ? p(u.Http).get("/app-center/api/preview/metadata", {
  headers: {
    [O]: s
  },
  params: {
    platform: a,
    app: n,
    type: t,
    id: e,
    history: i
  }
}) : {}, {
  metaData: {
    id: "engine.toolbars.generate-code.http.fetchMetaData"
  },
  ctx: () => ({
    getMetaApi: p,
    META_SERVICE: u,
    HEADER_LOWCODE_ORG: O,
    fetchCode: z,
    fetchMetaData: D,
    fetchPageList: x,
    fetchBlockSchema: S
  })
}), x = h((a) => p(u.Http).get(`/app-center/api/pages/list/${a}`), {
  metaData: {
    id: "engine.toolbars.generate-code.http.fetchPageList"
  },
  ctx: () => ({
    getMetaApi: p,
    META_SERVICE: u,
    HEADER_LOWCODE_ORG: O,
    fetchCode: z,
    fetchMetaData: D,
    fetchPageList: x,
    fetchBlockSchema: S
  })
}), S = h(async (a) => p(u.Http).get(`/material-center/api/block?label=${a}`), {
  metaData: {
    id: "engine.toolbars.generate-code.http.fetchBlockSchema"
  },
  ctx: () => ({
    getMetaApi: p,
    META_SERVICE: u,
    HEADER_LOWCODE_ORG: O,
    fetchCode: z,
    fetchMetaData: D,
    fetchPageList: x,
    fetchBlockSchema: S
  })
}), Se = {
  components: {
    TinyDialogBox: De,
    TinyButton: _e,
    TinyGrid: be,
    TinyGridColumn: ye
  },
  props: {
    visible: {
      type: Boolean,
      default: !1
    },
    data: {
      type: Array,
      default: () => []
    }
  },
  emits: ["cancel", "confirm"],
  setup(a, {
    emit: n
  }) {
    const t = h((c) => {
      const g = [];
      return c.forEach((m) => {
        const w = m.filePath.split("/").slice(0, -1);
        if (!w.length) {
          g.push(m);
          return;
        }
        w.reduce((P, l) => {
          let o = P.find((M) => M.path === l);
          return o || (o = {
            path: l,
            filePath: l,
            children: []
          }, P.push(o)), o.children;
        }, g).push(m);
      }), g;
    }, {
      metaData: {
        id: "engine.toolbars.generate-code.FileSelector.getTableTreeData"
      },
      ctx: () => ({
        props: a,
        emit: n,
        getTableTreeData: t,
        tableData: e,
        gridRef: i,
        state: s,
        confirm: r,
        openDialog: d,
        useNotify: f
      })
    }), e = fe(() => t(a.data)), i = pe(null), s = Y({}), r = h(() => {
      const c = i.value.getSelectRecords().filter((g) => !g.children);
      if (!(c != null && c.length)) {
        f({
          type: "error",
          title: "生成代码失败",
          message: "选中列表为空，请先选择需要生成到本地的文件再点击确定按钮."
        });
        return;
      }
      n("confirm", c);
    }, {
      metaData: {
        id: "engine.toolbars.generate-code.FileSelector.confirm"
      },
      ctx: () => ({
        props: a,
        emit: n,
        getTableTreeData: t,
        tableData: e,
        gridRef: i,
        state: s,
        confirm: r,
        openDialog: d,
        useNotify: f
      })
    }), d = h(() => {
      me(() => {
        i.value.setAllTreeExpansion(!0), i.value.setAllSelection(!0);
      });
    }, {
      metaData: {
        id: "engine.toolbars.generate-code.FileSelector.openDialog"
      },
      ctx: () => ({
        props: a,
        emit: n,
        getTableTreeData: t,
        tableData: e,
        gridRef: i,
        state: s,
        confirm: r,
        openDialog: d,
        useNotify: f
      })
    });
    return {
      state: s,
      tableData: e,
      gridRef: i,
      confirm: r,
      openDialog: d
    };
  }
}, ee = (a, n) => {
  const t = a.__vccOpts || a;
  for (const [e, i] of n)
    t[e] = i;
  return t;
}, we = { class: "dialog-grid" };
function Pe(a, n, t, e, i, s) {
  const r = G("tiny-grid-column"), d = G("tiny-grid"), c = G("tiny-button"), g = G("tiny-dialog-box");
  return Z(), ue(g, {
    class: "dialog-box",
    visible: t.visible,
    "close-on-click-modal": !1,
    "append-to-body": !0,
    width: "800",
    title: "请选择生成到本地的文件",
    onClose: n[1] || (n[1] = (m) => a.$emit("cancel")),
    onOpen: e.openDialog
  }, {
    footer: R(() => [
      E(c, {
        type: "primary",
        onClick: e.confirm
      }, {
        default: R(() => n[2] || (n[2] = [
          X("确定", -1)
        ])),
        _: 1,
        __: [2]
      }, 8, ["onClick"]),
      E(c, {
        onClick: n[0] || (n[0] = (m) => a.$emit("cancel"))
      }, {
        default: R(() => n[3] || (n[3] = [
          X("取消", -1)
        ])),
        _: 1,
        __: [3]
      })
    ]),
    default: R(() => [
      he("div", we, [
        E(d, {
          data: e.tableData,
          ref: "gridRef",
          size: "mini",
          "max-height": 500,
          "tree-config": { children: "children" },
          "expand-config": { expandAll: !0 },
          "auto-resize": !0
        }, {
          default: R(() => [
            E(r, {
              width: "40",
              "tree-node": ""
            }),
            E(r, {
              type: "selection",
              width: "60"
            }),
            E(r, {
              field: "fileType",
              title: "文件类型",
              width: "100"
            }),
            E(r, {
              field: "filePath",
              title: "文件路径",
              width: "250"
            }),
            E(r, {
              field: "fileContent",
              title: "文件内容",
              "show-overflow": "ellipsis"
            })
          ]),
          _: 1
        }, 8, ["data"])
      ])
    ]),
    _: 1
  }, 8, ["visible", "onOpen"]);
}
const F = /* @__PURE__ */ ee(Se, [["render", Pe], ["__scopeId", "data-v-2e2d2f84"]]), Ie = {
  components: {
    GenerateFileSelector: F,
    ToolbarBase: $
  },
  props: {
    options: {
      type: Object,
      default: () => ({})
    }
  },
  setup() {
    const {
      isBlock: a,
      getCurrentPage: n
    } = b(), {
      getCurrentBlock: t
    } = A(), e = Y({
      dirHandle: null,
      generating: !1,
      showDialogbox: !1,
      saveFilesInfo: []
    }), i = h(() => {
      var y, L;
      const {
        getSchema: l
      } = b(), o = {
        framework: (y = _("engine.config")) == null ? void 0 : y.dslMode,
        platform: (L = _("engine.config")) == null ? void 0 : L.platformId,
        pageInfo: {
          schema: l()
        }
      }, M = new URLSearchParams(location.search);
      if (o.app = M.get("id"), o.tenant = M.get("tenant"), a()) {
        const v = t();
        o.id = v == null ? void 0 : v.id, o.pageInfo.name = v == null ? void 0 : v.label, o.type = "Block";
      } else {
        const v = n();
        o.id = v == null ? void 0 : v.id, o.pageInfo.name = v == null ? void 0 : v.name, o.type = "Page";
      }
      return o;
    }, {
      metaData: {
        id: "engine.toolbars.generate-code.Main.getParams"
      },
      ctx: () => ({
        isBlock: a,
        getCurrentPage: n,
        getCurrentBlock: t,
        state: e,
        getParams: i,
        initDirHandle: s,
        getAllNestedBlocksSchema: r,
        generateAppCode: d,
        getAllPageDetails: c,
        getPreGenerateInfo: g,
        saveCodeToLocal: m,
        generate: w,
        confirm: C,
        cancel: P,
        useBlock: A,
        useCanvas: b,
        useNotify: f,
        useLayout: T,
        getMetaApi: p,
        META_APP: H,
        getMergeMeta: _,
        META_SERVICE: u,
        fs: B,
        ToolbarBase: $,
        fetchMetaData: D,
        fetchPageList: x,
        fetchBlockSchema: S,
        FileSelector: F
      })
    }), s = h((l) => {
      !e.dirHandle && l && (e.dirHandle = l);
    }, {
      metaData: {
        id: "engine.toolbars.generate-code.Main.initDirHandle"
      },
      ctx: () => ({
        isBlock: a,
        getCurrentPage: n,
        getCurrentBlock: t,
        state: e,
        getParams: i,
        initDirHandle: s,
        getAllNestedBlocksSchema: r,
        generateAppCode: d,
        getAllPageDetails: c,
        getPreGenerateInfo: g,
        saveCodeToLocal: m,
        generate: w,
        confirm: C,
        cancel: P,
        useBlock: A,
        useCanvas: b,
        useNotify: f,
        useLayout: T,
        getMetaApi: p,
        META_APP: H,
        getMergeMeta: _,
        META_SERVICE: u,
        fs: B,
        ToolbarBase: $,
        fetchMetaData: D,
        fetchPageList: x,
        fetchBlockSchema: S,
        FileSelector: F
      })
    }), {
      getAllNestedBlocksSchema: r,
      generateAppCode: d
    } = p("engine.service.generateCode"), c = h(async (l) => {
      const o = l.map(({
        id: y
      }) => p(H.AppManage).getPageById(y));
      return (await Promise.allSettled(o)).map((y) => {
        if (y.status === "fulfilled" && y.value)
          return y.value;
      }).filter((y) => !!y);
    }, {
      metaData: {
        id: "engine.toolbars.generate-code.Main.getAllPageDetails"
      },
      ctx: () => ({
        isBlock: a,
        getCurrentPage: n,
        getCurrentBlock: t,
        state: e,
        getParams: i,
        initDirHandle: s,
        getAllNestedBlocksSchema: r,
        generateAppCode: d,
        getAllPageDetails: c,
        getPreGenerateInfo: g,
        saveCodeToLocal: m,
        generate: w,
        confirm: C,
        cancel: P,
        useBlock: A,
        useCanvas: b,
        useNotify: f,
        useLayout: T,
        getMetaApi: p,
        META_APP: H,
        getMergeMeta: _,
        META_SERVICE: u,
        fs: B,
        ToolbarBase: $,
        fetchMetaData: D,
        fetchPageList: x,
        fetchBlockSchema: S,
        FileSelector: F
      })
    }), g = h(async () => {
      const l = i(), {
        id: o
      } = p(u.GlobalService).getBaseInfo(), M = [p(u.Http).get(`/app-center/v1/api/apps/schema/${o}`), D(l), x(l.app)];
      e.dirHandle || M.push(B.getUserBaseDirHandle());
      const [y, L, v, te] = await Promise.all(M), K = await c(v), ae = /* @__PURE__ */ new Set(), ne = K.map((I) => r(I.page_content, S, ae)), oe = await Promise.allSettled(ne), Q = [];
      oe.forEach((I) => {
        I.status === "fulfilled" && Array.isArray(I.value) && Q.push(...I.value);
      }), L.i18n ? Object.keys(L.i18n).forEach((I) => {
        L.i18n[I] = L.i18n[I] || {};
      }) : L.i18n = {};
      const ie = {
        // metaData 包含dataSource、utils、i18n、globalState
        ...L,
        // 页面 schema
        pageSchema: K.map((I) => {
          const {
            page_content: U,
            ...N
          } = I;
          return {
            ...U,
            meta: {
              ...N,
              router: N.route
            }
          };
        }),
        blockSchema: Q,
        // 物料数据
        componentsMap: [...y.componentsMap || []],
        // 物料依赖
        packages: [...y.packages || []],
        meta: {
          ...y.meta || {}
        }
      }, se = await d(ie), {
        genResult: re = []
      } = se || {}, ce = re.map(({
        fileContent: I,
        fileName: U,
        path: N,
        fileType: le
      }) => {
        const de = N.endsWith("/") || N === "." ? "" : "/";
        let k = `${N}${de}`;
        return k.startsWith("./") && (k = k.slice(2)), k.startsWith(".") && (k = k.slice(1)), k.startsWith("/") && (k = k.slice(1)), {
          fileContent: I,
          filePath: `${k}${U}`,
          fileType: le
        };
      });
      return [te, ce];
    }, {
      metaData: {
        id: "engine.toolbars.generate-code.Main.getPreGenerateInfo"
      },
      ctx: () => ({
        isBlock: a,
        getCurrentPage: n,
        getCurrentBlock: t,
        state: e,
        getParams: i,
        initDirHandle: s,
        getAllNestedBlocksSchema: r,
        generateAppCode: d,
        getAllPageDetails: c,
        getPreGenerateInfo: g,
        saveCodeToLocal: m,
        generate: w,
        confirm: C,
        cancel: P,
        useBlock: A,
        useCanvas: b,
        useNotify: f,
        useLayout: T,
        getMetaApi: p,
        META_APP: H,
        getMergeMeta: _,
        META_SERVICE: u,
        fs: B,
        ToolbarBase: $,
        fetchMetaData: D,
        fetchPageList: x,
        fetchBlockSchema: S,
        FileSelector: F
      })
    }), m = h(async (l) => {
      l.length && e.dirHandle && await B.writeFiles(e.dirHandle, l);
    }, {
      metaData: {
        id: "engine.toolbars.generate-code.Main.saveCodeToLocal"
      },
      ctx: () => ({
        isBlock: a,
        getCurrentPage: n,
        getCurrentBlock: t,
        state: e,
        getParams: i,
        initDirHandle: s,
        getAllNestedBlocksSchema: r,
        generateAppCode: d,
        getAllPageDetails: c,
        getPreGenerateInfo: g,
        saveCodeToLocal: m,
        generate: w,
        confirm: C,
        cancel: P,
        useBlock: A,
        useCanvas: b,
        useNotify: f,
        useLayout: T,
        getMetaApi: p,
        META_APP: H,
        getMergeMeta: _,
        META_SERVICE: u,
        fs: B,
        ToolbarBase: $,
        fetchMetaData: D,
        fetchPageList: x,
        fetchBlockSchema: S,
        FileSelector: F
      })
    }), w = h(async () => {
      const {
        isEmptyPage: l
      } = T();
      if (l()) {
        f({
          type: "warning",
          message: "请先创建页面"
        });
        return;
      }
      if (e.generating) {
        f({
          type: "info",
          title: "代码生成中, 请稍后..."
        });
        return;
      } else
        f({
          type: "info",
          title: "代码生成中..."
        }), e.generating = !0;
      try {
        const [o, M] = await g();
        e.saveFilesInfo = M, s(o), e.showDialogbox = !0;
      } catch (o) {
        console.error(o), f({
          type: "error",
          title: "代码生成失败",
          message: (o == null ? void 0 : o.message) || o
        }), e.generating = !1;
      }
    }, {
      metaData: {
        id: "engine.toolbars.generate-code.Main.generate"
      },
      ctx: () => ({
        isBlock: a,
        getCurrentPage: n,
        getCurrentBlock: t,
        state: e,
        getParams: i,
        initDirHandle: s,
        getAllNestedBlocksSchema: r,
        generateAppCode: d,
        getAllPageDetails: c,
        getPreGenerateInfo: g,
        saveCodeToLocal: m,
        generate: w,
        confirm: C,
        cancel: P,
        useBlock: A,
        useCanvas: b,
        useNotify: f,
        useLayout: T,
        getMetaApi: p,
        META_APP: H,
        getMergeMeta: _,
        META_SERVICE: u,
        fs: B,
        ToolbarBase: $,
        fetchMetaData: D,
        fetchPageList: x,
        fetchBlockSchema: S,
        FileSelector: F
      })
    }), C = h(async (l) => {
      f({
        type: "info",
        title: "代码保存中..."
      }), e.showDialogbox = !1;
      try {
        await m(l), f({
          type: "success",
          title: "代码文件保存成功",
          message: `已保存${l.length}个文件`
        });
      } catch (o) {
        console.error(o), f({
          type: "error",
          title: "代码保存失败",
          message: (o == null ? void 0 : o.message) || o
        });
      } finally {
        e.generating = !1;
      }
    }, {
      metaData: {
        id: "engine.toolbars.generate-code.Main.confirm"
      },
      ctx: () => ({
        isBlock: a,
        getCurrentPage: n,
        getCurrentBlock: t,
        state: e,
        getParams: i,
        initDirHandle: s,
        getAllNestedBlocksSchema: r,
        generateAppCode: d,
        getAllPageDetails: c,
        getPreGenerateInfo: g,
        saveCodeToLocal: m,
        generate: w,
        confirm: C,
        cancel: P,
        useBlock: A,
        useCanvas: b,
        useNotify: f,
        useLayout: T,
        getMetaApi: p,
        META_APP: H,
        getMergeMeta: _,
        META_SERVICE: u,
        fs: B,
        ToolbarBase: $,
        fetchMetaData: D,
        fetchPageList: x,
        fetchBlockSchema: S,
        FileSelector: F
      })
    }), P = h(() => {
      e.showDialogbox = !1, e.generating = !1, e.saveFilesInfo = [];
    }, {
      metaData: {
        id: "engine.toolbars.generate-code.Main.cancel"
      },
      ctx: () => ({
        isBlock: a,
        getCurrentPage: n,
        getCurrentBlock: t,
        state: e,
        getParams: i,
        initDirHandle: s,
        getAllNestedBlocksSchema: r,
        generateAppCode: d,
        getAllPageDetails: c,
        getPreGenerateInfo: g,
        saveCodeToLocal: m,
        generate: w,
        confirm: C,
        cancel: P,
        useBlock: A,
        useCanvas: b,
        useNotify: f,
        useLayout: T,
        getMetaApi: p,
        META_APP: H,
        getMergeMeta: _,
        META_SERVICE: u,
        fs: B,
        ToolbarBase: $,
        fetchMetaData: D,
        fetchPageList: x,
        fetchBlockSchema: S,
        FileSelector: F
      })
    });
    return {
      state: e,
      generate: w,
      confirm: C,
      cancel: P
    };
  }
}, Ce = { class: "toolbar-helpGuid" };
function Me(a, n, t, e, i, s) {
  const r = G("generate-file-selector"), d = G("toolbar-base");
  return Z(), ve("div", Ce, [
    E(d, {
      content: "出码",
      icon: t.options.icon.default || t.options.icon,
      options: t.options,
      onClickApi: e.generate
    }, {
      default: R(() => [
        E(r, {
          visible: e.state.showDialogbox,
          data: e.state.saveFilesInfo,
          onConfirm: e.confirm,
          onCancel: e.cancel
        }, null, 8, ["visible", "data", "onConfirm", "onCancel"])
      ]),
      _: 1
    }, 8, ["icon", "options", "onClickApi"])
  ]);
}
const ke = /* @__PURE__ */ ee(Ie, [["render", Me], ["__scopeId", "data-v-2354f495"]]), j = window.vscodeBridge, V = h(async () => {
  var c, g, m;
  const {
    pageState: a,
    setSaved: n
  } = b(), t = a.currentPageId || ((c = a.currentPage) == null ? void 0 : c.id), e = a.currentPageName || ((g = a.currentPage) == null ? void 0 : g.name), {
    VITE_ORIGIN: i
  } = q(), s = await j.callHandler("save-page", {
    api: `${i}/app-service/api/pages/code/${t}`,
    pageName: e,
    pageId: t,
    platformId: (m = _("engine.config")) == null ? void 0 : m.platformId
  });
  if (s.error) {
    W.message({
      message: s.error.message,
      status: "error",
      duration: "5000",
      top: 60
    });
    return;
  }
  const r = s.data.reason ? `保存文件到本地失败！失败原因：${s.data.reason}` : "保存文件到本地失败！", d = s.data.isSuccess ? "保存文件到本地成功" : r;
  s.data.isSuccess && n(!0), W.message({
    message: d,
    status: "error",
    duration: "5000",
    top: 60
  });
}, {
  metaData: {
    id: "engine.service.savelocal.useSaveLocal.confirmSaveLocal"
  },
  ctx: () => ({
    useCanvas: b,
    getMergeMeta: _,
    useEnv: q,
    bridge: j,
    confirmSaveLocal: V,
    savePageLocal: J
  })
}), J = h(async () => {
  var i;
  const {
    currentPageId: a,
    currentPageName: n,
    currentPage: t
  } = b().pageState, e = await j.callHandler("page-is-exist", {
    pageName: n || (t == null ? void 0 : t.name),
    pageId: a || (t == null ? void 0 : t.id),
    platformId: (i = _("engine.config")) == null ? void 0 : i.platformId
  });
  if (e.error) {
    W.message({
      message: e.error.message,
      status: "error",
      duration: "5000",
      top: 60
    });
    return;
  }
  if (!e.data.isExist) {
    V();
    return;
  }
  W.confirm({
    title: "查询本地文件",
    message: "本地已经存在同名文件，是否覆盖？"
  }).then((s) => {
    s === "confirm" && V();
  });
}, {
  metaData: {
    id: "engine.service.savelocal.useSaveLocal.savePageLocal"
  },
  ctx: () => ({
    useCanvas: b,
    getMergeMeta: _,
    useEnv: q,
    bridge: j,
    confirmSaveLocal: V,
    savePageLocal: J
  })
}), Be = () => ({
  confirmSaveLocal: V,
  savePageLocal: J
}), Ee = {
  id: "engine.service.savelocal",
  type: "MetaService",
  apis: Be(),
  composable: {
    name: ge.useSaveLocal
  }
}, Fe = {
  ...xe,
  entry: ke,
  metas: [Ee]
};
export {
  Ee as SaveLocalService,
  Fe as default
};
//# sourceMappingURL=index.js.map
