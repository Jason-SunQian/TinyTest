import PagerItem from '@opentiny/vue-pager-item';
import Popover from '@opentiny/vue-popover';
import Loading from '@opentiny/vue-loading';
import { t } from '@opentiny/vue-locale';
import { defineComponent, $prefix, hooks, $props } from '@opentiny/vue-common';
import { IconChevronLeft, IconChevronRight, IconChevronDown } from '@opentiny/vue-icon';
import { emitEvent } from '@opentiny/utils';
import { resolveComponent, openBlock, createElementBlock, Fragment, renderList, createElementVNode, toDisplayString, createVNode, withCtx, withModifiers, normalizeClass, createBlock, renderSlot, createCommentVNode } from 'vue';

function _createForOfIteratorHelperLoose(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (t) return (t = t.call(r)).next.bind(t);
  if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
    t && (r = t);
    var o = 0;
    return function() {
      return o >= r.length ? { done: true } : { done: false, value: r[o++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r) return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
  return n;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n) {
    for (var e = 1; e < arguments.length; e++) {
      var t2 = arguments[e];
      for (var r in t2) ({}).hasOwnProperty.call(t2, r) && (n[r] = t2[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}
var _sfc_main = defineComponent({
  name: $prefix + "Pager",
  components: {
    Pager: PagerItem,
    Popover,
    TinyIconChevronLeft: IconChevronLeft(),
    TinyIconChevronRight: IconChevronRight(),
    TinyIconChevronDown: IconChevronDown()
  },
  emits: ["update:currentPage", "update:pageSize", "size-change", "page-change", "before-change", "before-page-change", "current-change", "prev-click", "next-click"],
  props: _extends({}, $props, {
    accurateJumper: {
      type: Boolean,
      default: function _default() {
        return true;
      }
    },
    appendToBody: {
      type: Boolean,
      default: function _default2() {
        return true;
      }
    },
    currentPage: {
      type: Number,
      default: function _default3() {
        return 1;
      }
    },
    disabled: {
      type: Boolean,
      default: function _default4() {
        return false;
      }
    },
    hideOnSinglePage: Boolean,
    isBeforePageChange: Boolean,
    layout: String,
    mode: String,
    nextText: String,
    pageCount: Number,
    pageSize: {
      type: Number,
      default: function _default5() {
        return 10;
      }
    },
    pageSizes: {
      type: Array,
      default: function _default6() {
        return [10, 20, 30, 40, 50, 100];
      }
    },
    pagerCount: {
      type: Number,
      validator: function validator(value) {
        return (value | 0) === value && value > 2 && value < 22 && value % 2 === 1;
      },
      default: function _default7() {
        return 7;
      }
    },
    popperAppendToBody: {
      type: Boolean,
      default: function _default8() {
        return true;
      }
    },
    showTotalLoading: {
      type: Boolean,
      default: function _default9() {
        return false;
      }
    },
    customTotal: {
      type: [Boolean, String],
      default: function _default10() {
        return false;
      }
    },
    popperClass: String,
    prevText: String,
    total: Number,
    changeCompat: Boolean
  }),
  setup: function setup(props, _ref) {
    var emit = _ref.emit;
    var ref = hooks.ref, reactive = hooks.reactive, computed = hooks.computed, watch = hooks.watch, onMounted = hooks.onMounted, nextTick = hooks.nextTick, toRefs = hooks.toRefs;
    var sizesList = ref(null);
    var state = reactive({
      internalCurrentPage: 1,
      // 内部当前页码
      internalPageSize: 0,
      // 内部每页条数
      lastEmittedPage: -1,
      // 最后触发的页码
      userChangePageSize: false,
      // 用户是否改变了每页条数
      internalTotal: props.total,
      // 内部总条数
      showSizes: false,
      // 是否显示每页条数选择器
      jumperValue: 1
      // 跳转器输入值
    });
    var handleJumperFocus = function handleJumperFocus2(e) {
      var target = e.target;
      state.jumperValue = Number(target.value);
    };
    var handleJumperInput = function handleJumperInput2(e) {
      var target = e.target;
      var value = String(target.value);
      if (!value) {
        state.jumperValue = 1;
      } else if (/^\d+$/.test(value)) {
        state.jumperValue = Number(value) || 1;
      }
      target.value = String(state.jumperValue);
    };
    var handleJumperChange = function handleJumperChange2() {
      parseJumperValue();
      var callback = function callback2() {
        handleJumperClick();
      };
      var rollback = function rollback2() {
        state.jumperValue = state.internalCurrentPage;
      };
      var newPage = state.jumperValue;
      var currentPage = state.internalCurrentPage;
      if (props.isBeforePageChange && newPage !== currentPage) {
        var params = {
          newPage,
          currentPage,
          callback,
          rollback
        };
        beforePagerChangeHandler(params);
      } else {
        callback();
      }
    };
    var handleJumperClick = function handleJumperClick2() {
      if (!canJumperGo()) return;
      state.internalCurrentPage = getValidCurrentPage(Number(state.jumperValue));
      emitChange();
    };
    var parseJumperValue = function parseJumperValue2() {
      var value = Number(String(state.jumperValue).split(/[^0-9-+.]/).join(""));
      if (isNaN(value)) {
        value = 1;
      }
      value = Number(value.toFixed(0));
      if (internalPageCount.value) {
        if (value >= internalPageCount.value) {
          state.jumperValue = internalPageCount.value;
        } else if (value <= 1) {
          state.jumperValue = 1;
        } else {
          state.jumperValue = value;
        }
      }
    };
    var handleSizeChange = function handleSizeChange2(val) {
      if (val !== state.internalPageSize) {
        var callback = function callback2() {
          if (!beforeChangeHandler()) {
            return false;
          }
          state.internalPageSize = val;
          state.userChangePageSize = true;
          state.showSizes = false;
          emit("update:pageSize", val);
          emit("size-change", val);
          emit("page-change", {
            currentPage: state.internalCurrentPage,
            pageSize: val,
            total: state.internalTotal
          });
          if (Array.isArray(sizesList.value)) {
            sizesList.value[0].state.showPopper = false;
          }
        };
        if (props.isBeforePageChange) {
          var newPageSize = val;
          var currentPageSize = state.internalPageSize;
          var params = {
            newPageSize,
            currentPageSize,
            callback
          };
          beforeSizeChangeHandler(params);
        } else {
          callback();
        }
      }
    };
    var canJumperGo = function canJumperGo2() {
      var inputValue = Number(state.jumperValue || 0);
      var currentPage = Number(state.internalCurrentPage || 0);
      return props.accurateJumper ? inputValue !== currentPage : true;
    };
    var beforeSizeChangeHandler = function beforeSizeChangeHandler2(params) {
      var newPageSize = params.newPageSize, currentPageSize = params.currentPageSize, callback = params.callback;
      var newPage = 1;
      var currentPage = state.internalCurrentPage;
      var temp = {
        newPage,
        newPageSize,
        currentPage,
        currentPageSize,
        callback
      };
      emit("before-page-change", temp);
    };
    var beforePagerChangeHandler = function beforePagerChangeHandler2(params) {
      var newPage = params.newPage, currentPage = params.currentPage, callback = params.callback, rollback = params.rollback;
      var newPageSize = state.internalPageSize;
      var currentPageSize = state.internalPageSize;
      var temp = {
        newPage,
        newPageSize,
        currentPage,
        currentPageSize,
        callback,
        rollback
      };
      emit("before-page-change", temp);
    };
    var beforeJumperChangeHandler = function beforeJumperChangeHandler2(params) {
      var newPage = params.newPage, currentPage = params.currentPage, callback = params.callback, rollback = params.rollback;
      var newPageSize = state.internalPageSize;
      var currentPageSize = state.internalPageSize;
      var temp = {
        newPage,
        newPageSize,
        currentPage,
        currentPageSize,
        callback,
        rollback
      };
      emit("before-page-change", temp);
    };
    var copyEmit = function copyEmit2() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      emit.apply(void 0, [args[0]].concat(args.slice(1)));
    };
    var beforeChangeHandler = function beforeChangeHandler2(val) {
      if (val === void 0) {
        val = -1;
      }
      return emitEvent(copyEmit, "before-change", state.internalCurrentPage, null, val);
    };
    var handleCurrentChange = function handleCurrentChange2(val) {
      if (!beforeChangeHandler(val)) {
        return false;
      }
      state.internalCurrentPage = getValidCurrentPage(Number(val));
      state.userChangePageSize = true;
      emitChange();
    };
    var prev = function prev2() {
      var callback = function callback2() {
        if (props.disabled || !beforeChangeHandler(state.internalCurrentPage - 1)) {
          return false;
        }
        var newVal = state.internalCurrentPage - 1;
        state.internalCurrentPage = getValidCurrentPage(newVal);
        emit("prev-click", state.internalCurrentPage);
        emitChange();
      };
      if (props.isBeforePageChange) {
        var newPage = state.internalCurrentPage - 1;
        var temp = buildBeforePageChangeParam({
          newPage,
          callback
        });
        emit("before-page-change", temp);
      } else {
        callback();
      }
    };
    var next = function next2() {
      var callback = function callback2() {
        if (props.disabled || !beforeChangeHandler(state.internalCurrentPage + 1)) {
          return false;
        }
        var newVal = state.internalCurrentPage + 1;
        state.internalCurrentPage = getValidCurrentPage(newVal);
        emit("next-click", state.internalCurrentPage);
        emitChange();
      };
      if (props.isBeforePageChange) {
        var newPage = state.internalCurrentPage + 1;
        var temp = buildBeforePageChangeParam({
          newPage,
          callback
        });
        emit("before-page-change", temp);
      } else {
        callback();
      }
    };
    var buildBeforePageChangeParam = function buildBeforePageChangeParam2(param) {
      var currentPage = state.internalCurrentPage;
      var newPageSize = state.internalPageSize;
      var currentPageSize = state.internalPageSize;
      return Object.assign({
        currentPage,
        newPageSize,
        currentPageSize
      }, param);
    };
    var getValidCurrentPage = function getValidCurrentPage2(val) {
      val = parseInt(String(val), 10);
      var hasPageCount = typeof internalPageCount.value === "number";
      var resetVal;
      if (!hasPageCount) {
        if (isNaN(val) || val < 1) {
          resetVal = 1;
        }
      } else {
        if (val < 1) {
          resetVal = 1;
        } else if (internalPageCount.value && val > internalPageCount.value) {
          resetVal = internalPageCount.value;
        }
      }
      if (resetVal === void 0 && isNaN(val)) {
        resetVal = 1;
      } else if (resetVal === 0) {
        resetVal = 1;
      }
      return resetVal === void 0 ? val : resetVal;
    };
    var emitChange = function emitChange2() {
      nextTick(function() {
        if (state.internalCurrentPage !== state.lastEmittedPage || state.userChangePageSize) {
          emit("current-change", state.internalCurrentPage);
          emit("update:currentPage", state.internalCurrentPage);
          emit("page-change", {
            currentPage: state.internalCurrentPage,
            pageSize: state.internalPageSize,
            total: state.internalTotal
          });
          state.lastEmittedPage = state.internalCurrentPage;
          state.userChangePageSize = false;
        }
      });
    };
    var setTotal = function setTotal2(val) {
      state.internalTotal = val;
    };
    var totalText = computed(function() {
      if (typeof props.customTotal === "string") return props.customTotal;
      var totals = parseInt(String(props.total || 0));
      if (isNaN(totals)) return 0;
      var HUNDRED_THOUSAND = 1e5;
      var MILLION = 1e6;
      var TEN_MILLION = 1e7;
      if (totals < HUNDRED_THOUSAND) {
        return totals;
      } else if (totals < MILLION) {
        return t("ui.page.hundredThousand");
      } else if (totals < TEN_MILLION) {
        return t("ui.page.million");
      } else {
        return t("ui.page.tenMillion");
      }
    });
    var internalPageCount = computed(function() {
      if (typeof state.internalTotal === "number") {
        return Math.max(1, Math.ceil(state.internalTotal / state.internalPageSize));
      } else if (typeof props.pageCount === "number") {
        return Math.max(1, props.pageCount);
      }
      return null;
    });
    var internalLayout = computed(function() {
      var layout = "";
      if (props.mode && !props.layout) {
        props.mode === "number" && (layout = "sizes, prev, pager, next, jumper, total");
        props.mode === "simple" && (layout = "sizes, prev, next");
        props.mode === "complete" && (layout = "sizes, prev, pager, next, jumper,total");
        props.mode === "fixed" && (layout = "prev, pager, next");
      } else if (!props.mode && props.layout || props.mode && props.layout) {
        layout = props.layout;
      } else {
        layout = "prev, pager, next, jumper, total";
      }
      return layout;
    });
    watch(function() {
      return props.currentPage;
    }, function(curPage) {
      state.internalCurrentPage = getValidCurrentPage(curPage);
    }, {
      immediate: true
    });
    watch(internalPageCount, function(pageCount) {
      var oldCurPage = state.internalCurrentPage;
      if (pageCount && pageCount > 0 && oldCurPage === 0) {
        state.internalCurrentPage = 1;
      } else if (pageCount && oldCurPage > pageCount) {
        state.internalCurrentPage = pageCount === 0 ? 1 : pageCount;
        state.userChangePageSize && emitChange();
      }
      state.userChangePageSize = false;
    });
    watch(function() {
      return state.internalCurrentPage;
    }, function(curPage) {
      emit("update:currentPage", curPage);
      state.lastEmittedPage = -1;
    }, {
      immediate: true
    });
    watch(function() {
      return props.pageSize;
    }, function(pageSize) {
      state.internalPageSize = isNaN(pageSize) ? 10 : pageSize;
    }, {
      immediate: true
    });
    watch(function() {
      return props.total;
    }, function(total) {
      state.internalTotal = total;
    });
    onMounted(function() {
      if (document.querySelector('[data-tag="tiny-pager-total-loading"]')) {
        var target = document.querySelector('[data-tag="tiny-pager-total-loading"]');
        if (target) {
          Loading.service({
            target
          });
        }
      }
    });
    return _extends({}, toRefs(state), {
      // 方法
      t,
      handleJumperFocus,
      handleJumperInput,
      handleJumperChange,
      handleJumperClick,
      parseJumperValue,
      handleSizeChange,
      canJumperGo,
      beforeSizeChangeHandler,
      beforePagerChangeHandler,
      beforeJumperChangeHandler,
      copyEmit,
      beforeChangeHandler,
      handleCurrentChange,
      prev,
      next,
      buildBeforePageChangeParam,
      getValidCurrentPage,
      emitChange,
      setTotal,
      // 计算属性
      totalText,
      internalPageCount,
      internalLayout,
      // refs
      sizesList
    });
  }
});
var _hoisted_1 = {
  key: 0,
  class: "text-right py-3 px-0 text-color-text-primary"
};
var _hoisted_2 = {
  key: 0,
  class: "h-7 leading-7 text-xs text-color-text-primary"
};
var _hoisted_3 = /* @__PURE__ */ createElementVNode(
  "div",
  {
    "data-tag": "tiny-pager-total-loading",
    class: "inline-block align-baseline h-3.5 w-3.5 mr-1.5 top-0.5 [&_[data-tag=tiny-loading-icon]]:h-3.5 [&_[data-tag=tiny-loading-icon]]:w-3.5"
  },
  null,
  -1
  /* HOISTED */
);
var _hoisted_4 = {
  class: "text-color-text-secondary"
};
var _hoisted_5 = {
  key: 1,
  class: "h-7 leading-7 text-xs text-color-text-primary"
};
var _hoisted_6 = {
  class: "my-0 mx-1"
};
var _hoisted_7 = {
  class: "text-xs mr-1 relative -top-px"
};
var _hoisted_8 = {
  class: "relative -top-px"
};
var _hoisted_9 = {
  class: "w-7 h-7 leading-7 relative float-right -top-px outline-0 box-border text-center overflow-hidden cursor-pointer"
};
var _hoisted_10 = {
  class: "max-h-[theme(spacing.72)] overflow-y-auto overflow-x-hidden"
};
var _hoisted_11 = ["data-value", "title", "onClick"];
var _hoisted_12 = ["disabled"];
var _hoisted_13 = {
  key: 0,
  class: "group-disabled:text-color-text-disabled group-disabled:cursor-not-allowed group-hover:text-color-icon-hover"
};
var _hoisted_14 = ["disabled"];
var _hoisted_15 = {
  key: 0,
  class: "group-disabled:text-color-text-disabled group-disabled:cursor-not-allowed group-hover:text-color-icon-hover"
};
var _hoisted_16 = {
  class: "text-[0] h-7"
};
var _hoisted_17 = {
  class: "text-xs pl-4 pr-2 text-color-text-primary"
};
var _hoisted_18 = ["disabled", "value"];
function _sfc_render(_ctx, _cache, $props2, $setup, $data, $options) {
  var _component_tiny_icon_chevron_down = resolveComponent("tiny-icon-chevron-down");
  var _component_popover = resolveComponent("popover");
  var _component_tiny_icon_chevron_left = resolveComponent("tiny-icon-chevron-left");
  var _component_pager = resolveComponent("pager");
  var _component_tiny_icon_chevron_right = resolveComponent("tiny-icon-chevron-right");
  return !(_ctx.hideOnSinglePage && (!_ctx.internalPageCount || _ctx.internalPageCount <= 1)) ? (openBlock(), createElementBlock("div", _hoisted_1, [(openBlock(true), createElementBlock(
    Fragment,
    null,
    renderList(_ctx.internalLayout.split(","), function(item, index) {
      return openBlock(), createElementBlock(
        Fragment,
        null,
        [item.trim() === "total" && typeof _ctx.internalTotal === "number" ? (openBlock(), createElementBlock("div", {
          key: "total" + index,
          class: "inline-block align-middle text-xs h-7 leading-7 float-left"
        }, [_ctx.showTotalLoading ? (openBlock(), createElementBlock("div", _hoisted_2, [_hoisted_3, createElementVNode(
          "span",
          _hoisted_4,
          toDisplayString(_ctx.t("ui.page.loadingTotals")),
          1
          /* TEXT */
        )])) : (openBlock(), createElementBlock("div", _hoisted_5, [createElementVNode(
          "span",
          null,
          toDisplayString(_ctx.t("ui.page.total")),
          1
          /* TEXT */
        ), createElementVNode(
          "span",
          _hoisted_6,
          toDisplayString(_ctx.customTotal ? _ctx.totalText : _ctx.internalTotal),
          1
          /* TEXT */
        ), createElementVNode(
          "span",
          null,
          toDisplayString(_ctx.t("ui.page.item")),
          1
          /* TEXT */
        )]))])) : item.trim() === "sizes" ? (openBlock(), createElementBlock("div", {
          key: "sizes" + index,
          "data-tag": "tiny-pager-popover",
          class: "hidden sm:inline-block align-middle text-xs h-7 text-xs text-color-text-primary relative -top-px"
        }, [createVNode(_component_popover, {
          ref_for: true,
          ref: "sizesList",
          placement: "bottom-start",
          "append-to-body": _ctx.popperAppendToBody,
          trigger: "click",
          "popper-class": "w-24 sm:p-0 sm:!mt-1 sm:!mb-1 data-tag-pager-selector" + (_ctx.popperClass ? " " + _ctx.popperClass : ""),
          "visible-arrow": false,
          disabled: _ctx.disabled,
          onShow: _cache[1] || (_cache[1] = function($event) {
            return _ctx.showSizes = true;
          }),
          onHide: _cache[2] || (_cache[2] = function($event) {
            return _ctx.showSizes = false;
          })
        }, {
          reference: withCtx(function() {
            return [createElementVNode("div", {
              class: "m-0 ml-2",
              onClick: _cache[0] || (_cache[0] = withModifiers(function() {
              }, ["stop"]))
            }, [createElementVNode(
              "div",
              {
                ref_for: true,
                ref: "pageSize",
                class: normalizeClass(["min-w-[theme(spacing.18)] max-w-[theme(spacing.40)] relative text-left h-7 leading-7 border border-solid border-color-border rounded text-xs py-0 pr-1 pl-3 block whitespace-nowrap transition-[border] duration-300 outline-0 box-border select-none", _ctx.showSizes ? "border-color-border-focus bg-color-fill-6 text-color-border-focus [&_svg]:rotate-180 [&_svg]:fill-color-brand-hover" : "", _ctx.disabled ? "bg-color-border-disabled text-color-border cursor-not-allowed [&_svg]:fill-color-icon-disabled [&_svg]:cursor-not-allowed" : "bg-color-bg-1 text-color-text-primary hover:bg-color-border-disabled hover:border-color-border active:border-color-border-focus active:bg-color-fill-6 active:text-color-brand"])
              },
              [createElementVNode(
                "span",
                _hoisted_7,
                toDisplayString(_ctx.internalPageSize),
                1
                /* TEXT */
              ), createElementVNode(
                "span",
                _hoisted_8,
                toDisplayString(_ctx.t("ui.page.page")),
                1
                /* TEXT */
              ), createElementVNode("div", _hoisted_9, [createVNode(_component_tiny_icon_chevron_down, {
                class: "fill-color-text-primary text-sm absolute top-0 left-0 right-0 bottom-0 m-auto hover:fill-color-icon-hover transition-transform duration-300"
              })])],
              2
              /* CLASS */
            )])];
          }),
          default: withCtx(function() {
            return [createElementVNode("div", _hoisted_10, [createElementVNode("ul", null, [(openBlock(true), createElementBlock(
              Fragment,
              null,
              renderList(_ctx.pageSizes, function(sizeItem) {
                return openBlock(), createElementBlock("li", {
                  key: String(sizeItem),
                  class: normalizeClass(["min-h-[theme(spacing.8)] py-0 px-2 leading-8 max-w-full cursor-pointer overflow-hidden text-ellipsis text-center whitespace-nowrap m-1 rounded", sizeItem === _ctx.internalPageSize ? "text-color-brand bg-color-fill-6" : "hover:bg-color-bg-2 text-color-text-primary"]),
                  "data-value": sizeItem,
                  title: String(sizeItem),
                  onClick: function onClick($event) {
                    return _ctx.handleSizeChange(Number(sizeItem));
                  }
                }, toDisplayString(sizeItem), 11, _hoisted_11);
              }),
              128
              /* KEYED_FRAGMENT */
            ))])])];
          }),
          _: 1
          /* STABLE */
        }, 8, ["append-to-body", "popper-class", "disabled"])])) : item.trim() === "prev" ? (openBlock(), createElementBlock("button", {
          key: "prev" + index,
          type: "button",
          class: "group min-w-[theme(spacing.7)] h-7 text-xs py-0 px-1 text-color-text-primary bg-color-bg-1 rounded-sm outline-0 ml-0 sm:ml-2 align-bottom cursor-pointer hover:border-color-icon-primary disabled:cursor-default",
          disabled: _ctx.disabled || _ctx.internalCurrentPage <= 1,
          onClick: _cache[3] || (_cache[3] = function() {
            return _ctx.prev && _ctx.prev.apply(_ctx, arguments);
          })
        }, [_ctx.prevText ? (openBlock(), createElementBlock(
          "span",
          _hoisted_13,
          toDisplayString(_ctx.prevText),
          1
          /* TEXT */
        )) : (openBlock(), createBlock(_component_tiny_icon_chevron_left, {
          key: 1,
          class: "align-sub group-disabled:fill-color-icon-disabled group-disabled:cursor-not-allowed group-hover:fill-color-icon-active"
        }))], 8, _hoisted_12)) : item.trim() === "pager" ? (openBlock(), createBlock(_component_pager, {
          key: "pager" + index,
          "is-before-page-change": _ctx.isBeforePageChange,
          onBeforePageChange: _ctx.beforePagerChangeHandler,
          "current-page": _ctx.internalCurrentPage,
          "page-count": _ctx.internalPageCount || 0,
          "pager-count": _ctx.pagerCount,
          onChange: _ctx.handleCurrentChange,
          disabled: _ctx.disabled
        }, null, 8, ["is-before-page-change", "onBeforePageChange", "current-page", "page-count", "pager-count", "onChange", "disabled"])) : item.trim() === "next" ? (openBlock(), createElementBlock("button", {
          key: "next" + index,
          type: "button",
          class: "group min-w-[theme(spacing.7)] h-7 text-xs py-0 px-1 text-color-text-primary bg-color-bg-1 rounded-sm outline-0 ml-0 sm:ml-2 align-bottom cursor-pointer hover:border-color-icon-primary disabled:cursor-default",
          disabled: _ctx.disabled || _ctx.internalCurrentPage === _ctx.internalPageCount || _ctx.internalPageCount === 0,
          onClick: _cache[4] || (_cache[4] = function() {
            return _ctx.next && _ctx.next.apply(_ctx, arguments);
          })
        }, [_ctx.nextText ? (openBlock(), createElementBlock(
          "span",
          _hoisted_15,
          toDisplayString(_ctx.nextText),
          1
          /* TEXT */
        )) : (openBlock(), createBlock(_component_tiny_icon_chevron_right, {
          key: 1,
          class: "align-sub group-disabled:fill-color-icon-disabled group-disabled:cursor-not-allowed group-hover:fill-color-icon-active"
        }))], 8, _hoisted_14)) : item.trim() === "jumper" ? (openBlock(), createElementBlock("div", {
          key: "jumper" + index,
          class: "h-7 leading-7 inline-block align-middle text-xs"
        }, [createElementVNode("div", _hoisted_16, [createElementVNode(
          "span",
          _hoisted_17,
          toDisplayString(_ctx.t("ui.page.jump")),
          1
          /* TEXT */
        ), createElementVNode("input", {
          ref_for: true,
          ref: "jumperInput",
          type: "tel",
          disabled: _ctx.disabled,
          class: "w-8 h-7 text-center align-top rounded-sm inline-block border border-solid border-color-border hover:text-color-icon-primary hover:border-color-icon-primary text-color-text-primary text-xs transition-[border] duration-300 outline-0 box-border mr-0 focus:border-color-border-focus",
          value: _ctx.jumperValue,
          onFocus: _cache[5] || (_cache[5] = function() {
            return _ctx.handleJumperFocus && _ctx.handleJumperFocus.apply(_ctx, arguments);
          }),
          onInput: _cache[6] || (_cache[6] = function() {
            return _ctx.handleJumperInput && _ctx.handleJumperInput.apply(_ctx, arguments);
          }),
          onChange: _cache[7] || (_cache[7] = function() {
            return _ctx.handleJumperChange && _ctx.handleJumperChange.apply(_ctx, arguments);
          })
        }, null, 40, _hoisted_18)])])) : item.trim() === "slot" ? renderSlot(_ctx.$slots, "default", {
          key: 6
        }) : createCommentVNode("v-if", true)],
        64
        /* STABLE_FRAGMENT */
      );
    }),
    256
    /* UNKEYED_FRAGMENT */
  ))])) : createCommentVNode("v-if", true);
}
var mobileFirst = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);

export { mobileFirst as default };
