import z from "./attachments/index.js";
import { Bubble as E, BubbleList as x, BubbleProvider as S } from "./bubble/index.js";
import { BubbleContentClassRenderer as pe, BubbleMarkdownContentRenderer as ce } from "./bubble/index.js";
import P from "./container/index.js";
import b from "./conversations/index.js";
import L from "./drag-overlay/index.js";
import C from "./dropdown-menu/index.js";
import B from "./feedback/index.js";
import y from "./history/index.js";
import O from "./icon-button/index.js";
import { Prompt as j, Prompts as H } from "./prompts/index.js";
import w from "./sender/index.js";
import A, { SuggestionPillButton as M } from "./suggestion-pills/index.js";
import R from "./suggestion-popover/index.js";
import k from "./welcome/index.js";
import W from "./mcp-server-picker/index.js";
var d = /* @__PURE__ */ ((e) => (e.FileTypeNotAllowed = "file-type-not-allowed", e.FileSizeExceeded = "file-size-exceeded", e.FileCountExceeded = "file-count-exceeded", e))(d || {});
function $(e, r) {
  if (!r) return !0;
  const o = r.split(",").map((t) => t.trim());
  return o.includes("*") ? !0 : o.some((t) => {
    if (t.startsWith("."))
      return e.name.toLowerCase().endsWith(t.toLowerCase());
    if (t.includes("/*")) {
      const a = t.split("/")[0];
      return e.type.startsWith(a + "/");
    } else
      return e.type === t;
  });
}
function _(e, r) {
  return e.size <= r;
}
function I(e, r) {
  return e.length <= r;
}
function N(e, r) {
  const { accept: o, multiple: t, maxSize: a, maxFiles: l } = r, n = [], s = [];
  if (!I(e, l))
    return {
      acceptedFiles: n,
      rejectedFiles: Array.from(e),
      rejectionReason: {
        code: d.FileCountExceeded,
        message: `文件数量不能超过 ${l} 个`
      }
    };
  if (e.forEach((i) => {
    $(i, o) && _(i, a) ? n.push(i) : s.push(i);
  }), !t && n.length > 1)
    return {
      acceptedFiles: [],
      rejectedFiles: n,
      rejectionReason: {
        code: d.FileCountExceeded,
        message: "只允许上传一个文件"
      }
    };
  if (s.length > 0) {
    const i = s.some((u) => !_(u, a)), p = i ? d.FileSizeExceeded : d.FileTypeNotAllowed, c = i ? `文件大小不能超过 ${a / 1024 / 1024}MB` : `文件类型不匹配 (accept: ${o})`;
    return {
      acceptedFiles: n,
      rejectedFiles: s,
      rejectionReason: { code: p, message: c }
    };
  }
  return { acceptedFiles: n, rejectedFiles: s, rejectionReason: null };
}
function g(e) {
  return {
    accept: e.accept || "*",
    multiple: e.multiple ?? !0,
    maxSize: e.maxSize || 1024 * 1024 * 10,
    maxFiles: e.maxFiles || 3,
    onDrop: e.onDrop,
    onError: e.onError,
    disabled: e.disabled || !1
  };
}
const se = {
  /**
   * 挂载指令
   * @param el 元素
   * @param binding 绑定
   */
  mounted(e, r) {
    let o = 0;
    const { disabled: t, onDraggingChange: a } = r.value;
    e.__vDropzoneOptions__ = g(r.value);
    const l = {
      /**
       * 拖拽进入
       */
      handleDragEnter: () => {
        t || (o++, o === 1 && a(!0, e));
      },
      /**
       * 拖拽覆盖
       * @param e 事件
       */
      handleDragOver: (n) => {
        t || n.preventDefault();
      },
      /**
       * 拖拽离开
       */
      handleDragLeave: () => {
        t || (o--, o === 0 && a(!1, null));
      },
      /**
       * 拖拽放下
       * @param e 事件
       */
      handleDrop: (n) => {
        var m;
        if (t) return;
        n.preventDefault(), o = 0, a(!1, null);
        const s = (m = n.dataTransfer) == null ? void 0 : m.files, { onDrop: i, onError: p, accept: c, multiple: u, maxSize: D, maxFiles: h } = e.__vDropzoneOptions__;
        if (s && s.length > 0) {
          const F = Array.from(s), { acceptedFiles: v, rejectedFiles: T, rejectionReason: f } = N(F, {
            accept: c,
            multiple: u,
            maxSize: D,
            maxFiles: h
          });
          f && p({ files: T, ...f }), v.length > 0 && i(v);
        }
      }
    };
    e.__vDropzoneHandlers__ = l, e.addEventListener("dragenter", l.handleDragEnter), e.addEventListener("dragover", l.handleDragOver), e.addEventListener("dragleave", l.handleDragLeave), e.addEventListener("drop", l.handleDrop);
  },
  updated(e, r) {
    e.__vDropzoneOptions__ && (e.__vDropzoneOptions__ = g(r.value));
  },
  /**
   * 卸载指令
   * @param el 元素
   */
  unmounted(e) {
    e.__vDropzoneHandlers__ && (e.removeEventListener("dragenter", e.__vDropzoneHandlers__.handleDragEnter), e.removeEventListener("dragover", e.__vDropzoneHandlers__.handleDragOver), e.removeEventListener("dragleave", e.__vDropzoneHandlers__.handleDragLeave), e.removeEventListener("drop", e.__vDropzoneHandlers__.handleDrop), delete e.__vDropzoneHandlers__), delete e.__vDropzoneOptions__;
  }
}, q = [
  z,
  E,
  x,
  S,
  P,
  b,
  L,
  C,
  B,
  y,
  O,
  j,
  H,
  w,
  A,
  M,
  R,
  k,
  W
], ie = {
  install(e) {
    q.forEach((r) => {
      const o = r.name.replace(/^Tiny/, "").replace(/^Tr/, "");
      e.component(`Tr${o}`, r);
    });
  }
};
export {
  z as Attachments,
  E as Bubble,
  pe as BubbleContentClassRenderer,
  x as BubbleList,
  ce as BubbleMarkdownContentRenderer,
  S as BubbleProvider,
  P as Container,
  b as Conversations,
  L as DragOverlay,
  C as DropdownMenu,
  B as Feedback,
  y as History,
  O as IconButton,
  W as McpServerPicker,
  j as Prompt,
  H as Prompts,
  w as Sender,
  M as SuggestionPillButton,
  A as SuggestionPills,
  R as SuggestionPopover,
  z as TrAttachments,
  E as TrBubble,
  x as TrBubbleList,
  S as TrBubbleProvider,
  P as TrContainer,
  b as TrConversations,
  L as TrDragOverlay,
  C as TrDropdownMenu,
  B as TrFeedback,
  y as TrHistory,
  O as TrIconButton,
  W as TrMcpServerPicker,
  j as TrPrompt,
  H as TrPrompts,
  w as TrSender,
  M as TrSuggestionPillButton,
  A as TrSuggestionPills,
  R as TrSuggestionPopover,
  k as TrWelcome,
  k as Welcome,
  ie as default,
  se as vDropzone
};
