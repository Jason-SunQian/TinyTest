import { AllowedComponentProps } from 'vue';
import { App } from 'vue';
import { AutoSize as AutoSize_2 } from './index.type';
import { BubbleContentItem as BubbleContentItem_2 } from './renderers';
import { Component } from 'vue';
import { ComponentCustomProperties } from 'vue';
import { ComponentCustomProps } from 'vue';
import { ComponentInternalInstance } from 'vue';
import { ComponentOptionsBase } from 'vue';
import { ComponentOptionsMixin } from 'vue';
import { ComponentProvideOptions } from 'vue';
import { ComponentPublicInstance } from 'vue';
import { ComputedRef } from 'vue';
import { Config } from 'dompurify';
import { CreateComponentPublicInstanceWithMixins } from 'vue';
import { CSSProperties } from 'vue';
import { DebuggerEvent } from 'vue';
import { DefineComponent } from 'vue';
import { Directive } from 'vue';
import { DisplayVariant as DisplayVariant_2 } from './index.type';
import { ExtractPropTypes } from 'vue';
import { FileTypeMatcher as FileTypeMatcher_2 } from './index.type';
import { GlobalComponents } from 'vue';
import { GlobalDirectives } from 'vue';
import { InputMode as InputMode_2 } from './index.type';
import { MarketCategoryOption as MarketCategoryOption_2 } from './index.type';
import { nextTick } from 'vue';
import { OnCleanup } from '@vue/reactivity';
import { Options } from 'markdown-it';
import { Props } from './components/SuggestionList.vue';
import { PropType } from 'vue';
import { PublicProps } from 'vue';
import { Ref } from 'vue';
import { RendererElement } from 'vue';
import { RendererNode } from 'vue';
import { ShallowUnwrapRef } from 'vue';
import { Slot } from 'vue';
import { SubmitTrigger as SubmitTrigger_2 } from './index.type';
import { ThemeType as ThemeType_2 } from './index.type';
import { TooltipContentProps } from './components/Tooltip.vue';
import { TransitionProps } from 'vue';
import { VNode } from 'vue';
import { VNodeProps } from 'vue';
import { WatchOptions } from 'vue';
import { WatchStopHandle } from 'vue';

declare const __VLS_component: DefineComponent<BubbleProps, {}, {}, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<BubbleProps> & Readonly<{}>, {
content: string | BubbleContentItem_2[];
placement: "start" | "end";
shape: "rounded" | "corner";
maxWidth: string | number;
}, {}, {}, {}, string, ComponentProvideOptions, false, {}, HTMLDivElement>;

declare const __VLS_component_10: DefineComponent<__VLS_PublicProps_4, {
update: () => void;
}, {}, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
"update:selectedGroup": (value: string) => any;
} & {
close: () => any;
open: () => any;
"item-click": (item: SuggestionItem<Record<string, unknown>>) => any;
"click-outside": (event: MouseEvent) => any;
"group-click": (group: SuggestionGroup<Record<string, unknown>>) => any;
}, string, PublicProps, Readonly<__VLS_PublicProps_4> & Readonly<{
onClose?: (() => any) | undefined;
onOpen?: (() => any) | undefined;
"onItem-click"?: ((item: SuggestionItem<Record<string, unknown>>) => any) | undefined;
"onClick-outside"?: ((event: MouseEvent) => any) | undefined;
"onGroup-click"?: ((group: SuggestionGroup<Record<string, unknown>>) => any) | undefined;
"onUpdate:selectedGroup"?: ((value: string) => any) | undefined;
}>, {
title: string;
trigger: "click" | "manual";
groupShowMoreTrigger: "click" | "hover";
topOffset: number;
}, {}, {}, {}, string, ComponentProvideOptions, false, {
basePopperRef: ({
$: ComponentInternalInstance;
$data: {};
$props: {
readonly appendTo?: (string | HTMLElement) | undefined;
readonly offset?: number | {
mainAxis?: number;
crossAxis?: number;
} | undefined;
readonly placement?: "top-center" | "bottom-center" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | undefined;
readonly preventOverflow?: boolean | undefined;
readonly show?: boolean | undefined;
readonly transitionProps?: TransitionProps | undefined;
readonly triggerEvents?: Partial<Record<`on${Capitalize<string>}`, (...args: any[]) => void>> | undefined;
} & VNodeProps & AllowedComponentProps & ComponentCustomProps;
$attrs: {
[x: string]: unknown;
};
$refs: {
[x: string]: unknown;
};
$slots: Readonly<{
[name: string]: Slot<any> | undefined;
}>;
$root: ComponentPublicInstance | null;
$parent: ComponentPublicInstance | null;
$host: Element | null;
$emit: (event: string, ...args: any[]) => void;
$el: any;
$options: ComponentOptionsBase<Readonly<{
appendTo?: string | HTMLElement;
offset?: number | {
mainAxis?: number;
crossAxis?: number;
};
placement?: "top-center" | "bottom-center" | "top-left" | "top-right" | "bottom-left" | "bottom-right";
preventOverflow?: boolean;
show?: boolean;
transitionProps?: TransitionProps;
triggerEvents?: Partial<Record<`on${Capitalize<string>}`, (...args: any[]) => void>>;
}> & Readonly<{}>, {
triggerRef: ComputedRef<HTMLElement | SVGElement | null | undefined>;
popperRef: ComputedRef<HTMLDivElement | null>;
update: () => void;
}, {}, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, {
placement: "top-center" | "bottom-center" | "top-left" | "top-right" | "bottom-left" | "bottom-right";
}, {}, string, {}, GlobalComponents, GlobalDirectives, string, ComponentProvideOptions> & {
beforeCreate?: (() => void) | (() => void)[];
created?: (() => void) | (() => void)[];
beforeMount?: (() => void) | (() => void)[];
mounted?: (() => void) | (() => void)[];
beforeUpdate?: (() => void) | (() => void)[];
updated?: (() => void) | (() => void)[];
activated?: (() => void) | (() => void)[];
deactivated?: (() => void) | (() => void)[];
beforeDestroy?: (() => void) | (() => void)[];
beforeUnmount?: (() => void) | (() => void)[];
destroyed?: (() => void) | (() => void)[];
unmounted?: (() => void) | (() => void)[];
renderTracked?: ((e: DebuggerEvent) => void) | ((e: DebuggerEvent) => void)[];
renderTriggered?: ((e: DebuggerEvent) => void) | ((e: DebuggerEvent) => void)[];
errorCaptured?: ((err: unknown, instance: ComponentPublicInstance | null, info: string) => boolean | void) | ((err: unknown, instance: ComponentPublicInstance | null, info: string) => boolean | void)[];
};
$forceUpdate: () => void;
$nextTick: nextTick;
$watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (...args: [R, R, OnCleanup]) => any : (...args: [any, any, OnCleanup]) => any, options?: WatchOptions): WatchStopHandle;
} & Readonly<{
placement: "top-center" | "bottom-center" | "top-left" | "top-right" | "bottom-left" | "bottom-right";
}> & Omit<Readonly<{
appendTo?: string | HTMLElement;
offset?: number | {
mainAxis?: number;
crossAxis?: number;
};
placement?: "top-center" | "bottom-center" | "top-left" | "top-right" | "bottom-left" | "bottom-right";
preventOverflow?: boolean;
show?: boolean;
transitionProps?: TransitionProps;
triggerEvents?: Partial<Record<`on${Capitalize<string>}`, (...args: any[]) => void>>;
}> & Readonly<{}>, "placement" | "popperRef" | "update" | "triggerRef"> & ShallowUnwrapRef<    {
triggerRef: ComputedRef<HTMLElement | SVGElement | null | undefined>;
popperRef: ComputedRef<HTMLDivElement | null>;
update: () => void;
}> & {} & ComponentCustomProperties & {} & {
$slots: Readonly<{
trigger?: () => VNode[];
content?: () => VNode[];
}> & {
trigger?: () => VNode[];
content?: () => VNode[];
};
}) | null;
listRef: HTMLUListElement;
tooltipRef: CreateComponentPublicInstanceWithMixins<Readonly<{
show?: TooltipContentProps["show"];
} & TooltipContentProps> & Readonly<{
"onUpdate:show"?: ((value: boolean | undefined) => any) | undefined;
}>, {}, {}, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
"update:show": (value: boolean | undefined) => any;
}, PublicProps, {}, false, {}, {}, GlobalComponents, GlobalDirectives, string, {}, any, ComponentProvideOptions, {
P: {};
B: {};
D: {};
C: {};
M: {};
Defaults: {};
}, Readonly<{
show?: TooltipContentProps["show"];
} & TooltipContentProps> & Readonly<{
"onUpdate:show"?: ((value: boolean | undefined) => any) | undefined;
}>, {}, {}, {}, {}, {}> | null;
}, any>;

declare const __VLS_component_11: DefineComponent<WelcomeProps, {}, {}, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<WelcomeProps> & Readonly<{}>, {
align: "left" | "center" | "right" | string;
}, {}, {}, {}, string, ComponentProvideOptions, false, {}, HTMLDivElement>;

declare const __VLS_component_2: DefineComponent<__VLS_Props, {}, {}, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<__VLS_Props> & Readonly<{}>, {
contentRenderers: Record<string, BubbleContentRenderer>;
}, {}, {}, {}, string, ComponentProvideOptions, false, {}, any>;

declare const __VLS_component_3: DefineComponent<__VLS_PublicProps, {}, {}, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
"update:show": (value: boolean) => any;
"update:fullscreen": (value: boolean | undefined) => any;
}, string, PublicProps, Readonly<__VLS_PublicProps> & Readonly<{
"onUpdate:show"?: ((value: boolean) => any) | undefined;
"onUpdate:fullscreen"?: ((value: boolean | undefined) => any) | undefined;
}>, {}, {}, {}, {}, string, ComponentProvideOptions, false, {}, HTMLDivElement>;

declare const __VLS_component_4: DefineComponent<DragOverlayProps, {}, {}, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<DragOverlayProps> & Readonly<{}>, {}, {}, {}, {}, string, ComponentProvideOptions, false, {}, any>;

declare const __VLS_component_5: DefineComponent<__VLS_PublicProps_2, {
update: () => void;
}, {}, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
"update:show": (value: boolean) => any;
} & {
"item-click": (item: DropdownMenuItem) => any;
"click-outside": (event: MouseEvent) => any;
}, string, PublicProps, Readonly<__VLS_PublicProps_2> & Readonly<{
"onUpdate:show"?: ((value: boolean) => any) | undefined;
"onItem-click"?: ((item: DropdownMenuItem) => any) | undefined;
"onClick-outside"?: ((event: MouseEvent) => any) | undefined;
}>, {
trigger: "click" | "hover" | "manual";
}, {}, {}, {}, string, ComponentProvideOptions, false, {
basePopperRef: ({
$: ComponentInternalInstance;
$data: {};
$props: {
readonly appendTo?: (string | HTMLElement) | undefined;
readonly offset?: number | {
mainAxis?: number;
crossAxis?: number;
} | undefined;
readonly placement?: "top-center" | "bottom-center" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | undefined;
readonly preventOverflow?: boolean | undefined;
readonly show?: boolean | undefined;
readonly transitionProps?: TransitionProps | undefined;
readonly triggerEvents?: Partial<Record<`on${Capitalize<string>}`, (...args: any[]) => void>> | undefined;
} & VNodeProps & AllowedComponentProps & ComponentCustomProps;
$attrs: {
[x: string]: unknown;
};
$refs: {
[x: string]: unknown;
};
$slots: Readonly<{
[name: string]: Slot<any> | undefined;
}>;
$root: ComponentPublicInstance | null;
$parent: ComponentPublicInstance | null;
$host: Element | null;
$emit: (event: string, ...args: any[]) => void;
$el: any;
$options: ComponentOptionsBase<Readonly<{
appendTo?: string | HTMLElement;
offset?: number | {
mainAxis?: number;
crossAxis?: number;
};
placement?: "top-center" | "bottom-center" | "top-left" | "top-right" | "bottom-left" | "bottom-right";
preventOverflow?: boolean;
show?: boolean;
transitionProps?: TransitionProps;
triggerEvents?: Partial<Record<`on${Capitalize<string>}`, (...args: any[]) => void>>;
}> & Readonly<{}>, {
triggerRef: ComputedRef<HTMLElement | SVGElement | null | undefined>;
popperRef: ComputedRef<HTMLDivElement | null>;
update: () => void;
}, {}, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, {
placement: "top-center" | "bottom-center" | "top-left" | "top-right" | "bottom-left" | "bottom-right";
}, {}, string, {}, GlobalComponents, GlobalDirectives, string, ComponentProvideOptions> & {
beforeCreate?: (() => void) | (() => void)[];
created?: (() => void) | (() => void)[];
beforeMount?: (() => void) | (() => void)[];
mounted?: (() => void) | (() => void)[];
beforeUpdate?: (() => void) | (() => void)[];
updated?: (() => void) | (() => void)[];
activated?: (() => void) | (() => void)[];
deactivated?: (() => void) | (() => void)[];
beforeDestroy?: (() => void) | (() => void)[];
beforeUnmount?: (() => void) | (() => void)[];
destroyed?: (() => void) | (() => void)[];
unmounted?: (() => void) | (() => void)[];
renderTracked?: ((e: DebuggerEvent) => void) | ((e: DebuggerEvent) => void)[];
renderTriggered?: ((e: DebuggerEvent) => void) | ((e: DebuggerEvent) => void)[];
errorCaptured?: ((err: unknown, instance: ComponentPublicInstance | null, info: string) => boolean | void) | ((err: unknown, instance: ComponentPublicInstance | null, info: string) => boolean | void)[];
};
$forceUpdate: () => void;
$nextTick: nextTick;
$watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (...args: [R, R, OnCleanup]) => any : (...args: [any, any, OnCleanup]) => any, options?: WatchOptions): WatchStopHandle;
} & Readonly<{
placement: "top-center" | "bottom-center" | "top-left" | "top-right" | "bottom-left" | "bottom-right";
}> & Omit<Readonly<{
appendTo?: string | HTMLElement;
offset?: number | {
mainAxis?: number;
crossAxis?: number;
};
placement?: "top-center" | "bottom-center" | "top-left" | "top-right" | "bottom-left" | "bottom-right";
preventOverflow?: boolean;
show?: boolean;
transitionProps?: TransitionProps;
triggerEvents?: Partial<Record<`on${Capitalize<string>}`, (...args: any[]) => void>>;
}> & Readonly<{}>, "placement" | "popperRef" | "update" | "triggerRef"> & ShallowUnwrapRef<    {
triggerRef: ComputedRef<HTMLElement | SVGElement | null | undefined>;
popperRef: ComputedRef<HTMLDivElement | null>;
update: () => void;
}> & {} & ComponentCustomProperties & {} & {
$slots: Readonly<{
trigger?: () => VNode[];
content?: () => VNode[];
}> & {
trigger?: () => VNode[];
content?: () => VNode[];
};
}) | null;
}, any>;

declare const __VLS_component_6: DefineComponent<PromptsProps, {}, {}, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {} & {
"item-click": (ev: MouseEvent, item: PromptProps) => any;
}, string, PublicProps, Readonly<PromptsProps> & Readonly<{
"onItem-click"?: ((ev: MouseEvent, item: PromptProps) => any) | undefined;
}>, {}, {}, {}, {}, string, ComponentProvideOptions, false, {}, HTMLDivElement>;

declare const __VLS_component_7: DefineComponent<SenderProps, {
focus: () => void;
blur: () => void;
clear: () => void;
submit: () => void;
startSpeech: () => void;
stopSpeech: () => void;
activateTemplateFirstField: () => void;
}, {}, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
[x: string]: any;
} & {
[x: string]: any;
}, string, PublicProps, Readonly<SenderProps> & Readonly<{
[x: `on${Capitalize<any>}`]: ((...args: any) => any) | undefined;
}>, {
disabled: boolean;
modelValue: string;
placeholder: string;
mode: InputMode_2;
loading: boolean;
autofocus: boolean;
clearable: boolean;
showWordLimit: boolean;
allowSpeech: boolean;
allowFiles: boolean;
submitType: SubmitTrigger_2;
stopText: string;
suggestions: string[];
autoSize: AutoSize_2;
maxLength: number;
suggestionPopupWidth: string | number;
theme: ThemeType_2;
templateData: UserItem[];
}, {}, {}, {}, string, ComponentProvideOptions, false, {
senderRef: HTMLDivElement;
inputWrapperRef: HTMLDivElement;
templateEditorRef: CreateComponentPublicInstanceWithMixins<Readonly<{
modelValue?: UserItem[];
}> & Readonly<{
onSubmit?: (() => any) | undefined;
"onUpdate:modelValue"?: ((value: UserItem[]) => any) | undefined;
}>, {
clearHistory: () => void;
activateFirstField: () => void;
}, {}, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
"update:modelValue": (value: UserItem[]) => any;
} & {
submit: () => any;
}, PublicProps, {}, false, {}, {}, GlobalComponents, GlobalDirectives, string, {
editorRef: HTMLDivElement;
}, HTMLDivElement, ComponentProvideOptions, {
P: {};
B: {};
D: {};
C: {};
M: {};
Defaults: {};
}, Readonly<{
modelValue?: UserItem[];
}> & Readonly<{
onSubmit?: (() => any) | undefined;
"onUpdate:modelValue"?: ((value: UserItem[]) => any) | undefined;
}>, {
clearHistory: () => void;
activateFirstField: () => void;
}, {}, {}, {}, {}> | null;
inputRef: CreateComponentPublicInstanceWithMixins<Readonly<ExtractPropTypes<    {
_constants: {
type: ObjectConstructor;
default: () => {
INPUT_PC: string;
INPUTGROUP_PC: string;
INPUT_MOBILE: string;
INPUTGROUP_MOBILE: string;
Mode: string;
inputMode(mode: any): string;
inputGroupMode(mode: any): string;
VALIDATE_ICON: {
Validating: string;
Success: string;
Error: string;
};
COMPONENT_NAME: {
FormItem: string;
};
MASKSYMBOL: string;
TEXTAREA_HEIGHT_MOBILE: number;
};
};
name: StringConstructor;
size: StringConstructor;
form: StringConstructor;
label: StringConstructor;
height: NumberConstructor;
resize: StringConstructor;
tabindex: {
type: StringConstructor;
default: string;
};
disabled: BooleanConstructor;
readonly: BooleanConstructor;
hoverExpand: BooleanConstructor;
mask: BooleanConstructor;
suffixIcon: (StringConstructor | ObjectConstructor)[];
prefixIcon: (StringConstructor | ObjectConstructor)[];
modelValue: PropType<string | number | null>;
type: {
type: StringConstructor;
default: string;
};
memorySpace: {
type: NumberConstructor;
default: number;
};
vertical: {
type: BooleanConstructor;
default: boolean;
};
selectMenu: {
type: {
(arrayLength: number): {
id: string;
label: string;
}[];
(...items: {
id: string;
label: string;
}[]): {
id: string;
label: string;
}[];
new (arrayLength: number): {
id: string;
label: string;
}[];
new (...items: {
id: string;
label: string;
}[]): {
id: string;
label: string;
}[];
isArray(arg: any): arg is any[];
readonly prototype: any[];
from<T>(arrayLike: ArrayLike<T>): T[];
from<T_1, U>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => U, thisArg?: any): U[];
from<T_2>(iterable: Iterable<T_2> | ArrayLike<T_2>): T_2[];
from<T_3, U_1>(iterable: Iterable<T_3> | ArrayLike<T_3>, mapfn: (v: T_3, k: number) => U_1, thisArg?: any): U_1[];
of<T_4>(...items: T_4[]): T_4[];
readonly [Symbol.species]: ArrayConstructor;
};
default: () => never[];
};
ellipsis: {
type: BooleanConstructor;
default: boolean;
};
contentStyle: {
type: ObjectConstructor;
default: () => {};
};
isSelect: {
type: BooleanConstructor;
default: boolean;
};
tips: StringConstructor;
counter: {
type: BooleanConstructor;
default: boolean;
};
autosize: {
type: (BooleanConstructor | ObjectConstructor)[];
default: boolean;
};
clearable: {
type: BooleanConstructor;
default: boolean;
};
autocomplete: {
type: StringConstructor;
default: string;
};
showPassword: {
type: BooleanConstructor;
default: boolean;
};
showWordLimit: {
type: BooleanConstructor;
default: boolean;
};
showTitle: {
type: BooleanConstructor;
default: boolean;
};
validateEvent: {
type: BooleanConstructor;
default: boolean;
};
popupMore: {
type: BooleanConstructor;
default: boolean;
};
textareaTitle: {
type: StringConstructor;
default: string;
};
displayOnly: {
type: BooleanConstructor;
default: boolean;
};
displayOnlyContent: {
type: StringConstructor;
default: string;
};
customClass: {
type: StringConstructor;
default: string;
};
frontClearIcon: {
type: BooleanConstructor;
default: boolean;
};
showEmptyValue: {
type: BooleanConstructor;
default: undefined;
};
textAlign: {
type: StringConstructor;
default: string;
};
width: {
type: PropType<string | number | null>;
};
showTooltip: {
type: BooleanConstructor;
default: boolean;
};
inputBoxType: {
type: StringConstructor;
default: string;
validator: (value: string) => boolean;
};
tiny_mode: StringConstructor;
tiny_mode_root: BooleanConstructor;
tiny_template: (ObjectConstructor | FunctionConstructor)[];
tiny_renderless: FunctionConstructor;
tiny_theme: StringConstructor;
tiny_mcp_config: ObjectConstructor;
tiny_chart_theme: ObjectConstructor;
}>>, () => VNode<RendererNode, RendererElement, {
[key: string]: any;
}>, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, PublicProps, {
disabled: boolean;
type: string;
ellipsis: boolean;
mask: boolean;
vertical: boolean;
customClass: string;
tiny_mode_root: boolean;
_constants: Record<string, any>;
tabindex: string;
showTitle: boolean;
readonly: boolean;
hoverExpand: boolean;
memorySpace: number;
selectMenu: {
id: string;
label: string;
}[];
contentStyle: Record<string, any>;
isSelect: boolean;
counter: boolean;
autosize: boolean | Record<string, any>;
clearable: boolean;
autocomplete: string;
showPassword: boolean;
showWordLimit: boolean;
validateEvent: boolean;
popupMore: boolean;
textareaTitle: string;
displayOnly: boolean;
displayOnlyContent: string;
frontClearIcon: boolean;
showEmptyValue: boolean;
textAlign: string;
showTooltip: boolean;
inputBoxType: string;
}, true, {}, {}, GlobalComponents, GlobalDirectives, string, {}, any, ComponentProvideOptions, {
P: {};
B: {};
D: {};
C: {};
M: {};
Defaults: {};
}, Readonly<ExtractPropTypes<    {
_constants: {
type: ObjectConstructor;
default: () => {
INPUT_PC: string;
INPUTGROUP_PC: string;
INPUT_MOBILE: string;
INPUTGROUP_MOBILE: string;
Mode: string;
inputMode(mode: any): string;
inputGroupMode(mode: any): string;
VALIDATE_ICON: {
Validating: string;
Success: string;
Error: string;
};
COMPONENT_NAME: {
FormItem: string;
};
MASKSYMBOL: string;
TEXTAREA_HEIGHT_MOBILE: number;
};
};
name: StringConstructor;
size: StringConstructor;
form: StringConstructor;
label: StringConstructor;
height: NumberConstructor;
resize: StringConstructor;
tabindex: {
type: StringConstructor;
default: string;
};
disabled: BooleanConstructor;
readonly: BooleanConstructor;
hoverExpand: BooleanConstructor;
mask: BooleanConstructor;
suffixIcon: (StringConstructor | ObjectConstructor)[];
prefixIcon: (StringConstructor | ObjectConstructor)[];
modelValue: PropType<string | number | null>;
type: {
type: StringConstructor;
default: string;
};
memorySpace: {
type: NumberConstructor;
default: number;
};
vertical: {
type: BooleanConstructor;
default: boolean;
};
selectMenu: {
type: {
(arrayLength: number): {
id: string;
label: string;
}[];
(...items: {
id: string;
label: string;
}[]): {
id: string;
label: string;
}[];
new (arrayLength: number): {
id: string;
label: string;
}[];
new (...items: {
id: string;
label: string;
}[]): {
id: string;
label: string;
}[];
isArray(arg: any): arg is any[];
readonly prototype: any[];
from<T>(arrayLike: ArrayLike<T>): T[];
from<T_1, U>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => U, thisArg?: any): U[];
from<T_2>(iterable: Iterable<T_2> | ArrayLike<T_2>): T_2[];
from<T_3, U_1>(iterable: Iterable<T_3> | ArrayLike<T_3>, mapfn: (v: T_3, k: number) => U_1, thisArg?: any): U_1[];
of<T_4>(...items: T_4[]): T_4[];
readonly [Symbol.species]: ArrayConstructor;
};
default: () => never[];
};
ellipsis: {
type: BooleanConstructor;
default: boolean;
};
contentStyle: {
type: ObjectConstructor;
default: () => {};
};
isSelect: {
type: BooleanConstructor;
default: boolean;
};
tips: StringConstructor;
counter: {
type: BooleanConstructor;
default: boolean;
};
autosize: {
type: (BooleanConstructor | ObjectConstructor)[];
default: boolean;
};
clearable: {
type: BooleanConstructor;
default: boolean;
};
autocomplete: {
type: StringConstructor;
default: string;
};
showPassword: {
type: BooleanConstructor;
default: boolean;
};
showWordLimit: {
type: BooleanConstructor;
default: boolean;
};
showTitle: {
type: BooleanConstructor;
default: boolean;
};
validateEvent: {
type: BooleanConstructor;
default: boolean;
};
popupMore: {
type: BooleanConstructor;
default: boolean;
};
textareaTitle: {
type: StringConstructor;
default: string;
};
displayOnly: {
type: BooleanConstructor;
default: boolean;
};
displayOnlyContent: {
type: StringConstructor;
default: string;
};
customClass: {
type: StringConstructor;
default: string;
};
frontClearIcon: {
type: BooleanConstructor;
default: boolean;
};
showEmptyValue: {
type: BooleanConstructor;
default: undefined;
};
textAlign: {
type: StringConstructor;
default: string;
};
width: {
type: PropType<string | number | null>;
};
showTooltip: {
type: BooleanConstructor;
default: boolean;
};
inputBoxType: {
type: StringConstructor;
default: string;
validator: (value: string) => boolean;
};
tiny_mode: StringConstructor;
tiny_mode_root: BooleanConstructor;
tiny_template: (ObjectConstructor | FunctionConstructor)[];
tiny_renderless: FunctionConstructor;
tiny_theme: StringConstructor;
tiny_mcp_config: ObjectConstructor;
tiny_chart_theme: ObjectConstructor;
}>>, () => VNode<RendererNode, RendererElement, {
[key: string]: any;
}>, {}, {}, {}, {
disabled: boolean;
type: string;
ellipsis: boolean;
mask: boolean;
vertical: boolean;
customClass: string;
tiny_mode_root: boolean;
_constants: Record<string, any>;
tabindex: string;
showTitle: boolean;
readonly: boolean;
hoverExpand: boolean;
memorySpace: number;
selectMenu: {
id: string;
label: string;
}[];
contentStyle: Record<string, any>;
isSelect: boolean;
counter: boolean;
autosize: boolean | Record<string, any>;
clearable: boolean;
autocomplete: string;
showPassword: boolean;
showWordLimit: boolean;
validateEvent: boolean;
popupMore: boolean;
textareaTitle: string;
displayOnly: boolean;
displayOnlyContent: string;
frontClearIcon: boolean;
showEmptyValue: boolean;
textAlign: string;
showTooltip: boolean;
inputBoxType: string;
}> | null;
buttonsContainerRef: HTMLDivElement;
suggestionsListRef: CreateComponentPublicInstanceWithMixins<Readonly<Props> & Readonly<{
onSelect?: ((item: string) => any) | undefined;
"onItem-hover"?: ((index: number) => any) | undefined;
"onItem-leave"?: (() => any) | undefined;
}>, {}, {}, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {} & {
select: (item: string) => any;
"item-hover": (index: number) => any;
"item-leave": () => any;
}, PublicProps, {}, false, {}, {}, GlobalComponents, GlobalDirectives, string, {
suggestionsListRef: HTMLDivElement;
}, any, ComponentProvideOptions, {
P: {};
B: {};
D: {};
C: {};
M: {};
Defaults: {};
}, Readonly<Props> & Readonly<{
onSelect?: ((item: string) => any) | undefined;
"onItem-hover"?: ((index: number) => any) | undefined;
"onItem-leave"?: (() => any) | undefined;
}>, {}, {}, {}, {}, {}> | null;
}, HTMLDivElement>;

declare const __VLS_component_8: DefineComponent<SuggestionPillButtonProps, {}, {}, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<SuggestionPillButtonProps> & Readonly<{}>, {}, {}, {}, {}, string, ComponentProvideOptions, false, {}, HTMLButtonElement>;

declare const __VLS_component_9: DefineComponent<__VLS_PublicProps_3, {
children: ComputedRef<(HTMLElement | SVGElement)[]>;
}, {}, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
"update:showAll": (value: boolean | undefined) => any;
} & {
"click-outside": (event: MouseEvent) => any;
}, string, PublicProps, Readonly<__VLS_PublicProps_3> & Readonly<{
"onClick-outside"?: ((event: MouseEvent) => any) | undefined;
"onUpdate:showAll"?: ((value: boolean | undefined) => any) | undefined;
}>, {
showAllButtonOn: "hover" | "always";
overflowMode: "expand" | "scroll";
}, {}, {}, {}, string, ComponentProvideOptions, false, {
containerWrapperRef: HTMLDivElement;
containerRef: HTMLDivElement;
staticMaybeItemRefs: unknown[];
floatingItemsRef: HTMLDivElement;
floatingMaybeItemRefs: unknown[];
}, HTMLDivElement>;

declare type __VLS_Props = {
    contentRenderers?: Record<string, BubbleContentRenderer>;
};

declare type __VLS_Props_2 = DropdownMenuProps;

declare type __VLS_Props_3 = SuggestionPillsProps;

declare type __VLS_Props_4 = SuggestionPopoverProps;

declare type __VLS_Props_5 = McpServerPickerProps;

declare type __VLS_PublicProps = {
    'show': ContainerProps['show'];
    'fullscreen'?: ContainerProps['fullscreen'];
};

declare type __VLS_PublicProps_2 = {
    'show'?: boolean;
} & __VLS_Props_2;

declare type __VLS_PublicProps_3 = {
    'showAll'?: SuggestionPillsProps['showAll'];
} & __VLS_Props_3;

declare type __VLS_PublicProps_4 = {
    'selectedGroup'?: string;
} & __VLS_Props_4;

declare type __VLS_PublicProps_5 = {
    'visible': boolean;
} & __VLS_Props_5;

declare function __VLS_template(): {
    attrs: Partial<{}>;
    slots: Readonly<BubbleSlots> & BubbleSlots;
    refs: {};
    rootEl: HTMLDivElement;
};

declare function __VLS_template_10(): {
    attrs: Partial<{}>;
    slots: Readonly<SuggestionPopoverSlots> & SuggestionPopoverSlots;
    refs: {
        basePopperRef: ({
            $: ComponentInternalInstance;
            $data: {};
            $props: {
                readonly appendTo?: (string | HTMLElement) | undefined;
                readonly offset?: number | {
                    mainAxis?: number;
                    crossAxis?: number;
                } | undefined;
                readonly placement?: "top-center" | "bottom-center" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | undefined;
                readonly preventOverflow?: boolean | undefined;
                readonly show?: boolean | undefined;
                readonly transitionProps?: TransitionProps | undefined;
                readonly triggerEvents?: Partial<Record<`on${Capitalize<string>}`, (...args: any[]) => void>> | undefined;
            } & VNodeProps & AllowedComponentProps & ComponentCustomProps;
            $attrs: {
                [x: string]: unknown;
            };
            $refs: {
                [x: string]: unknown;
            };
            $slots: Readonly<{
                [name: string]: Slot<any> | undefined;
            }>;
            $root: ComponentPublicInstance | null;
            $parent: ComponentPublicInstance | null;
            $host: Element | null;
            $emit: (event: string, ...args: any[]) => void;
            $el: any;
            $options: ComponentOptionsBase<Readonly<{
            appendTo?: string | HTMLElement;
            offset?: number | {
            mainAxis?: number;
            crossAxis?: number;
            };
            placement?: "top-center" | "bottom-center" | "top-left" | "top-right" | "bottom-left" | "bottom-right";
            preventOverflow?: boolean;
            show?: boolean;
            transitionProps?: TransitionProps;
            triggerEvents?: Partial<Record<`on${Capitalize<string>}`, (...args: any[]) => void>>;
            }> & Readonly<{}>, {
            triggerRef: ComputedRef<HTMLElement | SVGElement | null | undefined>;
            popperRef: ComputedRef<HTMLDivElement | null>;
            update: () => void;
            }, {}, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, {
            placement: "top-center" | "bottom-center" | "top-left" | "top-right" | "bottom-left" | "bottom-right";
            }, {}, string, {}, GlobalComponents, GlobalDirectives, string, ComponentProvideOptions> & {
                beforeCreate?: (() => void) | (() => void)[];
                created?: (() => void) | (() => void)[];
                beforeMount?: (() => void) | (() => void)[];
                mounted?: (() => void) | (() => void)[];
                beforeUpdate?: (() => void) | (() => void)[];
                updated?: (() => void) | (() => void)[];
                activated?: (() => void) | (() => void)[];
                deactivated?: (() => void) | (() => void)[];
                beforeDestroy?: (() => void) | (() => void)[];
                beforeUnmount?: (() => void) | (() => void)[];
                destroyed?: (() => void) | (() => void)[];
                unmounted?: (() => void) | (() => void)[];
                renderTracked?: ((e: DebuggerEvent) => void) | ((e: DebuggerEvent) => void)[];
                renderTriggered?: ((e: DebuggerEvent) => void) | ((e: DebuggerEvent) => void)[];
                errorCaptured?: ((err: unknown, instance: ComponentPublicInstance | null, info: string) => boolean | void) | ((err: unknown, instance: ComponentPublicInstance | null, info: string) => boolean | void)[];
            };
            $forceUpdate: () => void;
            $nextTick: nextTick;
            $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (...args: [R, R, OnCleanup]) => any : (...args: [any, any, OnCleanup]) => any, options?: WatchOptions): WatchStopHandle;
        } & Readonly<{
            placement: "top-center" | "bottom-center" | "top-left" | "top-right" | "bottom-left" | "bottom-right";
        }> & Omit<Readonly<{
            appendTo?: string | HTMLElement;
            offset?: number | {
                mainAxis?: number;
                crossAxis?: number;
            };
            placement?: "top-center" | "bottom-center" | "top-left" | "top-right" | "bottom-left" | "bottom-right";
            preventOverflow?: boolean;
            show?: boolean;
            transitionProps?: TransitionProps;
            triggerEvents?: Partial<Record<`on${Capitalize<string>}`, (...args: any[]) => void>>;
        }> & Readonly<{}>, "placement" | "popperRef" | "update" | "triggerRef"> & ShallowUnwrapRef<    {
        triggerRef: ComputedRef<HTMLElement | SVGElement | null | undefined>;
        popperRef: ComputedRef<HTMLDivElement | null>;
        update: () => void;
        }> & {} & ComponentCustomProperties & {} & {
            $slots: Readonly<{
                trigger?: () => VNode[];
                content?: () => VNode[];
            }> & {
                trigger?: () => VNode[];
                content?: () => VNode[];
            };
        }) | null;
        listRef: HTMLUListElement;
        tooltipRef: CreateComponentPublicInstanceWithMixins<Readonly<{
        show?: TooltipContentProps["show"];
        } & TooltipContentProps> & Readonly<{
        "onUpdate:show"?: ((value: boolean | undefined) => any) | undefined;
        }>, {}, {}, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
        "update:show": (value: boolean | undefined) => any;
        }, PublicProps, {}, false, {}, {}, GlobalComponents, GlobalDirectives, string, {}, any, ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
        }, Readonly<{
        show?: TooltipContentProps["show"];
        } & TooltipContentProps> & Readonly<{
        "onUpdate:show"?: ((value: boolean | undefined) => any) | undefined;
        }>, {}, {}, {}, {}, {}> | null;
    };
    rootEl: any;
};

declare function __VLS_template_11(): {
    attrs: Partial<{}>;
    slots: Readonly<WelcomeSlots> & WelcomeSlots;
    refs: {};
    rootEl: HTMLDivElement;
};

declare function __VLS_template_2(): {
    attrs: Partial<{}>;
    slots: {
        default?(_: {}): any;
    };
    refs: {};
    rootEl: any;
};

declare function __VLS_template_3(): {
    attrs: Partial<{}>;
    slots: Readonly<ContainerSlots> & ContainerSlots;
    refs: {};
    rootEl: HTMLDivElement;
};

declare function __VLS_template_4(): {
    attrs: Partial<{}>;
    slots: {
        overlay?(_: {
            isDragging: true;
        }): any;
    };
    refs: {};
    rootEl: any;
};

declare function __VLS_template_5(): {
    attrs: Partial<{}>;
    slots: {
        trigger?(_: {}): any;
    };
    refs: {
        basePopperRef: ({
            $: ComponentInternalInstance;
            $data: {};
            $props: {
                readonly appendTo?: (string | HTMLElement) | undefined;
                readonly offset?: number | {
                    mainAxis?: number;
                    crossAxis?: number;
                } | undefined;
                readonly placement?: "top-center" | "bottom-center" | "top-left" | "top-right" | "bottom-left" | "bottom-right" | undefined;
                readonly preventOverflow?: boolean | undefined;
                readonly show?: boolean | undefined;
                readonly transitionProps?: TransitionProps | undefined;
                readonly triggerEvents?: Partial<Record<`on${Capitalize<string>}`, (...args: any[]) => void>> | undefined;
            } & VNodeProps & AllowedComponentProps & ComponentCustomProps;
            $attrs: {
                [x: string]: unknown;
            };
            $refs: {
                [x: string]: unknown;
            };
            $slots: Readonly<{
                [name: string]: Slot<any> | undefined;
            }>;
            $root: ComponentPublicInstance | null;
            $parent: ComponentPublicInstance | null;
            $host: Element | null;
            $emit: (event: string, ...args: any[]) => void;
            $el: any;
            $options: ComponentOptionsBase<Readonly<{
            appendTo?: string | HTMLElement;
            offset?: number | {
            mainAxis?: number;
            crossAxis?: number;
            };
            placement?: "top-center" | "bottom-center" | "top-left" | "top-right" | "bottom-left" | "bottom-right";
            preventOverflow?: boolean;
            show?: boolean;
            transitionProps?: TransitionProps;
            triggerEvents?: Partial<Record<`on${Capitalize<string>}`, (...args: any[]) => void>>;
            }> & Readonly<{}>, {
            triggerRef: ComputedRef<HTMLElement | SVGElement | null | undefined>;
            popperRef: ComputedRef<HTMLDivElement | null>;
            update: () => void;
            }, {}, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, {
            placement: "top-center" | "bottom-center" | "top-left" | "top-right" | "bottom-left" | "bottom-right";
            }, {}, string, {}, GlobalComponents, GlobalDirectives, string, ComponentProvideOptions> & {
                beforeCreate?: (() => void) | (() => void)[];
                created?: (() => void) | (() => void)[];
                beforeMount?: (() => void) | (() => void)[];
                mounted?: (() => void) | (() => void)[];
                beforeUpdate?: (() => void) | (() => void)[];
                updated?: (() => void) | (() => void)[];
                activated?: (() => void) | (() => void)[];
                deactivated?: (() => void) | (() => void)[];
                beforeDestroy?: (() => void) | (() => void)[];
                beforeUnmount?: (() => void) | (() => void)[];
                destroyed?: (() => void) | (() => void)[];
                unmounted?: (() => void) | (() => void)[];
                renderTracked?: ((e: DebuggerEvent) => void) | ((e: DebuggerEvent) => void)[];
                renderTriggered?: ((e: DebuggerEvent) => void) | ((e: DebuggerEvent) => void)[];
                errorCaptured?: ((err: unknown, instance: ComponentPublicInstance | null, info: string) => boolean | void) | ((err: unknown, instance: ComponentPublicInstance | null, info: string) => boolean | void)[];
            };
            $forceUpdate: () => void;
            $nextTick: nextTick;
            $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (...args: [R, R, OnCleanup]) => any : (...args: [any, any, OnCleanup]) => any, options?: WatchOptions): WatchStopHandle;
        } & Readonly<{
            placement: "top-center" | "bottom-center" | "top-left" | "top-right" | "bottom-left" | "bottom-right";
        }> & Omit<Readonly<{
            appendTo?: string | HTMLElement;
            offset?: number | {
                mainAxis?: number;
                crossAxis?: number;
            };
            placement?: "top-center" | "bottom-center" | "top-left" | "top-right" | "bottom-left" | "bottom-right";
            preventOverflow?: boolean;
            show?: boolean;
            transitionProps?: TransitionProps;
            triggerEvents?: Partial<Record<`on${Capitalize<string>}`, (...args: any[]) => void>>;
        }> & Readonly<{}>, "placement" | "popperRef" | "update" | "triggerRef"> & ShallowUnwrapRef<    {
        triggerRef: ComputedRef<HTMLElement | SVGElement | null | undefined>;
        popperRef: ComputedRef<HTMLDivElement | null>;
        update: () => void;
        }> & {} & ComponentCustomProperties & {} & {
            $slots: Readonly<{
                trigger?: () => VNode[];
                content?: () => VNode[];
            }> & {
                trigger?: () => VNode[];
                content?: () => VNode[];
            };
        }) | null;
    };
    rootEl: any;
};

declare function __VLS_template_6(): {
    attrs: Partial<{}>;
    slots: Readonly<PromptsSlots> & PromptsSlots;
    refs: {};
    rootEl: HTMLDivElement;
};

declare function __VLS_template_7(): {
    attrs: Partial<{}>;
    slots: {
        header?(_: {}): any;
        prefix?(_: {}): any;
        decorativeContent?(_: {}): any;
        actions?(_: {}): any;
        'footer-left'?(_: {}): any;
        'footer-right'?(_: {}): any;
        footer?(_: {}): any;
    };
    refs: {
        senderRef: HTMLDivElement;
        inputWrapperRef: HTMLDivElement;
        templateEditorRef: CreateComponentPublicInstanceWithMixins<Readonly<{
        modelValue?: UserItem[];
        }> & Readonly<{
        onSubmit?: (() => any) | undefined;
        "onUpdate:modelValue"?: ((value: UserItem[]) => any) | undefined;
        }>, {
        clearHistory: () => void;
        activateFirstField: () => void;
        }, {}, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
        "update:modelValue": (value: UserItem[]) => any;
        } & {
        submit: () => any;
        }, PublicProps, {}, false, {}, {}, GlobalComponents, GlobalDirectives, string, {
        editorRef: HTMLDivElement;
        }, HTMLDivElement, ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
        }, Readonly<{
        modelValue?: UserItem[];
        }> & Readonly<{
        onSubmit?: (() => any) | undefined;
        "onUpdate:modelValue"?: ((value: UserItem[]) => any) | undefined;
        }>, {
        clearHistory: () => void;
        activateFirstField: () => void;
        }, {}, {}, {}, {}> | null;
        inputRef: CreateComponentPublicInstanceWithMixins<Readonly<ExtractPropTypes<    {
        _constants: {
        type: ObjectConstructor;
        default: () => {
        INPUT_PC: string;
        INPUTGROUP_PC: string;
        INPUT_MOBILE: string;
        INPUTGROUP_MOBILE: string;
        Mode: string;
        inputMode(mode: any): string;
        inputGroupMode(mode: any): string;
        VALIDATE_ICON: {
        Validating: string;
        Success: string;
        Error: string;
        };
        COMPONENT_NAME: {
        FormItem: string;
        };
        MASKSYMBOL: string;
        TEXTAREA_HEIGHT_MOBILE: number;
        };
        };
        name: StringConstructor;
        size: StringConstructor;
        form: StringConstructor;
        label: StringConstructor;
        height: NumberConstructor;
        resize: StringConstructor;
        tabindex: {
        type: StringConstructor;
        default: string;
        };
        disabled: BooleanConstructor;
        readonly: BooleanConstructor;
        hoverExpand: BooleanConstructor;
        mask: BooleanConstructor;
        suffixIcon: (StringConstructor | ObjectConstructor)[];
        prefixIcon: (StringConstructor | ObjectConstructor)[];
        modelValue: PropType<string | number | null>;
        type: {
        type: StringConstructor;
        default: string;
        };
        memorySpace: {
        type: NumberConstructor;
        default: number;
        };
        vertical: {
        type: BooleanConstructor;
        default: boolean;
        };
        selectMenu: {
        type: {
        (arrayLength: number): {
        id: string;
        label: string;
        }[];
        (...items: {
        id: string;
        label: string;
        }[]): {
        id: string;
        label: string;
        }[];
        new (arrayLength: number): {
        id: string;
        label: string;
        }[];
        new (...items: {
        id: string;
        label: string;
        }[]): {
        id: string;
        label: string;
        }[];
        isArray(arg: any): arg is any[];
        readonly prototype: any[];
        from<T>(arrayLike: ArrayLike<T>): T[];
        from<T_1, U>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => U, thisArg?: any): U[];
        from<T_2>(iterable: Iterable<T_2> | ArrayLike<T_2>): T_2[];
        from<T_3, U_1>(iterable: Iterable<T_3> | ArrayLike<T_3>, mapfn: (v: T_3, k: number) => U_1, thisArg?: any): U_1[];
        of<T_4>(...items: T_4[]): T_4[];
        readonly [Symbol.species]: ArrayConstructor;
        };
        default: () => never[];
        };
        ellipsis: {
        type: BooleanConstructor;
        default: boolean;
        };
        contentStyle: {
        type: ObjectConstructor;
        default: () => {};
        };
        isSelect: {
        type: BooleanConstructor;
        default: boolean;
        };
        tips: StringConstructor;
        counter: {
        type: BooleanConstructor;
        default: boolean;
        };
        autosize: {
        type: (BooleanConstructor | ObjectConstructor)[];
        default: boolean;
        };
        clearable: {
        type: BooleanConstructor;
        default: boolean;
        };
        autocomplete: {
        type: StringConstructor;
        default: string;
        };
        showPassword: {
        type: BooleanConstructor;
        default: boolean;
        };
        showWordLimit: {
        type: BooleanConstructor;
        default: boolean;
        };
        showTitle: {
        type: BooleanConstructor;
        default: boolean;
        };
        validateEvent: {
        type: BooleanConstructor;
        default: boolean;
        };
        popupMore: {
        type: BooleanConstructor;
        default: boolean;
        };
        textareaTitle: {
        type: StringConstructor;
        default: string;
        };
        displayOnly: {
        type: BooleanConstructor;
        default: boolean;
        };
        displayOnlyContent: {
        type: StringConstructor;
        default: string;
        };
        customClass: {
        type: StringConstructor;
        default: string;
        };
        frontClearIcon: {
        type: BooleanConstructor;
        default: boolean;
        };
        showEmptyValue: {
        type: BooleanConstructor;
        default: undefined;
        };
        textAlign: {
        type: StringConstructor;
        default: string;
        };
        width: {
        type: PropType<string | number | null>;
        };
        showTooltip: {
        type: BooleanConstructor;
        default: boolean;
        };
        inputBoxType: {
        type: StringConstructor;
        default: string;
        validator: (value: string) => boolean;
        };
        tiny_mode: StringConstructor;
        tiny_mode_root: BooleanConstructor;
        tiny_template: (ObjectConstructor | FunctionConstructor)[];
        tiny_renderless: FunctionConstructor;
        tiny_theme: StringConstructor;
        tiny_mcp_config: ObjectConstructor;
        tiny_chart_theme: ObjectConstructor;
        }>>, () => VNode<RendererNode, RendererElement, {
        [key: string]: any;
        }>, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, PublicProps, {
        disabled: boolean;
        type: string;
        ellipsis: boolean;
        mask: boolean;
        vertical: boolean;
        customClass: string;
        tiny_mode_root: boolean;
        _constants: Record<string, any>;
        tabindex: string;
        showTitle: boolean;
        readonly: boolean;
        hoverExpand: boolean;
        memorySpace: number;
        selectMenu: {
        id: string;
        label: string;
        }[];
        contentStyle: Record<string, any>;
        isSelect: boolean;
        counter: boolean;
        autosize: boolean | Record<string, any>;
        clearable: boolean;
        autocomplete: string;
        showPassword: boolean;
        showWordLimit: boolean;
        validateEvent: boolean;
        popupMore: boolean;
        textareaTitle: string;
        displayOnly: boolean;
        displayOnlyContent: string;
        frontClearIcon: boolean;
        showEmptyValue: boolean;
        textAlign: string;
        showTooltip: boolean;
        inputBoxType: string;
        }, true, {}, {}, GlobalComponents, GlobalDirectives, string, {}, any, ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
        }, Readonly<ExtractPropTypes<    {
        _constants: {
        type: ObjectConstructor;
        default: () => {
        INPUT_PC: string;
        INPUTGROUP_PC: string;
        INPUT_MOBILE: string;
        INPUTGROUP_MOBILE: string;
        Mode: string;
        inputMode(mode: any): string;
        inputGroupMode(mode: any): string;
        VALIDATE_ICON: {
        Validating: string;
        Success: string;
        Error: string;
        };
        COMPONENT_NAME: {
        FormItem: string;
        };
        MASKSYMBOL: string;
        TEXTAREA_HEIGHT_MOBILE: number;
        };
        };
        name: StringConstructor;
        size: StringConstructor;
        form: StringConstructor;
        label: StringConstructor;
        height: NumberConstructor;
        resize: StringConstructor;
        tabindex: {
        type: StringConstructor;
        default: string;
        };
        disabled: BooleanConstructor;
        readonly: BooleanConstructor;
        hoverExpand: BooleanConstructor;
        mask: BooleanConstructor;
        suffixIcon: (StringConstructor | ObjectConstructor)[];
        prefixIcon: (StringConstructor | ObjectConstructor)[];
        modelValue: PropType<string | number | null>;
        type: {
        type: StringConstructor;
        default: string;
        };
        memorySpace: {
        type: NumberConstructor;
        default: number;
        };
        vertical: {
        type: BooleanConstructor;
        default: boolean;
        };
        selectMenu: {
        type: {
        (arrayLength: number): {
        id: string;
        label: string;
        }[];
        (...items: {
        id: string;
        label: string;
        }[]): {
        id: string;
        label: string;
        }[];
        new (arrayLength: number): {
        id: string;
        label: string;
        }[];
        new (...items: {
        id: string;
        label: string;
        }[]): {
        id: string;
        label: string;
        }[];
        isArray(arg: any): arg is any[];
        readonly prototype: any[];
        from<T>(arrayLike: ArrayLike<T>): T[];
        from<T_1, U>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => U, thisArg?: any): U[];
        from<T_2>(iterable: Iterable<T_2> | ArrayLike<T_2>): T_2[];
        from<T_3, U_1>(iterable: Iterable<T_3> | ArrayLike<T_3>, mapfn: (v: T_3, k: number) => U_1, thisArg?: any): U_1[];
        of<T_4>(...items: T_4[]): T_4[];
        readonly [Symbol.species]: ArrayConstructor;
        };
        default: () => never[];
        };
        ellipsis: {
        type: BooleanConstructor;
        default: boolean;
        };
        contentStyle: {
        type: ObjectConstructor;
        default: () => {};
        };
        isSelect: {
        type: BooleanConstructor;
        default: boolean;
        };
        tips: StringConstructor;
        counter: {
        type: BooleanConstructor;
        default: boolean;
        };
        autosize: {
        type: (BooleanConstructor | ObjectConstructor)[];
        default: boolean;
        };
        clearable: {
        type: BooleanConstructor;
        default: boolean;
        };
        autocomplete: {
        type: StringConstructor;
        default: string;
        };
        showPassword: {
        type: BooleanConstructor;
        default: boolean;
        };
        showWordLimit: {
        type: BooleanConstructor;
        default: boolean;
        };
        showTitle: {
        type: BooleanConstructor;
        default: boolean;
        };
        validateEvent: {
        type: BooleanConstructor;
        default: boolean;
        };
        popupMore: {
        type: BooleanConstructor;
        default: boolean;
        };
        textareaTitle: {
        type: StringConstructor;
        default: string;
        };
        displayOnly: {
        type: BooleanConstructor;
        default: boolean;
        };
        displayOnlyContent: {
        type: StringConstructor;
        default: string;
        };
        customClass: {
        type: StringConstructor;
        default: string;
        };
        frontClearIcon: {
        type: BooleanConstructor;
        default: boolean;
        };
        showEmptyValue: {
        type: BooleanConstructor;
        default: undefined;
        };
        textAlign: {
        type: StringConstructor;
        default: string;
        };
        width: {
        type: PropType<string | number | null>;
        };
        showTooltip: {
        type: BooleanConstructor;
        default: boolean;
        };
        inputBoxType: {
        type: StringConstructor;
        default: string;
        validator: (value: string) => boolean;
        };
        tiny_mode: StringConstructor;
        tiny_mode_root: BooleanConstructor;
        tiny_template: (ObjectConstructor | FunctionConstructor)[];
        tiny_renderless: FunctionConstructor;
        tiny_theme: StringConstructor;
        tiny_mcp_config: ObjectConstructor;
        tiny_chart_theme: ObjectConstructor;
        }>>, () => VNode<RendererNode, RendererElement, {
        [key: string]: any;
        }>, {}, {}, {}, {
        disabled: boolean;
        type: string;
        ellipsis: boolean;
        mask: boolean;
        vertical: boolean;
        customClass: string;
        tiny_mode_root: boolean;
        _constants: Record<string, any>;
        tabindex: string;
        showTitle: boolean;
        readonly: boolean;
        hoverExpand: boolean;
        memorySpace: number;
        selectMenu: {
        id: string;
        label: string;
        }[];
        contentStyle: Record<string, any>;
        isSelect: boolean;
        counter: boolean;
        autosize: boolean | Record<string, any>;
        clearable: boolean;
        autocomplete: string;
        showPassword: boolean;
        showWordLimit: boolean;
        validateEvent: boolean;
        popupMore: boolean;
        textareaTitle: string;
        displayOnly: boolean;
        displayOnlyContent: string;
        frontClearIcon: boolean;
        showEmptyValue: boolean;
        textAlign: string;
        showTooltip: boolean;
        inputBoxType: string;
        }> | null;
        buttonsContainerRef: HTMLDivElement;
        suggestionsListRef: CreateComponentPublicInstanceWithMixins<Readonly<Props> & Readonly<{
        onSelect?: ((item: string) => any) | undefined;
        "onItem-hover"?: ((index: number) => any) | undefined;
        "onItem-leave"?: (() => any) | undefined;
        }>, {}, {}, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {} & {
        select: (item: string) => any;
        "item-hover": (index: number) => any;
        "item-leave": () => any;
        }, PublicProps, {}, false, {}, {}, GlobalComponents, GlobalDirectives, string, {
        suggestionsListRef: HTMLDivElement;
        }, any, ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
        }, Readonly<Props> & Readonly<{
        onSelect?: ((item: string) => any) | undefined;
        "onItem-hover"?: ((index: number) => any) | undefined;
        "onItem-leave"?: (() => any) | undefined;
        }>, {}, {}, {}, {}, {}> | null;
    };
    rootEl: HTMLDivElement;
};

declare function __VLS_template_8(): {
    attrs: Partial<{}>;
    slots: Readonly<SuggestionPillButtonSlots> & SuggestionPillButtonSlots;
    refs: {};
    rootEl: HTMLButtonElement;
};

declare function __VLS_template_9(): {
    attrs: Partial<{}>;
    slots: Readonly<SuggestionPillsSlots> & SuggestionPillsSlots;
    refs: {
        containerWrapperRef: HTMLDivElement;
        containerRef: HTMLDivElement;
        staticMaybeItemRefs: unknown[];
        floatingItemsRef: HTMLDivElement;
        floatingMaybeItemRefs: unknown[];
    };
    rootEl: HTMLDivElement;
};

declare type __VLS_TemplateResult = ReturnType<typeof __VLS_template>;

declare type __VLS_TemplateResult_10 = ReturnType<typeof __VLS_template_10>;

declare type __VLS_TemplateResult_11 = ReturnType<typeof __VLS_template_11>;

declare type __VLS_TemplateResult_2 = ReturnType<typeof __VLS_template_2>;

declare type __VLS_TemplateResult_3 = ReturnType<typeof __VLS_template_3>;

declare type __VLS_TemplateResult_4 = ReturnType<typeof __VLS_template_4>;

declare type __VLS_TemplateResult_5 = ReturnType<typeof __VLS_template_5>;

declare type __VLS_TemplateResult_6 = ReturnType<typeof __VLS_template_6>;

declare type __VLS_TemplateResult_7 = ReturnType<typeof __VLS_template_7>;

declare type __VLS_TemplateResult_8 = ReturnType<typeof __VLS_template_8>;

declare type __VLS_TemplateResult_9 = ReturnType<typeof __VLS_template_9>;

declare type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_10<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_11<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_2<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_3<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_4<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_5<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_6<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_7<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_8<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_9<T, S> = T & {
    new (): {
        $slots: S;
    };
};

export declare interface ActionButton {
    type: string;
    label: string;
    handler?: (file: Attachment) => void;
}

export declare interface ActionButtonsProps {
    loading?: boolean;
    disabled?: boolean;
    showClear?: boolean;
    hasContent?: boolean;
    buttonGroup?: ButtonGroupConfig;
    allowSpeech?: boolean;
    speechStatus?: {
        isRecording: boolean;
        isSupported: boolean;
    };
    allowFiles?: boolean;
    submitType?: SubmitTrigger;
    showShortcuts?: boolean;
    isOverLimit?: boolean;
    stopText?: string;
}

export declare type Attachment = UrlAttachment | RawFileAttachment;

export declare interface AttachmentListEmits {
    (e: 'update:items', items: Attachment[]): void;
    (e: 'remove', file: Attachment): void;
    (e: 'download', event: MouseEvent, file: Attachment): void;
    (e: 'retry', file: Attachment): void;
    (e: 'preview', event: MouseEvent, file: Attachment): void;
    (e: 'action', payload: {
        action: ActionButton;
        file: Attachment;
    }): void;
}

export declare interface AttachmentListProps {
    items?: Attachment[];
    disabled?: boolean;
    wrap?: boolean;
    fileIcons?: Record<string, Component>;
    actions?: ActionButton[];
    variant?: DisplayVariant;
    fileMatchers?: FileTypeMatcher[];
}

export declare type AutoSize = boolean | {
    minRows: number;
    maxRows: number;
};

export declare interface BaseAttachment {
    id?: string;
    name?: string;
    status?: FileStatus;
    fileType?: FileType;
    message?: string;
}

declare type BaseCardProps = Pick<AttachmentListProps, 'fileIcons' | 'disabled' | 'actions' | 'fileMatchers'>;

export declare type BaseFileType = 'image' | 'pdf' | 'word' | 'excel' | 'ppt' | 'folder' | 'other';

declare interface BaseHistoryProps {
    activeTab?: string;
    searchBar?: boolean;
    searchQuery?: string;
    searchPlaceholder?: string;
    searchFn?: (query: string, item: HistoryItem) => boolean;
    selected?: string;
}

declare interface BaseTextItem {
    id: string;
    type: string;
    content: string;
}

declare const Bubble: typeof _default_16 & {
    install: typeof bubbleInstall;
};
export { Bubble }
export { Bubble as TrBubble }

export declare interface BubbleCommonProps {
    /**
     * 气泡对齐位置
     */
    placement?: 'start' | 'end';
    /**
     * 气泡头像
     */
    avatar?: VNode;
    /**
     * 气泡形状，默认 'corner'
     */
    shape?: 'rounded' | 'corner';
    /**
     * 气泡内容渲染器。
     * 如果 Bubble 中的 content 是长度大于 0 的数组，则 contentRenderer 无效。将会使用 BubbleProvider 中注册的渲染器
     */
    contentRenderer?: BubbleContentRenderer;
    hidden?: boolean;
    maxWidth?: string | number;
}

export declare abstract class BubbleContentClassRenderer {
    abstract render(options: {
        [key: string]: any;
    }): VNode;
}

export declare type BubbleContentFunctionRenderer = (options: {
    [key: string]: any;
}) => VNode;

export declare interface BubbleContentItem {
    type: string;
    [key: string]: any;
}

export declare type BubbleContentRenderer = BubbleContentFunctionRenderer | BubbleContentClassRenderer | Component;

declare const bubbleInstall: (app: App) => void;

declare const BubbleList: typeof _default_17 & {
    install: typeof bubbleListInstall;
};
export { BubbleList }
export { BubbleList as TrBubbleList }

declare const bubbleListInstall: (app: App) => void;

export declare interface BubbleListProps {
    items: (BubbleProps & {
        slots?: BubbleSlots;
    })[];
    /**
     * 每个角色的默认配置项
     */
    roles?: Record<string, BubbleRoleConfig>;
    /**
     * 列表是否加载中
     */
    loading?: boolean;
    /**
     * 指定哪个角色可以有加载中状态
     */
    loadingRole?: string;
    autoScroll?: boolean;
}

export declare class BubbleMarkdownContentRenderer extends BubbleContentClassRenderer {
    readonly mdConfig: Options;
    readonly dompurifyConfig: Config & {
        disable?: boolean;
    };
    private md;
    constructor(mdConfig?: Options, dompurifyConfig?: Config & {
        disable?: boolean;
    });
    render(options: {
        content?: string;
    }): VNode<RendererNode, RendererElement, {
    [key: string]: any;
    }>;
}

export declare interface BubbleProps extends BubbleCommonProps {
    /**
     * 气泡内容
     */
    content?: string | BubbleContentItem[];
    id?: string | number | symbol;
    role?: string;
    loading?: boolean;
    aborted?: boolean;
}

declare const BubbleProvider: typeof _default_18 & {
    install: typeof bubbleProviderInstall;
};
export { BubbleProvider }
export { BubbleProvider as TrBubbleProvider }

declare const bubbleProviderInstall: (app: App) => void;

export declare type BubbleRoleConfig = BubbleCommonProps & {
    slots?: BubbleSlots;
};

export declare interface BubbleSlots {
    default?: (slotProps: {
        bubbleProps: BubbleProps;
    }) => unknown;
    footer?: (slotProps: {
        bubbleProps: BubbleProps;
    }) => unknown;
    loading?: (slotProps: {
        bubbleProps: BubbleProps;
    }) => unknown;
}

export declare interface ButtonGroupConfig {
    file?: ControlState & fileUploadConfig;
    submit?: ControlState;
}

export declare interface ContainerProps {
    /**
     * model:show
     */
    show: boolean;
    /**
     * model:fullscreen
     */
    fullscreen?: boolean;
}

export declare interface ContainerSlots {
    default: () => unknown;
    title: () => unknown;
    operations: () => unknown;
    footer: () => unknown;
}

export declare interface ControlState {
    tooltips?: string | TooltipRender;
    disabled?: boolean;
}

declare const _default: {
    install<T>(app: App<T>): void;
};
export default _default;

declare const _default_10: typeof _default_27 & {
    install: typeof install_8;
};
export { _default_10 as Sender }
export { _default_10 as TrSender }

declare const _default_11: typeof _default_29 & {
    install: typeof install_9;
};
export { _default_11 as SuggestionPills }
export { _default_11 as TrSuggestionPills }

declare const _default_12: typeof _default_30 & {
    install: typeof install_10;
};
export { _default_12 as SuggestionPopover }
export { _default_12 as TrSuggestionPopover }

declare const _default_13: typeof _default_31 & {
    install: typeof install_11;
};
export { _default_13 as TrWelcome }
export { _default_13 as Welcome }

declare const _default_14: typeof _default_32 & {
    install: typeof install_12;
};
export { _default_14 as McpServerPicker }
export { _default_14 as TrMcpServerPicker }

declare const _default_15: DefineComponent<AttachmentListProps, {}, {}, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {} & {
"update:items": (items: Attachment[]) => any;
remove: (file: Attachment) => any;
download: (event: MouseEvent, file: Attachment) => any;
retry: (file: Attachment) => any;
preview: (event: MouseEvent, file: Attachment) => any;
action: (payload: {
action: ActionButton;
file: Attachment;
}) => any;
}, string, PublicProps, Readonly<AttachmentListProps> & Readonly<{
"onUpdate:items"?: ((items: Attachment[]) => any) | undefined;
onRemove?: ((file: Attachment) => any) | undefined;
onDownload?: ((event: MouseEvent, file: Attachment) => any) | undefined;
onRetry?: ((file: Attachment) => any) | undefined;
onPreview?: ((event: MouseEvent, file: Attachment) => any) | undefined;
onAction?: ((payload: {
action: ActionButton;
file: Attachment;
}) => any) | undefined;
}>, {
actions: ActionButton[];
fileMatchers: FileTypeMatcher_2[];
variant: DisplayVariant_2;
}, {}, {}, {}, string, ComponentProvideOptions, false, {}, HTMLDivElement>;

declare const _default_16: __VLS_WithTemplateSlots<typeof __VLS_component, __VLS_TemplateResult["slots"]>;

declare const _default_17: DefineComponent<BubbleListProps, {}, {}, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<BubbleListProps> & Readonly<{}>, {}, {}, {}, {}, string, ComponentProvideOptions, false, {
scrollContainerRef: HTMLDivElement;
}, HTMLDivElement>;

declare const _default_18: __VLS_WithTemplateSlots_2<typeof __VLS_component_2, __VLS_TemplateResult_2["slots"]>;

declare const _default_19: __VLS_WithTemplateSlots_3<typeof __VLS_component_3, __VLS_TemplateResult_3["slots"]>;

declare const _default_2: typeof _default_15 & {
    install: typeof install;
};
export { _default_2 as Attachments }
export { _default_2 as TrAttachments }

declare const _default_20: DefineComponent<    {}, {}, {}, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, string, ComponentProvideOptions, true, {}, any>;

declare const _default_21: __VLS_WithTemplateSlots_4<typeof __VLS_component_4, __VLS_TemplateResult_4["slots"]>;

declare const _default_22: __VLS_WithTemplateSlots_5<typeof __VLS_component_5, __VLS_TemplateResult_5["slots"]>;

declare const _default_23: DefineComponent<FeedbackProps, {}, {}, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {} & {
action: (name: string) => any;
operation: (name: string) => any;
}, string, PublicProps, Readonly<FeedbackProps> & Readonly<{
onAction?: ((name: string) => any) | undefined;
onOperation?: ((name: string) => any) | undefined;
}>, {
operationsLimit: number;
actionsLimit: number;
sourcesLinesLimit: number;
}, {}, {}, {}, string, ComponentProvideOptions, false, {}, HTMLDivElement>;

declare const _default_24: DefineComponent<IconButtonProps, {}, {}, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<IconButtonProps> & Readonly<{}>, {
size: string | number;
svgSize: string | number;
}, {}, {}, {}, string, ComponentProvideOptions, false, {}, HTMLButtonElement>;

declare const _default_25: DefineComponent<PromptProps, {}, {}, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, PublicProps, Readonly<PromptProps> & Readonly<{}>, {}, {}, {}, {}, string, ComponentProvideOptions, false, {}, HTMLDivElement>;

declare const _default_26: __VLS_WithTemplateSlots_6<typeof __VLS_component_6, __VLS_TemplateResult_6["slots"]>;

declare const _default_27: __VLS_WithTemplateSlots_7<typeof __VLS_component_7, __VLS_TemplateResult_7["slots"]>;

declare const _default_28: __VLS_WithTemplateSlots_8<typeof __VLS_component_8, __VLS_TemplateResult_8["slots"]>;

declare const _default_29: __VLS_WithTemplateSlots_9<typeof __VLS_component_9, __VLS_TemplateResult_9["slots"]>;

declare const _default_3: typeof _default_19 & {
    install: typeof install_2;
};
export { _default_3 as Container }
export { _default_3 as TrContainer }

declare const _default_30: __VLS_WithTemplateSlots_10<typeof __VLS_component_10, __VLS_TemplateResult_10["slots"]>;

declare const _default_31: __VLS_WithTemplateSlots_11<typeof __VLS_component_11, __VLS_TemplateResult_11["slots"]>;

declare const _default_32: DefineComponent<__VLS_PublicProps_5, {}, {}, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
[x: string]: any;
} & {
[x: string]: any;
}, string, PublicProps, Readonly<__VLS_PublicProps_5> & Readonly<{
[x: `on${Capitalize<any>}`]: ((...args: any) => any) | undefined;
}>, {
title: string;
loading: boolean;
searchPlaceholder: string;
installedPlugins: PluginInfo[];
marketPlugins: PluginInfo[];
enableSearch: boolean;
marketCategoryOptions: MarketCategoryOption_2[];
marketCategoryPlaceholder: string;
enableMarketCategoryFilter: boolean;
defaultActiveTab: "installed" | "market";
showInstalledTab: boolean;
showMarketTab: boolean;
popupConfig: PopupConfig;
installedTabTitle: string;
marketTabTitle: string;
showCustomAddButton: boolean;
customAddButtonText: string;
allowPluginToggle: boolean;
allowToolToggle: boolean;
allowPluginDelete: boolean;
allowPluginAdd: boolean;
marketLoading: boolean;
}, {}, {}, {}, string, ComponentProvideOptions, false, {}, any>;

declare const _default_4: typeof _default_20 & {
    install: typeof install_3;
};
export { _default_4 as Conversations }
export { _default_4 as TrConversations }

declare const _default_5: typeof _default_21 & {
    install: typeof install_4;
};
export { _default_5 as DragOverlay }
export { _default_5 as TrDragOverlay }

declare const _default_6: typeof _default_22 & {
    install: typeof install_5;
};
export { _default_6 as DropdownMenu }
export { _default_6 as TrDropdownMenu }

declare const _default_7: typeof _default_23 & {
    install: typeof install_6;
};
export { _default_7 as Feedback }
export { _default_7 as TrFeedback }

declare const _default_8: {
    install: <T>(app: App<T>) => void;
    name: string;
};
export { _default_8 as History }
export { _default_8 as TrHistory }

declare const _default_9: typeof _default_24 & {
    install: typeof install_7;
};
export { _default_9 as IconButton }
export { _default_9 as TrIconButton }

export declare type DisplayVariant = 'picture' | 'card' | 'auto';

declare interface DragAwareElement extends HTMLElement {
    __vDropzoneHandlers__?: Handlers;
    __vDropzoneOptions__?: DragAwareOptions;
}

declare type DragAwareOptions = Omit<DropzoneBinding, 'onDraggingChange'>;

/**
 * 拖拽上传组件的属性
 */
export declare interface DragOverlayProps {
    /**
     * 覆盖层标题
     * @default ''
     */
    overlayTitle?: string;
    /**
     * 覆盖层描述文本数组
     * @default []
     */
    overlayDescription?: string[];
    /**
     * 控制拖拽覆盖层是否可见。这旨在与 v-dropzone 指令结合使用，由父组件控制。
     * @default false
     */
    isDragging?: boolean;
    /**
     * @description 拖拽目标元素，用于定位覆盖层
     * @default null
     */
    dragTarget?: HTMLElement | null;
    /**
     * @description 是否全屏模式，控制覆盖层的边框显示
     * @default false
     */
    fullscreen?: boolean;
}

export declare interface DragOverlaySlots {
    /**
     * 覆盖层插槽，用于自定义拖拽时的覆盖层内容
     */
    overlay?: (props: {
        isDragging: boolean;
    }) => unknown;
}

/**
 * 拖拽区域错误码
 */
declare enum DragZoneErrorCode {
    /**
     * 文件类型不允许
     */
    FileTypeNotAllowed = "file-type-not-allowed",
    /**
     * 文件大小超出限制
     */
    FileSizeExceeded = "file-size-exceeded",
    /**
     * 文件数量超出限制
     */
    FileCountExceeded = "file-count-exceeded"
}

export declare interface DropdownMenuEmits {
    (e: 'item-click', item: DropdownMenuItem): void;
    /**
     * 点击外部区域时触发, 仅在 trigger 为 'click' 或 'manual' 时有效
     */
    (e: 'click-outside', event: MouseEvent): void;
}

export declare interface DropdownMenuEventProps {
    onItemClick?: (item: DropdownMenuItem) => void;
    onClickOutside?: (event: MouseEvent) => void;
}

export declare interface DropdownMenuEvents {
    /**
     * @deprecated
     */
    itemClick?: (item: DropdownMenuItem) => void;
    /**
     * @deprecated
     */
    clickOutside?: (event: MouseEvent) => void;
}

export declare interface DropdownMenuItem {
    id: string;
    text: string;
}

export declare interface DropdownMenuProps {
    appendTo?: string | HTMLElement;
    items: DropdownMenuItem[];
    /**
     * 当 trigger 为 'click' 或 'hover' 时，是一个双向绑定的 model(v-model:show)，可在组件外部控制显示状态。
     * 否则当 trigger 为 'manual' 时，是一个单向绑定的 prop，组件内部无法修改 show 的值
     */
    show?: boolean;
    /**
     * 触发方式。默认值为 'click'
     */
    trigger?: 'click' | 'hover' | 'manual';
}

export declare interface DropdownMenuSlots {
    trigger?: () => VNode | VNode[];
}

/**
 * 拖拽上传组件的属性
 */
export declare interface DropzoneBinding {
    /**
     * 允许上传的文件类型, 与原生 input 的 accept 属性一致
     * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#accept
     * @example '.jpg,.png,image/*'
     */
    accept?: string;
    /**
     * 是否允许多选
     * @default true
     */
    multiple?: boolean;
    /**
     * 是否禁用拖拽
     * @default false
     */
    disabled?: boolean;
    /**
     * 单个文件的最大大小（单位：字节）
     * @default 10 * 1024 * 1024 (10MB)
     */
    maxSize?: number;
    /**
     * 允许上传的最大文件数量
     * @default 3
     */
    maxFiles?: number;
    /**
     * 拖拽完成后的回调
     * @param files 上传的文件
     */
    onDrop: (files: File[]) => void;
    /**
     * 拖拽失败后的回调
     * @param rejection 拒绝信息
     */
    onError: (rejection: FileRejection) => void;
    /**
     * 拖拽开始时的回调
     * @param dragging 是否正在拖拽
     * @param element 拖拽目标元素
     */
    onDraggingChange: (dragging: boolean, element: HTMLElement | null) => void;
}

export declare interface FeedbackEvents {
    (e: 'operation', name: string): void;
    (e: 'action', name: string): void;
}

export declare interface FeedbackProps {
    operations?: {
        name: string;
        label: string;
        onClick?: () => void;
    }[];
    operationsLimit?: number;
    actions?: {
        name: string;
        label: string;
        icon?: 'copy' | 'refresh' | 'like' | 'dislike' | VNode | Component;
        onClick?: () => void;
    }[];
    actionsLimit?: number;
    sources?: {
        label: string;
        link: string;
    }[];
    sourcesLinesLimit?: number;
}

export declare interface FileCardEmits {
    (e: 'remove', file: Attachment): void;
    (e: 'preview', event: MouseEvent, file: Attachment): void;
    (e: 'download', event: MouseEvent, file: Attachment): void;
    (e: 'retry', file: Attachment): void;
    (e: 'action', payload: {
        action: ActionButton;
        file: Attachment;
    }): void;
}

export declare interface FileCardProps extends BaseCardProps {
    file: Attachment;
    variant: 'picture' | 'card';
    showStatus?: boolean;
}

/**
 * 文件拒绝信息
 */
export declare interface FileRejection extends RejectionReason {
    files: File[];
}

export declare type FileStatus = 'uploading' | 'success' | 'error';

export declare type FileType = BaseFileType | string;

export declare interface FileTypeMatcher {
    type: string;
    matcher: (file: File | string) => boolean;
    icon?: Component;
}

declare interface fileUploadConfig {
    accept?: string;
    multiple?: boolean;
}

export declare interface Handlers {
    handleDragEnter: (e: DragEvent) => void;
    handleDragOver: (e: DragEvent) => void;
    handleDragLeave: (e: DragEvent) => void;
    handleDrop: (e: DragEvent) => void;
}

export declare type HistoryData = HistoryItem[] | HistoryGroup[];

export declare interface HistoryEvents {
    (e: 'close'): void;
    (e: 'item-click', item: HistoryItem): void;
    (e: 'item-title-change', newTitle: string, rawData: HistoryItem): void;
    (e: 'item-delete', item: HistoryItem): void;
}

export declare interface HistoryGroup<T = Record<string, unknown>> {
    group: string | symbol;
    items: HistoryItem<T>[];
}

export declare interface HistoryItem<T = Record<string, unknown>> {
    id: string;
    title: string;
    tag?: HistoryItemTagProps;
    data?: T;
}

export declare interface HistoryItemTagProps {
    text: string;
    type?: 'success' | 'warning' | 'error' | 'info' | 'default';
    style?: CSSProperties;
}

export declare type HistoryProps = SingleTabHistoryProps | MultiTabHistoryProps;

export declare interface IconButtonProps {
    icon: VNode | Component;
    size?: string | number;
    svgSize?: string | number;
    rounded?: boolean;
}

export declare interface InputHandler {
    inputValue: Ref<string>;
    isComposing: Ref<boolean>;
    clearInput: () => void;
}

export declare type InputMode = 'single' | 'multiple';

declare const install: <T>(app: App<T>) => void;

declare const install_10: <T>(app: App<T>) => void;

declare const install_11: <T>(app: App<T>) => void;

declare const install_12: <T>(app: App<T>) => void;

declare const install_2: <T>(app: App<T>) => void;

declare const install_3: <T>(app: App<T>) => void;

declare const install_4: <T>(app: App<T>) => void;

declare const install_5: <T>(app: App<T>) => void;

declare const install_6: <T>(app: App<T>) => void;

declare const install_7: <T>(app: App<T>) => void;

declare const install_8: <T>(app: App<T>) => void;

declare const install_9: <T>(app: App<T>) => void;

declare const installPillButton: <T>(app: App<T>) => void;

declare const installPrompt: <T>(app: App<T>) => void;

declare const installPrompts: <T>(app: App<T>) => void;

export declare interface KeyboardHandler {
    handleKeyPress: (e: KeyboardEvent) => void;
    triggerSubmit: () => void;
}

export declare interface MarketCategoryOption {
    value: string;
    label: string;
}

export declare interface McpServerPickerEmits {
    (e: 'search', query: string, tab: 'installed' | 'market'): void;
    (e: 'market-category-change', category: string): void;
    (e: 'tab-change', activeTab: 'installed' | 'market'): void;
    (e: 'plugin-toggle', plugin: PluginInfo, enabled: boolean): void;
    (e: 'plugin-delete', plugin: PluginInfo): void;
    (e: 'plugin-add', plugin: PluginInfo, added: boolean): void;
    (e: 'plugin-create', type: 'form' | 'code', data: PluginCreationData): void;
    (e: 'tool-toggle', plugin: PluginInfo, toolId: string, enabled: boolean): void;
    (e: 'refresh', tab: 'installed' | 'market'): void;
    (e: 'update:activeCount', count: number): void;
    (e: 'update:visible', visible: boolean): void;
}

export declare interface McpServerPickerProps {
    installedPlugins?: PluginInfo[];
    marketPlugins?: PluginInfo[];
    searchPlaceholder?: string;
    enableSearch?: boolean;
    marketCategoryOptions?: MarketCategoryOption[];
    marketCategoryPlaceholder?: string;
    enableMarketCategoryFilter?: boolean;
    defaultActiveTab?: 'installed' | 'market';
    showInstalledTab?: boolean;
    showMarketTab?: boolean;
    visible?: boolean;
    popupConfig?: PopupConfig;
    activeCount?: number;
    installedTabTitle?: string;
    marketTabTitle?: string;
    title?: string;
    showCustomAddButton?: boolean;
    customAddButtonText?: string;
    allowPluginToggle?: boolean;
    allowToolToggle?: boolean;
    allowPluginDelete?: boolean;
    allowPluginAdd?: boolean;
    loading?: boolean;
    marketLoading?: boolean;
}

export declare type MultiTabHistoryProps = {
    tabs: {
        title: string;
        id: string;
    }[];
    data: Record<string, HistoryData>;
} & BaseHistoryProps;

export declare interface PluginCardEmits {
    (e: 'toggle-plugin', enabled: boolean): void;
    (e: 'toggle-tool', toolId: string, enabled: boolean): void;
    (e: 'add-plugin', added: boolean): void;
    (e: 'delete-plugin'): void;
}

export declare type PluginCardMode = 'installed' | 'market';

export declare interface PluginCardProps {
    plugin: PluginInfo;
    mode?: PluginCardMode;
    showToolCount?: boolean;
}

export declare type PluginCreationData = PluginFormData | string;

export declare interface PluginFormData {
    name: string;
    description: string;
    type: 'sse' | 'streamableHttp';
    url: string;
    headers: string;
    thumbnail?: File | null;
}

export declare interface PluginInfo {
    id: string;
    name: string;
    icon: string;
    description: string;
    enabled: boolean;
    tools: PluginTool[];
    added?: boolean;
    category?: string;
}

export declare interface PluginModalEmits {
    (e: 'update:visible', value: boolean): void;
    (e: 'confirm', type: 'form' | 'code', data: PluginCreationData): void;
}

export declare interface PluginTool {
    id: string;
    name: string;
    description: string;
    enabled: boolean;
}

export declare interface PopupConfig {
    type: 'fixed' | 'drawer';
    position?: {
        top?: string | number;
        left?: string | number;
        right?: string | number;
        bottom?: string | number;
    };
    drawer?: {
        direction: 'left' | 'right';
    };
}

declare const Prompt: typeof _default_25 & {
    install: typeof installPrompt;
};
export { Prompt }
export { Prompt as TrPrompt }

export declare interface PromptProps {
    /**
     * 提示标签，显示提示的主要内容
     */
    label: string;
    /**
     * 唯一标识用于区分每个提示项，用于 Prompts 列表。如果不传此参数，则使用 index 作为 key
     */
    id?: string;
    /**
     * 提示描述，提供额外的信息
     */
    description?: string;
    /**
     * 提示图标，显示在提示项的左侧
     */
    icon?: VNode;
    /**
     * 是否禁用。默认 false
     */
    disabled?: boolean;
    /**
     * 提示徽章，显示在提示项的右上角
     */
    badge?: string | VNode;
}

declare const Prompts: typeof _default_26 & {
    install: typeof installPrompts;
};
export { Prompts }
export { Prompts as TrPrompts }

export declare interface PromptsEvents {
    (e: 'item-click', ev: MouseEvent, item: PromptProps): void;
}

export declare interface PromptsProps {
    /**
     * 包含多个提示项的列表
     */
    items: PromptProps[];
    /**
     * 自定义样式，用于各个提示项的不同部分
     */
    itemStyle?: string | CSSProperties;
    /**
     *  自定义类名，用于各个提示项的不同部分
     */
    itemClass?: string | string[];
    /**
     * 提示列表是否垂直排列。默认 false
     */
    vertical?: boolean;
    /**
     * 提示列表是否折行。默认 false
     */
    wrap?: boolean;
}

export declare interface PromptsSlots {
    footer?: () => unknown;
}

export declare interface RawFileAttachment extends BaseAttachment {
    rawFile: File;
    url?: string;
    size?: number;
}

/**
 * 文件拒绝原因
 */
export declare interface RejectionReason {
    code: DragZoneErrorCode;
    message: string;
}

export declare type SenderEmits = {
    (e: 'update:modelValue', value: string): void;
    (e: 'update:templateData', value: UserItem[]): void;
    (e: 'submit', value: string): void;
    (e: 'clear'): void;
    (e: 'speech-start'): void;
    (e: 'speech-end', transcript?: string): void;
    (e: 'speech-interim', transcript: string): void;
    (e: 'speech-error', error: Error): void;
    (e: 'suggestion-select', value: string): void;
    (e: 'focus', event: FocusEvent): void;
    (e: 'blur', event: FocusEvent): void;
    (e: 'escape-press'): void;
    (e: 'cancel'): void;
    (e: 'reset-template'): void;
    (e: 'files-selected', files: File[]): void;
};

export declare interface SenderProps {
    autofocus?: boolean;
    autoSize?: AutoSize;
    allowSpeech?: boolean;
    allowFiles?: boolean;
    clearable?: boolean;
    disabled?: boolean;
    defaultValue?: string | null;
    loading?: boolean;
    modelValue?: string;
    mode?: InputMode;
    maxLength?: number;
    buttonGroup?: ButtonGroupConfig;
    submitType?: SubmitTrigger;
    speech?: boolean | SpeechConfig;
    placeholder?: string;
    showWordLimit?: boolean;
    suggestions?: string[];
    suggestionPopupWidth?: string | number;
    theme?: ThemeType;
    templateData?: UserItem[];
    stopText?: string;
}

export declare type SingleTabHistoryProps = {
    tabTitle: string;
    data: HistoryData;
} & BaseHistoryProps;

export declare interface SpeechConfig {
    lang?: string;
    continuous?: boolean;
    interimResults?: boolean;
    autoReplace?: boolean;
}

export declare interface SpeechHandler {
    speechState: SpeechState;
    start: () => void;
    stop: () => void;
}

export declare interface SpeechHookOptions extends SpeechConfig {
    onStart?: () => void;
    onEnd?: (transcript?: string) => void;
    onInterim?: (transcript: string) => void;
    onFinal?: (transcript: string) => void;
    onError?: (error: Error) => void;
}

export declare interface SpeechState {
    isRecording: boolean;
    isSupported: boolean;
    error?: Error;
}

export declare type SubmitTrigger = 'enter' | 'ctrlEnter' | 'shiftEnter';

export declare interface SuggestionBaseItem {
    id: string;
    text: string;
}

export declare type SuggestionData<T = Record<string, unknown>> = (SuggestionItem<T> | SuggestionGroup<T>)[];

export declare interface SuggestionGroup<T = Record<string, unknown>> {
    group: string;
    label: string;
    icon?: VNode | Component;
    items: SuggestionItem<T>[];
}

export declare type SuggestionItem<T = Record<string, unknown>> = SuggestionBaseItem & T;

declare const SuggestionPillButton: typeof _default_28 & {
    install: typeof installPillButton;
};
export { SuggestionPillButton }
export { SuggestionPillButton as TrSuggestionPillButton }

export declare interface SuggestionPillButtonProps {
    item?: SuggestionPillItem;
}

export declare interface SuggestionPillButtonSlots {
    default?: () => unknown;
    icon?: () => unknown;
}

export declare type SuggestionPillItem = {
    text: string;
    icon?: VNode | Component;
} | {
    text?: string;
    icon: VNode | Component;
};

export declare interface SuggestionPillsEmits {
    (e: 'click-outside', event: MouseEvent): void;
}

export declare interface SuggestionPillsProps {
    /**
     * model:showAll
     */
    showAll?: boolean;
    /**
     * 显示更多按钮的时机
     * - hover: 鼠标悬停时显示
     * - always: 总是显示
     * @default 'hover'
     */
    showAllButtonOn?: 'hover' | 'always';
    /**
     * 控制多余按钮如何展示
     * - expand: 点击更多按钮展开所有项
     * - scroll: 横向滚动显示多余项
     * @default 'expand'
     */
    overflowMode?: 'expand' | 'scroll';
    /**
     * 鼠标悬停时是否自动滚动到可见区域
     */
    autoScrollOn?: 'mouseenter' | 'click';
}

export declare interface SuggestionPillsSlots {
    default?: () => VNode[];
}

export declare interface SuggestionPopoverEmits {
    (e: 'item-click', item: SuggestionItem): void;
    (e: 'group-click', group: SuggestionGroup): void;
    (e: 'open'): void;
    (e: 'close'): void;
    (e: 'click-outside', event: MouseEvent): void;
}

export declare interface SuggestionPopoverEventProps {
    onItemClick?: (item: SuggestionItem) => void;
    onGroupClick?: (group: SuggestionGroup) => void;
    onOpen?: () => void;
    onClose?: () => void;
    onClickOutside?: (event: MouseEvent) => void;
}

export declare interface SuggestionPopoverEvents {
    /**
     * @deprecated use onItemClick in props instead
     */
    itemClick?: (item: SuggestionItem) => void;
    /**
     * @deprecated use onGroupClick in props instead
     */
    groupClick?: (group: SuggestionGroup) => void;
    /**
     * @deprecated use onOpen in props instead
     */
    open?: () => void;
    /**
     * @deprecated use onClose in props instead
     */
    close?: () => void;
    /**
     * @deprecated use onClickOutside in props instead
     */
    clickOutside?: (event: MouseEvent) => void;
}

export declare interface SuggestionPopoverProps<T = Record<string, unknown>> {
    appendTo?: string | HTMLElement;
    data: SuggestionData<T>;
    title?: string;
    icon?: VNode | Component;
    /**
     * 是否显示弹窗，仅在 trigger 为 'manual' 时有效
     */
    show?: boolean;
    /**
     * 触发方式。默认值为 'click'
     */
    trigger?: 'click' | 'manual';
    /**
     * model:selectedGroup
     */
    selectedGroup?: string;
    groupShowMoreTrigger?: 'click' | 'hover';
    loading?: boolean;
    topOffset?: number;
}

export declare interface SuggestionPopoverSlots {
    trigger?: () => VNode | VNode[];
    item?: ({ item }: {
        item: SuggestionItem;
    }) => VNode | VNode[];
    loading?: () => VNode | VNode[];
    empty?: () => VNode | VNode[];
    header?: () => VNode | VNode[];
    body?: () => VNode | VNode[];
}

export declare interface SuggestionTextPart {
    text: string;
    isMatch: boolean;
}

declare interface TemplateItem extends BaseTextItem {
    type: 'template';
    prefix: string;
    suffix: string;
}

declare interface TextItem extends BaseTextItem {
    type: 'text';
}

/**
 * 组件核心类型定义
 */
export declare type ThemeType = 'light' | 'dark';

export declare type TooltipRender = () => VNode | string;

export declare interface UrlAttachment extends BaseAttachment {
    url: string;
    size: number;
    rawFile?: File;
}

export declare type UserItem = UserTextItem | UserTemplateItem;

export declare type UserTemplateItem = Pick<TemplateItem, 'type' | 'content'>;

export declare type UserTextItem = Omit<TextItem, 'id'>;

/**
 * 拖拽区域指令
 * @param el 元素
 * @param binding 绑定
 */
export declare const vDropzone: Directive<DragAwareElement, DropzoneBinding>;

export declare interface WelcomeProps {
    title: string;
    description: string;
    align?: 'left' | 'center' | 'right' | string;
    icon?: VNode;
}

export declare interface WelcomeSlots {
    footer: () => unknown;
}

export { }
