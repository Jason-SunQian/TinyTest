import { callEntry as M, getMetaApi as T, META_SERVICE as h, useCanvas as O, useLayout as f, useBlock as b, useNotify as r } from "@opentiny/tiny-engine-meta-register";
import { reactive as A, computed as N, resolveComponent as E, createBlock as P, createCommentVNode as $, openBlock as v } from "vue";
import { constants as S } from "@opentiny/tiny-engine-utils";
import { ToolbarBase as _ } from "@opentiny/tiny-engine-common";
const L = {
  id: "engine.toolbars.lock",
  title: "lock",
  type: "toolbars",
  options: {
    icon: {
      locked: "locked",
      userLocked: "user-locked",
      unlocked: "unlocked"
    },
    renderType: "icon"
  }
}, d = M((e) => T(h.Http).get(`app-center/api/apps/canvas/lock?${e}`), {
  metaData: {
    id: "engine.toolbars.lock.http.requestBlockPage"
  },
  ctx: () => ({
    getMetaApi: T,
    META_SERVICE: h,
    requestBlockPage: d
  })
}), {
  COMPONENT_NAME: x,
  PAGE_STATUS: t
} = S, u = {
  block: "区块",
  page: "页面"
}, p = {
  [t.Release]: {
    message: (e) => `${u[e]}解锁成功！`,
    currentOptName: "解锁",
    nextOptName: "锁定"
  },
  [t.Lock]: {
    message: (e) => `${u[e]}解锁成功！`,
    currentOptName: "解锁",
    nextOptName: "解锁"
  },
  [t.Occupy]: {
    message: (e) => `${u[e]}锁定成功`,
    currentOptName: "锁定",
    nextOptName: "解锁"
  }
}, D = {
  components: {
    ToolbarBase: _
  },
  props: {
    options: {
      type: Object,
      default: () => ({})
    }
  },
  setup(e) {
    const {
      pageState: a
    } = O(), {
      layoutState: s
    } = f(), {
      getCurrentBlock: c
    } = b(), o = A({
      status: N(() => s.pageStatus.state),
      isGuest: N(() => s.pageStatus.state === t.Guest),
      type: "",
      disabled: !1
    }), m = N(() => {
      switch (o.status) {
        case t.Occupy:
          return e.options.icon.locked;
        case t.Lock:
          return e.options.icon.userLocked;
        default:
          return e.options.icon.unlocked;
      }
    }), l = M((k, B, g) => {
      d(`id=${k}&state=${g}&type=${B}`).then((n) => {
        var C;
        if ((n == null ? void 0 : n.operate) === "success")
          r({
            type: "success",
            message: p[g].message(B)
          }), s.pageStatus.state = g;
        else {
          const y = (C = s.pageStatus) == null ? void 0 : C.data;
          r({
            type: "warning",
            message: `当前页面被 ${(y == null ? void 0 : y.username) || ""} 锁定，请联系解锁`
          });
        }
      }).catch((n) => {
        r({
          type: "error",
          title: `页面${p[g].currentOptName}失败`,
          message: JSON.stringify((n == null ? void 0 : n.message) || n)
        });
      }).finally(() => {
        o.disabled = !1;
      });
    }, {
      metaData: {
        id: "engine.toolbars.lock.Main.lockPage"
      },
      ctx: () => ({
        props: e,
        pageState: a,
        layoutState: s,
        getCurrentBlock: c,
        state: o,
        iconName: m,
        lockPage: l,
        lockOrUnlock: i,
        useCanvas: O,
        useLayout: f,
        useBlock: b,
        useNotify: r,
        constants: S,
        ToolbarBase: _,
        requestBlockPage: d,
        COMPONENT_NAME: x,
        PAGE_STATUS: t,
        componentType: u,
        statusMessageMap: p
      })
    }), i = M(() => {
      if (o.disabled)
        return;
      const k = o.status === t.Occupy || o.status === t.Lock ? t.Release : t.Occupy;
      a.currentSchema = {}, a.properties = null, o.disabled = !0, a.pageSchema.componentName !== x.Block ? l(a.currentPage.id, "page", k) : l(c().id, "block", k);
    }, {
      metaData: {
        id: "engine.toolbars.lock.Main.lockOrUnlock"
      },
      ctx: () => ({
        props: e,
        pageState: a,
        layoutState: s,
        getCurrentBlock: c,
        state: o,
        iconName: m,
        lockPage: l,
        lockOrUnlock: i,
        useCanvas: O,
        useLayout: f,
        useBlock: b,
        useNotify: r,
        constants: S,
        ToolbarBase: _,
        requestBlockPage: d,
        COMPONENT_NAME: x,
        PAGE_STATUS: t,
        componentType: u,
        statusMessageMap: p
      })
    });
    return {
      state: o,
      lockOrUnlock: i,
      PAGE_STATUS: t,
      statusMessageMap: p,
      iconName: m
    };
  }
}, G = (e, a) => {
  const s = e.__vccOpts || e;
  for (const [c, o] of a)
    s[c] = o;
  return s;
};
function U(e, a, s, c, o, m) {
  var i;
  const l = E("toolbar-base");
  return c.state.isGuest ? $("", !0) : (v(), P(l, {
    key: 0,
    icon: c.iconName,
    content: (i = c.statusMessageMap[c.state.status]) == null ? void 0 : i.nextOptName,
    options: s.options,
    onClickApi: c.lockOrUnlock
  }, null, 8, ["icon", "content", "options", "onClickApi"]));
}
const R = /* @__PURE__ */ G(D, [["render", U]]), J = {
  ...L,
  entry: R
};
export {
  J as default
};
//# sourceMappingURL=index.js.map
