import "./style.css";
import { callEntry as g, getMetaApi as p, META_SERVICE as P, usePage as A, useBlock as Ya, useModal as x, useNotify as f, useMessage as se, getMergeMeta as he, useCanvas as I, useLayout as H, useCompile as Wa, getOptions as Y, useHelp as Ra, useBreadcrumb as Te, HOOK_NAME as _t } from "@opentiny/tiny-engine-meta-register";
import { ref as Sa, watchEffect as st, resolveComponent as ce, createBlock as ma, openBlock as ue, computed as Ma, createElementBlock as fa, createVNode as ee, createElementVNode as ea, withCtx as de, onActivated as ht, reactive as Ga, onDeactivated as St, createCommentVNode as ya, resolveDynamicComponent as pt, createTextVNode as at, defineComponent as Pt, Fragment as za, renderList as tt, watch as ct, unref as Da, normalizeClass as nt, withDirectives as vt, renderSlot as Ct, toDisplayString as Xa, vShow as Nt, onMounted as xt, onUnmounted as ut, provide as dt } from "vue";
import { BlockHistoryList as Za, MetaCodeEditor as $a, LifeCycles as ra, SvgButton as W, ButtonGroup as Se, PluginSetting as ve, PluginPanel as Ba } from "@opentiny/tiny-engine-common";
import { isEqual as O, extend as j } from "@opentiny/vue-renderless/common/object";
import { Checkbox as bt, CollapseItem as ot, Collapse as rt, Button as mt, Input as ft, Popover as wt, Search as Et, Radio as Tt, Select as It, FormItem as Ot, Form as Mt } from "@opentiny/vue";
import { constants as R } from "@opentiny/tiny-engine-utils";
import { isVsCodeEnv as la } from "@opentiny/tiny-engine-common/js/environments";
import { handlePageUpdate as le } from "@opentiny/tiny-engine-common/js/http";
import { generatePage as ga } from "@opentiny/tiny-engine-common/js/vscodeGenerateFile";
import { previewPage as et } from "@opentiny/tiny-engine-common/js/preview";
import Aa from "@opentiny/vue-renderless/common/deps/throttle";
import { IconSearch as ta, IconFolderClosed as na, IconFolderOpened as sa, iconFile as Ha } from "@opentiny/vue-icon";
import { getCanvasStatus as Z } from "@opentiny/tiny-engine-common/js/canvas";
import { REGEXP_ROUTE as Va, REGEXP_FOLDER_NAME as La, REGEXP_PAGE_NAME as qa } from "@opentiny/tiny-engine-common/js/verification";
const Q = {
  id: "engine.plugins.appmanage",
  title: "页面",
  type: "plugins",
  icon: "plugin-icon-page"
}, Na = g((a) => p(P.Http).get(`/app-center/api/pages/list/${a}`), {
  metaData: {
    id: "engine.plugins.appmanage.http.fetchPageList"
  },
  ctx: () => ({
    getMetaApi: p,
    META_SERVICE: P,
    fetchPageList: Na,
    fetchPageDetail: pa,
    requestDeletePage: xa,
    requestCreatePage: ba,
    handleRouteHomeUpdate: Pa,
    requestCopyPage: wa,
    fetchPageHistory: va,
    requestRestorePageHistory: Ea,
    fetchHistoryDetail: Ta,
    requestUpdatePage: Ia
  })
}), pa = g((a) => p(P.Http).get(`/app-center/api/pages/detail/${a}`), {
  metaData: {
    id: "engine.plugins.appmanage.http.fetchPageDetail"
  },
  ctx: () => ({
    getMetaApi: p,
    META_SERVICE: P,
    fetchPageList: Na,
    fetchPageDetail: pa,
    requestDeletePage: xa,
    requestCreatePage: ba,
    handleRouteHomeUpdate: Pa,
    requestCopyPage: wa,
    fetchPageHistory: va,
    requestRestorePageHistory: Ea,
    fetchHistoryDetail: Ta,
    requestUpdatePage: Ia
  })
}), xa = g((a) => p(P.Http).get(`/app-center/api/pages/delete/${a}`), {
  metaData: {
    id: "engine.plugins.appmanage.http.requestDeletePage"
  },
  ctx: () => ({
    getMetaApi: p,
    META_SERVICE: P,
    fetchPageList: Na,
    fetchPageDetail: pa,
    requestDeletePage: xa,
    requestCreatePage: ba,
    handleRouteHomeUpdate: Pa,
    requestCopyPage: wa,
    fetchPageHistory: va,
    requestRestorePageHistory: Ea,
    fetchHistoryDetail: Ta,
    requestUpdatePage: Ia
  })
}), ba = g((a) => p(P.Http).post("/app-center/api/pages/create", a), {
  metaData: {
    id: "engine.plugins.appmanage.http.requestCreatePage"
  },
  ctx: () => ({
    getMetaApi: p,
    META_SERVICE: P,
    fetchPageList: Na,
    fetchPageDetail: pa,
    requestDeletePage: xa,
    requestCreatePage: ba,
    handleRouteHomeUpdate: Pa,
    requestCopyPage: wa,
    fetchPageHistory: va,
    requestRestorePageHistory: Ea,
    fetchHistoryDetail: Ta,
    requestUpdatePage: Ia
  })
}), Pa = g((a, t) => p(P.Http).post(`/app-center/api/pages/update/${a}`, t), {
  metaData: {
    id: "engine.plugins.appmanage.http.handleRouteHomeUpdate"
  },
  ctx: () => ({
    getMetaApi: p,
    META_SERVICE: P,
    fetchPageList: Na,
    fetchPageDetail: pa,
    requestDeletePage: xa,
    requestCreatePage: ba,
    handleRouteHomeUpdate: Pa,
    requestCopyPage: wa,
    fetchPageHistory: va,
    requestRestorePageHistory: Ea,
    fetchHistoryDetail: Ta,
    requestUpdatePage: Ia
  })
}), wa = g((a) => p(P.Http).post("/app-center/api/pages/copy", a), {
  metaData: {
    id: "engine.plugins.appmanage.http.requestCopyPage"
  },
  ctx: () => ({
    getMetaApi: p,
    META_SERVICE: P,
    fetchPageList: Na,
    fetchPageDetail: pa,
    requestDeletePage: xa,
    requestCreatePage: ba,
    handleRouteHomeUpdate: Pa,
    requestCopyPage: wa,
    fetchPageHistory: va,
    requestRestorePageHistory: Ea,
    fetchHistoryDetail: Ta,
    requestUpdatePage: Ia
  })
}), va = g((a) => p(P.Http).get(`/app-center/api/pages/histories?page=${a}`), {
  metaData: {
    id: "engine.plugins.appmanage.http.fetchPageHistory"
  },
  ctx: () => ({
    getMetaApi: p,
    META_SERVICE: P,
    fetchPageList: Na,
    fetchPageDetail: pa,
    requestDeletePage: xa,
    requestCreatePage: ba,
    handleRouteHomeUpdate: Pa,
    requestCopyPage: wa,
    fetchPageHistory: va,
    requestRestorePageHistory: Ea,
    fetchHistoryDetail: Ta,
    requestUpdatePage: Ia
  })
}), Ea = g((a) => p(P.Http).post("/app-center/api/pageHistory/restore", a), {
  metaData: {
    id: "engine.plugins.appmanage.http.requestRestorePageHistory"
  },
  ctx: () => ({
    getMetaApi: p,
    META_SERVICE: P,
    fetchPageList: Na,
    fetchPageDetail: pa,
    requestDeletePage: xa,
    requestCreatePage: ba,
    handleRouteHomeUpdate: Pa,
    requestCopyPage: wa,
    fetchPageHistory: va,
    requestRestorePageHistory: Ea,
    fetchHistoryDetail: Ta,
    requestUpdatePage: Ia
  })
}), Ta = g((a) => p(P.Http).get(`/app-center/api/pages/histories/${a}`), {
  metaData: {
    id: "engine.plugins.appmanage.http.fetchHistoryDetail"
  },
  ctx: () => ({
    getMetaApi: p,
    META_SERVICE: P,
    fetchPageList: Na,
    fetchPageDetail: pa,
    requestDeletePage: xa,
    requestCreatePage: ba,
    handleRouteHomeUpdate: Pa,
    requestCopyPage: wa,
    fetchPageHistory: va,
    requestRestorePageHistory: Ea,
    fetchHistoryDetail: Ta,
    requestUpdatePage: Ia
  })
}), Ia = g((a, t) => p(P.Http).post(`/app-center/api/pages/update/${a}`, t), {
  metaData: {
    id: "engine.plugins.appmanage.http.requestUpdatePage"
  },
  ctx: () => ({
    getMetaApi: p,
    META_SERVICE: P,
    fetchPageList: Na,
    fetchPageDetail: pa,
    requestDeletePage: xa,
    requestCreatePage: ba,
    handleRouteHomeUpdate: Pa,
    requestCopyPage: wa,
    fetchPageHistory: va,
    requestRestorePageHistory: Ea,
    fetchHistoryDetail: Ta,
    requestUpdatePage: Ia
  })
}), M = {
  fetchPageList: Na,
  fetchPageDetail: pa,
  requestDeletePage: xa,
  requestCreatePage: ba,
  requestCopyPage: wa,
  fetchPageHistory: va,
  fetchHistoryDetail: Ta,
  handleRouteHomeUpdate: Pa,
  requestRestorePageHistory: Ea,
  requestUpdatePage: Ia
}, Ft = {
  components: {
    BlockHistoryList: Za
  },
  props: {
    curPageData: {
      type: Object,
      default: () => ({})
    }
  },
  emits: ["restorePage"],
  setup(a, {
    emit: t
  }) {
    const {
      pageSettingState: n,
      getFamily: e
    } = A(), {
      getDateFromNow: s
    } = Ya(), {
      confirm: i
    } = x(), o = Sa([]), r = g((d) => {
      const {
        id: D,
        version: c
      } = p(P.GlobalService).getBaseInfo(), y = c ? `&app=${D}&version=${c}` : "";
      d ? va(d + y).then((h) => {
        h && (h.forEach((_) => {
          _.backupTitle = _.message, _.backupTime = s(new Date(_.time));
        }), o.value = h.reverse());
      }) : o.value = [];
    }, {
      metaData: {
        id: "engine.plugins.appmanage.PageHistory.getHistoryList"
      },
      ctx: () => ({
        props: a,
        emit: t,
        pageSettingState: n,
        getFamily: e,
        getDateFromNow: s,
        confirm: i,
        list: o,
        getHistoryList: r,
        previewHistory: l,
        restoreHistory: m,
        BlockHistoryList: Za,
        previewPage: et,
        usePage: A,
        useBlock: Ya,
        useModal: x,
        getMetaApi: p,
        META_SERVICE: P,
        fetchPageHistory: va
      })
    });
    st(() => {
      var D;
      const d = ((D = n.currentPageData) == null ? void 0 : D.id) || "";
      r(d);
    });
    const l = g(async (d) => {
      if (d) {
        const D = {
          ...d,
          id: Number(d.page),
          history: d.id
        };
        D.ancestors = await e(D), et(D, !0);
      }
    }, {
      metaData: {
        id: "engine.plugins.appmanage.PageHistory.previewHistory"
      },
      ctx: () => ({
        props: a,
        emit: t,
        pageSettingState: n,
        getFamily: e,
        getDateFromNow: s,
        confirm: i,
        list: o,
        getHistoryList: r,
        previewHistory: l,
        restoreHistory: m,
        BlockHistoryList: Za,
        previewPage: et,
        usePage: A,
        useBlock: Ya,
        useModal: x,
        getMetaApi: p,
        META_SERVICE: P,
        fetchPageHistory: va
      })
    }), m = g((d) => {
      i({
        title: "提示",
        message: "您即将还原历史页面，是否继续还原？",
        exec: () => {
          t("restorePage", d);
        }
      });
    }, {
      metaData: {
        id: "engine.plugins.appmanage.PageHistory.restoreHistory"
      },
      ctx: () => ({
        props: a,
        emit: t,
        pageSettingState: n,
        getFamily: e,
        getDateFromNow: s,
        confirm: i,
        list: o,
        getHistoryList: r,
        previewHistory: l,
        restoreHistory: m,
        BlockHistoryList: Za,
        previewPage: et,
        usePage: A,
        useBlock: Ya,
        useModal: x,
        getMetaApi: p,
        META_SERVICE: P,
        fetchPageHistory: va
      })
    });
    return {
      list: o,
      previewHistory: l,
      restoreHistory: m
    };
  }
}, Fa = (a, t) => {
  const n = a.__vccOpts || a;
  for (const [e, s] of t)
    n[e] = s;
  return n;
};
function kt(a, t, n, e, s, i) {
  const o = ce("block-history-list");
  return ue(), ma(o, {
    history: e.list,
    onPreview: e.previewHistory,
    onRestore: e.restoreHistory
  }, null, 8, ["history", "onPreview", "onRestore"]);
}
const ca = /* @__PURE__ */ Fa(Ft, [["render", kt]]), Vt = {
  components: {
    MetaCodeEditor: $a,
    TinyCheckbox: bt
  },
  setup() {
    const a = Sa(""), t = Sa(""), {
      pageSettingState: n
    } = A(), e = Ma(() => n.currentPageData);
    st(() => {
      var r, l;
      a.value = ((r = n.currentPageData.page_content) == null ? void 0 : r.inputs) || "", t.value = ((l = n.currentPageData.page_content) == null ? void 0 : l.outputs) || "";
    });
    const s = g((r) => {
      try {
        const l = JSON.parse(r.content);
        a.value = r.content, e.value.page_content.inputs = l;
      } catch (l) {
        f({
          title: "输入配置保存失败（必须符合JSON格式）",
          message: `${(l == null ? void 0 : l.message) || l}`,
          type: "error"
        });
      }
    }, {
      metaData: {
        id: "engine.plugins.appmanage.PageInputOutput.saveInputValue"
      },
      ctx: () => ({
        inputValue: a,
        outputValue: t,
        pageSettingState: n,
        currentPageData: e,
        saveInputValue: s,
        saveOutputValue: i,
        hasContent: o,
        MetaCodeEditor: $a,
        usePage: A,
        useNotify: f
      })
    }), i = g((r) => {
      try {
        const l = JSON.parse(r.content);
        t.value = r.content, e.value.page_content.outputs = l;
      } catch (l) {
        f({
          title: "输出配置保存失败（必须符合JSON格式）",
          message: `${(l == null ? void 0 : l.message) || l}`,
          type: "error"
        });
      }
    }, {
      metaData: {
        id: "engine.plugins.appmanage.PageInputOutput.saveOutputValue"
      },
      ctx: () => ({
        inputValue: a,
        outputValue: t,
        pageSettingState: n,
        currentPageData: e,
        saveInputValue: s,
        saveOutputValue: i,
        hasContent: o,
        MetaCodeEditor: $a,
        usePage: A,
        useNotify: f
      })
    }), o = g((r) => Array.isArray(r) && r.length > 0 || typeof r == "object" && Object.keys(r).length > 0, {
      metaData: {
        id: "engine.plugins.appmanage.PageInputOutput.hasContent"
      },
      ctx: () => ({
        inputValue: a,
        outputValue: t,
        pageSettingState: n,
        currentPageData: e,
        saveInputValue: s,
        saveOutputValue: i,
        hasContent: o,
        MetaCodeEditor: $a,
        usePage: A,
        useNotify: f
      })
    });
    return {
      inputValue: a,
      outputValue: t,
      saveInputValue: s,
      saveOutputValue: i,
      pageSettingState: n,
      hasContent: o
    };
  }
}, At = { class: "input-or-output" };
function Gt(a, t, n, e, s, i) {
  const o = ce("svg-icon"), r = ce("meta-code-editor"), l = ce("tiny-checkbox");
  return ue(), fa("div", At, [
    ee(r, {
      modelValue: e.inputValue,
      title: "输入配置",
      "button-text": "输入配置",
      language: "json",
      buttonShowContent: e.hasContent(e.inputValue),
      single: "",
      onSave: e.saveInputValue
    }, {
      icon: de(() => [
        ee(o, {
          class: "edit-btn-icon",
          name: "to-edit"
        })
      ]),
      _: 1
    }, 8, ["modelValue", "buttonShowContent", "onSave"]),
    t[2] || (t[2] = ea("div", { class: "input-output-tips" }, "传递给页面的参数(类似组件的输入属性)", -1)),
    ee(r, {
      modelValue: e.outputValue,
      title: "输出配置",
      "button-text": "输出配置",
      language: "json",
      buttonShowContent: e.hasContent(e.outputValue),
      single: "",
      onSave: e.saveOutputValue
    }, {
      icon: de(() => [
        ee(o, {
          class: "edit-btn-icon",
          name: "to-edit"
        })
      ]),
      _: 1
    }, 8, ["modelValue", "buttonShowContent", "onSave"]),
    t[3] || (t[3] = ea("div", { class: "input-output-div" }, "页面传递出的事件(类似组件触发的输出事件)", -1)),
    ee(l, {
      class: "selectHome",
      modelValue: e.pageSettingState.currentPageData.isBody,
      "onUpdate:modelValue": t[0] || (t[0] = (m) => e.pageSettingState.currentPageData.isBody = m)
    }, {
      default: de(() => t[1] || (t[1] = [
        ea("span", null, "设为根元素为Body", -1)
      ])),
      _: 1,
      __: [1]
    }, 8, ["modelValue"]),
    t[4] || (t[4] = ea("div", { class: "input-output-div" }, "默认为div", -1))
  ]);
}
const ua = /* @__PURE__ */ Fa(Vt, [["render", Gt], ["__scopeId", "data-v-94581fb6"]]), {
  COMPONENT_NAME: da
} = R, $e = Sa(!1), De = g(() => {
  $e.value = !0;
}, {
  metaData: {
    id: "engine.plugins.appmanage.PageSetting.openPageSettingPanel"
  },
  ctx: () => ({
    PluginSetting: ve,
    ButtonGroup: Se,
    SvgButton: W,
    LifeCycles: ra,
    useLayout: H,
    usePage: A,
    useCanvas: I,
    useModal: x,
    useNotify: f,
    getMergeMeta: he,
    getMetaApi: p,
    META_SERVICE: P,
    useMessage: se,
    extend: j,
    isEqual: O,
    constants: R,
    isVsCodeEnv: la,
    handlePageUpdate: le,
    generatePage: ga,
    PageHistory: ca,
    PageInputOutput: ua,
    meta: Q,
    http: M,
    COMPONENT_NAME: da,
    isShow: $e,
    openPageSettingPanel: De,
    closePageSettingPanel: K,
    PAGE_SETTING_SESSION: aa
  })
}), K = g(() => {
  $e.value = !1;
  const {
    resetPageData: a
  } = A();
  a();
}, {
  metaData: {
    id: "engine.plugins.appmanage.PageSetting.closePageSettingPanel"
  },
  ctx: () => ({
    PluginSetting: ve,
    ButtonGroup: Se,
    SvgButton: W,
    LifeCycles: ra,
    useLayout: H,
    usePage: A,
    useCanvas: I,
    useModal: x,
    useNotify: f,
    getMergeMeta: he,
    getMetaApi: p,
    META_SERVICE: P,
    useMessage: se,
    extend: j,
    isEqual: O,
    constants: R,
    isVsCodeEnv: la,
    handlePageUpdate: le,
    generatePage: ga,
    PageHistory: ca,
    PageInputOutput: ua,
    meta: Q,
    http: M,
    COMPONENT_NAME: da,
    isShow: $e,
    openPageSettingPanel: De,
    closePageSettingPanel: K,
    PAGE_SETTING_SESSION: aa
  })
}), aa = {
  general: "general",
  inputOutput: "inputOutput",
  lifeCycles: "lifeCycles",
  history: "history"
}, Rt = {
  components: {
    TinyButton: mt,
    TinyCollapse: rt,
    TinyCollapseItem: ot,
    PageInputOutput: ua,
    LifeCycles: ra,
    PageHistory: ca,
    PluginSetting: ve,
    SvgButton: W,
    ButtonGroup: Se
  },
  props: {
    isFolder: {
      type: Boolean,
      default: !1
    }
  },
  emits: ["openNewPage"],
  setup(a, {
    emit: t
  }) {
    var Ze;
    const {
      requestCreatePage: n,
      requestDeletePage: e
    } = M, {
      getDefaultPage: s,
      pageSettingState: i,
      changeTreeData: o,
      isCurrentDataSame: r,
      initCurrentPageData: l,
      isTemporaryPage: m,
      STATIC_PAGE_GROUP_ID: d,
      updatePageSettingAfterSave: D
    } = A(), {
      pageState: c,
      initData: y
    } = I(), {
      confirm: h
    } = x(), _ = he(Q.id), C = _.components.PageGeneral, T = (Ze = _ == null ? void 0 : _.options) == null ? void 0 : Ze.beforeCreatePage, N = Sa(null), {
      PLUGIN_NAME: u,
      getPluginByLayout: E
    } = H(), b = Ma(() => E(u.AppManage)), {
      subscribe: F,
      unsubscribe: G
    } = se();
    let L = null;
    ht(g(g(() => {
      L = F({
        topic: "page-saved",
        callback: () => {
          D();
        }
      });
    }, {
      metaData: {
        id: "engine.plugins.appmanage.PageSetting.onActivated[0]"
      },
      ctx: () => ({
        props: a,
        emit: t,
        requestCreatePage: n,
        requestDeletePage: e,
        getDefaultPage: s,
        pageSettingState: i,
        changeTreeData: o,
        isCurrentDataSame: r,
        initCurrentPageData: l,
        isTemporaryPage: m,
        STATIC_PAGE_GROUP_ID: d,
        updatePageSettingAfterSave: D,
        pageState: c,
        initData: y,
        confirm: h,
        registry: _,
        pageGeneral: C,
        beforeCreatePage: T,
        pageGeneralRef: N,
        PLUGIN_NAME: u,
        getPluginByLayout: E,
        align: b,
        subscribe: F,
        unsubscribe: G,
        subscriber: L,
        state: B,
        cancelPageSetting: S,
        createPage: v,
        updatePage: V,
        restorePage: w,
        editPage: X,
        updatePageLifeCycles: q,
        copyPageData: te,
        copyPage: ae,
        settingDefaultPage: $,
        createHistoryMessage: ne,
        savePageSetting: oe,
        collectAllPage: re,
        deletePage: ge,
        PluginSetting: ve,
        ButtonGroup: Se,
        SvgButton: W,
        LifeCycles: ra,
        useLayout: H,
        usePage: A,
        useCanvas: I,
        useModal: x,
        useNotify: f,
        getMergeMeta: he,
        getMetaApi: p,
        META_SERVICE: P,
        useMessage: se,
        extend: j,
        isEqual: O,
        constants: R,
        isVsCodeEnv: la,
        handlePageUpdate: le,
        generatePage: ga,
        PageHistory: ca,
        PageInputOutput: ua,
        meta: Q,
        http: M,
        COMPONENT_NAME: da,
        isShow: $e,
        openPageSettingPanel: De,
        closePageSettingPanel: K,
        PAGE_SETTING_SESSION: aa
      })
    }), {
      metaData: {
        id: "engine.plugins.appmanage.PageSetting.onActivated[0]"
      },
      ctx: () => ({
        props: a,
        emit: t,
        requestCreatePage: n,
        requestDeletePage: e,
        getDefaultPage: s,
        pageSettingState: i,
        changeTreeData: o,
        isCurrentDataSame: r,
        initCurrentPageData: l,
        isTemporaryPage: m,
        STATIC_PAGE_GROUP_ID: d,
        updatePageSettingAfterSave: D,
        pageState: c,
        initData: y,
        confirm: h,
        registry: _,
        pageGeneral: C,
        beforeCreatePage: T,
        pageGeneralRef: N,
        PLUGIN_NAME: u,
        getPluginByLayout: E,
        align: b,
        subscribe: F,
        unsubscribe: G,
        subscriber: L,
        state: B,
        cancelPageSetting: S,
        createPage: v,
        updatePage: V,
        restorePage: w,
        editPage: X,
        updatePageLifeCycles: q,
        copyPageData: te,
        copyPage: ae,
        settingDefaultPage: $,
        createHistoryMessage: ne,
        savePageSetting: oe,
        collectAllPage: re,
        deletePage: ge,
        _callEntry: g,
        _useCompile: Wa,
        _metaData: Q,
        PluginSetting: ve,
        ButtonGroup: Se,
        SvgButton: W,
        LifeCycles: ra,
        useLayout: H,
        usePage: A,
        useCanvas: I,
        useModal: x,
        useNotify: f,
        getMergeMeta: he,
        getMetaApi: p,
        META_SERVICE: P,
        useMessage: se,
        extend: j,
        isEqual: O,
        constants: R,
        isVsCodeEnv: la,
        handlePageUpdate: le,
        generatePage: ga,
        PageHistory: ca,
        PageInputOutput: ua,
        meta: Q,
        http: M,
        COMPONENT_NAME: da,
        isShow: $e,
        openPageSettingPanel: De,
        closePageSettingPanel: K,
        PAGE_SETTING_SESSION: aa
      })
    })), St(g(g(() => {
      L && G(L);
    }, {
      metaData: {
        id: "engine.plugins.appmanage.PageSetting.onDeactivated[0]"
      },
      ctx: () => ({
        props: a,
        emit: t,
        requestCreatePage: n,
        requestDeletePage: e,
        getDefaultPage: s,
        pageSettingState: i,
        changeTreeData: o,
        isCurrentDataSame: r,
        initCurrentPageData: l,
        isTemporaryPage: m,
        STATIC_PAGE_GROUP_ID: d,
        updatePageSettingAfterSave: D,
        pageState: c,
        initData: y,
        confirm: h,
        registry: _,
        pageGeneral: C,
        beforeCreatePage: T,
        pageGeneralRef: N,
        PLUGIN_NAME: u,
        getPluginByLayout: E,
        align: b,
        subscribe: F,
        unsubscribe: G,
        subscriber: L,
        state: B,
        cancelPageSetting: S,
        createPage: v,
        updatePage: V,
        restorePage: w,
        editPage: X,
        updatePageLifeCycles: q,
        copyPageData: te,
        copyPage: ae,
        settingDefaultPage: $,
        createHistoryMessage: ne,
        savePageSetting: oe,
        collectAllPage: re,
        deletePage: ge,
        PluginSetting: ve,
        ButtonGroup: Se,
        SvgButton: W,
        LifeCycles: ra,
        useLayout: H,
        usePage: A,
        useCanvas: I,
        useModal: x,
        useNotify: f,
        getMergeMeta: he,
        getMetaApi: p,
        META_SERVICE: P,
        useMessage: se,
        extend: j,
        isEqual: O,
        constants: R,
        isVsCodeEnv: la,
        handlePageUpdate: le,
        generatePage: ga,
        PageHistory: ca,
        PageInputOutput: ua,
        meta: Q,
        http: M,
        COMPONENT_NAME: da,
        isShow: $e,
        openPageSettingPanel: De,
        closePageSettingPanel: K,
        PAGE_SETTING_SESSION: aa
      })
    }), {
      metaData: {
        id: "engine.plugins.appmanage.PageSetting.onDeactivated[0]"
      },
      ctx: () => ({
        props: a,
        emit: t,
        requestCreatePage: n,
        requestDeletePage: e,
        getDefaultPage: s,
        pageSettingState: i,
        changeTreeData: o,
        isCurrentDataSame: r,
        initCurrentPageData: l,
        isTemporaryPage: m,
        STATIC_PAGE_GROUP_ID: d,
        updatePageSettingAfterSave: D,
        pageState: c,
        initData: y,
        confirm: h,
        registry: _,
        pageGeneral: C,
        beforeCreatePage: T,
        pageGeneralRef: N,
        PLUGIN_NAME: u,
        getPluginByLayout: E,
        align: b,
        subscribe: F,
        unsubscribe: G,
        subscriber: L,
        state: B,
        cancelPageSetting: S,
        createPage: v,
        updatePage: V,
        restorePage: w,
        editPage: X,
        updatePageLifeCycles: q,
        copyPageData: te,
        copyPage: ae,
        settingDefaultPage: $,
        createHistoryMessage: ne,
        savePageSetting: oe,
        collectAllPage: re,
        deletePage: ge,
        _callEntry: g,
        _useCompile: Wa,
        _metaData: Q,
        PluginSetting: ve,
        ButtonGroup: Se,
        SvgButton: W,
        LifeCycles: ra,
        useLayout: H,
        usePage: A,
        useCanvas: I,
        useModal: x,
        useNotify: f,
        getMergeMeta: he,
        getMetaApi: p,
        META_SERVICE: P,
        useMessage: se,
        extend: j,
        isEqual: O,
        constants: R,
        isVsCodeEnv: la,
        handlePageUpdate: le,
        generatePage: ga,
        PageHistory: ca,
        PageInputOutput: ua,
        meta: Q,
        http: M,
        COMPONENT_NAME: da,
        isShow: $e,
        openPageSettingPanel: De,
        closePageSettingPanel: K,
        PAGE_SETTING_SESSION: aa
      })
    }));
    const B = Ga({
      activeName: Object.values(aa),
      title: "页面设置",
      historyMessage: ""
    }), S = g(() => {
      O(i.currentPageData, i.currentPageDataCopy) ? K() : h({
        title: "提示",
        message: "您即将使用未保存的更改关闭此页。是否要在关闭之前放弃这些更改？",
        exec: () => {
          i.isNew || (o(i.oldParentId, i.currentPageData.parentId), Object.assign(i.currentPageData, i.currentPageDataCopy)), K();
        }
      });
    }, {
      metaData: {
        id: "engine.plugins.appmanage.PageSetting.cancelPageSetting"
      },
      ctx: () => ({
        props: a,
        emit: t,
        requestCreatePage: n,
        requestDeletePage: e,
        getDefaultPage: s,
        pageSettingState: i,
        changeTreeData: o,
        isCurrentDataSame: r,
        initCurrentPageData: l,
        isTemporaryPage: m,
        STATIC_PAGE_GROUP_ID: d,
        updatePageSettingAfterSave: D,
        pageState: c,
        initData: y,
        confirm: h,
        registry: _,
        pageGeneral: C,
        beforeCreatePage: T,
        pageGeneralRef: N,
        PLUGIN_NAME: u,
        getPluginByLayout: E,
        align: b,
        subscribe: F,
        unsubscribe: G,
        subscriber: L,
        state: B,
        cancelPageSetting: S,
        createPage: v,
        updatePage: V,
        restorePage: w,
        editPage: X,
        updatePageLifeCycles: q,
        copyPageData: te,
        copyPage: ae,
        settingDefaultPage: $,
        createHistoryMessage: ne,
        savePageSetting: oe,
        collectAllPage: re,
        deletePage: ge,
        PluginSetting: ve,
        ButtonGroup: Se,
        SvgButton: W,
        LifeCycles: ra,
        useLayout: H,
        usePage: A,
        useCanvas: I,
        useModal: x,
        useNotify: f,
        getMergeMeta: he,
        getMetaApi: p,
        META_SERVICE: P,
        useMessage: se,
        extend: j,
        isEqual: O,
        constants: R,
        isVsCodeEnv: la,
        handlePageUpdate: le,
        generatePage: ga,
        PageHistory: ca,
        PageInputOutput: ua,
        meta: Q,
        http: M,
        COMPONENT_NAME: da,
        isShow: $e,
        openPageSettingPanel: De,
        closePageSettingPanel: K,
        PAGE_SETTING_SESSION: aa
      })
    }), v = g(async () => {
      const {
        page_content: k,
        ...J
      } = s(), {
        page_content: z,
        ...me
      } = i.currentPageData, fe = {
        ...J,
        ...me,
        page_content: {
          ...k,
          ...z,
          fileName: i.currentPageData.name
        },
        app: p(P.GlobalService).getBaseInfo().id,
        isPage: !0
      };
      fe.id && (delete fe.id, delete fe._id), T && await T(fe);
      try {
        const _a = await n(fe);
        await i.updateTreeData(), i.isNew = !1, m.saved = !1, t("openNewPage", _a), K(), H().closePlugin(), f({
          type: "success",
          message: "新建页面成功!"
        }), la && ga(_a);
      } catch (_a) {
        f({
          type: "error",
          title: "新建页面失败",
          message: JSON.stringify((_a == null ? void 0 : _a.message) || _a)
        });
      }
    }, {
      metaData: {
        id: "engine.plugins.appmanage.PageSetting.createPage"
      },
      ctx: () => ({
        props: a,
        emit: t,
        requestCreatePage: n,
        requestDeletePage: e,
        getDefaultPage: s,
        pageSettingState: i,
        changeTreeData: o,
        isCurrentDataSame: r,
        initCurrentPageData: l,
        isTemporaryPage: m,
        STATIC_PAGE_GROUP_ID: d,
        updatePageSettingAfterSave: D,
        pageState: c,
        initData: y,
        confirm: h,
        registry: _,
        pageGeneral: C,
        beforeCreatePage: T,
        pageGeneralRef: N,
        PLUGIN_NAME: u,
        getPluginByLayout: E,
        align: b,
        subscribe: F,
        unsubscribe: G,
        subscriber: L,
        state: B,
        cancelPageSetting: S,
        createPage: v,
        updatePage: V,
        restorePage: w,
        editPage: X,
        updatePageLifeCycles: q,
        copyPageData: te,
        copyPage: ae,
        settingDefaultPage: $,
        createHistoryMessage: ne,
        savePageSetting: oe,
        collectAllPage: re,
        deletePage: ge,
        PluginSetting: ve,
        ButtonGroup: Se,
        SvgButton: W,
        LifeCycles: ra,
        useLayout: H,
        usePage: A,
        useCanvas: I,
        useModal: x,
        useNotify: f,
        getMergeMeta: he,
        getMetaApi: p,
        META_SERVICE: P,
        useMessage: se,
        extend: j,
        isEqual: O,
        constants: R,
        isVsCodeEnv: la,
        handlePageUpdate: le,
        generatePage: ga,
        PageHistory: ca,
        PageInputOutput: ua,
        meta: Q,
        http: M,
        COMPONENT_NAME: da,
        isShow: $e,
        openPageSettingPanel: De,
        closePageSettingPanel: K,
        PAGE_SETTING_SESSION: aa
      })
    }), V = g((k, J, z = !0) => {
      var ka;
      const me = i.currentPageDataCopy.route !== i.currentPageData.route, fe = ((ka = c == null ? void 0 : c.currentPage) == null ? void 0 : ka.id) === k;
      return le({
        id: k,
        params: J,
        routerChange: me,
        isCurEditPage: fe,
        isUpdateTree: z
      });
    }, {
      metaData: {
        id: "engine.plugins.appmanage.PageSetting.updatePage"
      },
      ctx: () => ({
        props: a,
        emit: t,
        requestCreatePage: n,
        requestDeletePage: e,
        getDefaultPage: s,
        pageSettingState: i,
        changeTreeData: o,
        isCurrentDataSame: r,
        initCurrentPageData: l,
        isTemporaryPage: m,
        STATIC_PAGE_GROUP_ID: d,
        updatePageSettingAfterSave: D,
        pageState: c,
        initData: y,
        confirm: h,
        registry: _,
        pageGeneral: C,
        beforeCreatePage: T,
        pageGeneralRef: N,
        PLUGIN_NAME: u,
        getPluginByLayout: E,
        align: b,
        subscribe: F,
        unsubscribe: G,
        subscriber: L,
        state: B,
        cancelPageSetting: S,
        createPage: v,
        updatePage: V,
        restorePage: w,
        editPage: X,
        updatePageLifeCycles: q,
        copyPageData: te,
        copyPage: ae,
        settingDefaultPage: $,
        createHistoryMessage: ne,
        savePageSetting: oe,
        collectAllPage: re,
        deletePage: ge,
        PluginSetting: ve,
        ButtonGroup: Se,
        SvgButton: W,
        LifeCycles: ra,
        useLayout: H,
        usePage: A,
        useCanvas: I,
        useModal: x,
        useNotify: f,
        getMergeMeta: he,
        getMetaApi: p,
        META_SERVICE: P,
        useMessage: se,
        extend: j,
        isEqual: O,
        constants: R,
        isVsCodeEnv: la,
        handlePageUpdate: le,
        generatePage: ga,
        PageHistory: ca,
        PageInputOutput: ua,
        meta: Q,
        http: M,
        COMPONENT_NAME: da,
        isShow: $e,
        openPageSettingPanel: De,
        closePageSettingPanel: K,
        PAGE_SETTING_SESSION: aa
      })
    }), w = g((k) => {
      const J = {
        ...k,
        id: k.page
      };
      ["page", "backupTime", "backupTitle", "time"].forEach((fe) => delete J[fe]);
      const me = {
        ...i.currentPageData,
        ...J,
        message: "还原页面"
      };
      V(J.id, me).then((fe) => {
        var _a;
        ((_a = c == null ? void 0 : c.currentPage) == null ? void 0 : _a.id) === (fe == null ? void 0 : fe.id) && y(fe.page_content, fe), l(fe);
      });
    }, {
      metaData: {
        id: "engine.plugins.appmanage.PageSetting.restorePage"
      },
      ctx: () => ({
        props: a,
        emit: t,
        requestCreatePage: n,
        requestDeletePage: e,
        getDefaultPage: s,
        pageSettingState: i,
        changeTreeData: o,
        isCurrentDataSame: r,
        initCurrentPageData: l,
        isTemporaryPage: m,
        STATIC_PAGE_GROUP_ID: d,
        updatePageSettingAfterSave: D,
        pageState: c,
        initData: y,
        confirm: h,
        registry: _,
        pageGeneral: C,
        beforeCreatePage: T,
        pageGeneralRef: N,
        PLUGIN_NAME: u,
        getPluginByLayout: E,
        align: b,
        subscribe: F,
        unsubscribe: G,
        subscriber: L,
        state: B,
        cancelPageSetting: S,
        createPage: v,
        updatePage: V,
        restorePage: w,
        editPage: X,
        updatePageLifeCycles: q,
        copyPageData: te,
        copyPage: ae,
        settingDefaultPage: $,
        createHistoryMessage: ne,
        savePageSetting: oe,
        collectAllPage: re,
        deletePage: ge,
        PluginSetting: ve,
        ButtonGroup: Se,
        SvgButton: W,
        LifeCycles: ra,
        useLayout: H,
        usePage: A,
        useCanvas: I,
        useModal: x,
        useNotify: f,
        getMergeMeta: he,
        getMetaApi: p,
        META_SERVICE: P,
        useMessage: se,
        extend: j,
        isEqual: O,
        constants: R,
        isVsCodeEnv: la,
        handlePageUpdate: le,
        generatePage: ga,
        PageHistory: ca,
        PageInputOutput: ua,
        meta: Q,
        http: M,
        COMPONENT_NAME: da,
        isShow: $e,
        openPageSettingPanel: De,
        closePageSettingPanel: K,
        PAGE_SETTING_SESSION: aa
      })
    }), X = g(async () => {
      const {
        id: k,
        name: J,
        page_content: z
      } = i.currentPageData, me = {
        ...i.currentPageData,
        page_content: {
          ...z,
          fileName: J
        }
      }, fe = await V(k, me);
      l(fe);
    }, {
      metaData: {
        id: "engine.plugins.appmanage.PageSetting.editPage"
      },
      ctx: () => ({
        props: a,
        emit: t,
        requestCreatePage: n,
        requestDeletePage: e,
        getDefaultPage: s,
        pageSettingState: i,
        changeTreeData: o,
        isCurrentDataSame: r,
        initCurrentPageData: l,
        isTemporaryPage: m,
        STATIC_PAGE_GROUP_ID: d,
        updatePageSettingAfterSave: D,
        pageState: c,
        initData: y,
        confirm: h,
        registry: _,
        pageGeneral: C,
        beforeCreatePage: T,
        pageGeneralRef: N,
        PLUGIN_NAME: u,
        getPluginByLayout: E,
        align: b,
        subscribe: F,
        unsubscribe: G,
        subscriber: L,
        state: B,
        cancelPageSetting: S,
        createPage: v,
        updatePage: V,
        restorePage: w,
        editPage: X,
        updatePageLifeCycles: q,
        copyPageData: te,
        copyPage: ae,
        settingDefaultPage: $,
        createHistoryMessage: ne,
        savePageSetting: oe,
        collectAllPage: re,
        deletePage: ge,
        PluginSetting: ve,
        ButtonGroup: Se,
        SvgButton: W,
        LifeCycles: ra,
        useLayout: H,
        usePage: A,
        useCanvas: I,
        useModal: x,
        useNotify: f,
        getMergeMeta: he,
        getMetaApi: p,
        META_SERVICE: P,
        useMessage: se,
        extend: j,
        isEqual: O,
        constants: R,
        isVsCodeEnv: la,
        handlePageUpdate: le,
        generatePage: ga,
        PageHistory: ca,
        PageInputOutput: ua,
        meta: Q,
        http: M,
        COMPONENT_NAME: da,
        isShow: $e,
        openPageSettingPanel: De,
        closePageSettingPanel: K,
        PAGE_SETTING_SESSION: aa
      })
    }), q = g((k) => {
      if (!k)
        return;
      const J = i.currentPageData.page_content;
      J.lifeCycles = {
        ...J.lifeCycles || {},
        ...k
      };
    }, {
      metaData: {
        id: "engine.plugins.appmanage.PageSetting.updatePageLifeCycles"
      },
      ctx: () => ({
        props: a,
        emit: t,
        requestCreatePage: n,
        requestDeletePage: e,
        getDefaultPage: s,
        pageSettingState: i,
        changeTreeData: o,
        isCurrentDataSame: r,
        initCurrentPageData: l,
        isTemporaryPage: m,
        STATIC_PAGE_GROUP_ID: d,
        updatePageSettingAfterSave: D,
        pageState: c,
        initData: y,
        confirm: h,
        registry: _,
        pageGeneral: C,
        beforeCreatePage: T,
        pageGeneralRef: N,
        PLUGIN_NAME: u,
        getPluginByLayout: E,
        align: b,
        subscribe: F,
        unsubscribe: G,
        subscriber: L,
        state: B,
        cancelPageSetting: S,
        createPage: v,
        updatePage: V,
        restorePage: w,
        editPage: X,
        updatePageLifeCycles: q,
        copyPageData: te,
        copyPage: ae,
        settingDefaultPage: $,
        createHistoryMessage: ne,
        savePageSetting: oe,
        collectAllPage: re,
        deletePage: ge,
        PluginSetting: ve,
        ButtonGroup: Se,
        SvgButton: W,
        LifeCycles: ra,
        useLayout: H,
        usePage: A,
        useCanvas: I,
        useModal: x,
        useNotify: f,
        getMergeMeta: he,
        getMetaApi: p,
        META_SERVICE: P,
        useMessage: se,
        extend: j,
        isEqual: O,
        constants: R,
        isVsCodeEnv: la,
        handlePageUpdate: le,
        generatePage: ga,
        PageHistory: ca,
        PageInputOutput: ua,
        meta: Q,
        http: M,
        COMPONENT_NAME: da,
        isShow: $e,
        openPageSettingPanel: De,
        closePageSettingPanel: K,
        PAGE_SETTING_SESSION: aa
      })
    }), te = g(() => {
      const k = i.currentPageData, J = j(!0, {}, k);
      i.isNew = !0, J.name = `${J.name}Copy`, J.route = `${J.route}Copy`, i.currentPageData = J, i.currentPageDataCopy = j(!0, {}, J), i.defaultPage = null;
    }, {
      metaData: {
        id: "engine.plugins.appmanage.PageSetting.copyPageData"
      },
      ctx: () => ({
        props: a,
        emit: t,
        requestCreatePage: n,
        requestDeletePage: e,
        getDefaultPage: s,
        pageSettingState: i,
        changeTreeData: o,
        isCurrentDataSame: r,
        initCurrentPageData: l,
        isTemporaryPage: m,
        STATIC_PAGE_GROUP_ID: d,
        updatePageSettingAfterSave: D,
        pageState: c,
        initData: y,
        confirm: h,
        registry: _,
        pageGeneral: C,
        beforeCreatePage: T,
        pageGeneralRef: N,
        PLUGIN_NAME: u,
        getPluginByLayout: E,
        align: b,
        subscribe: F,
        unsubscribe: G,
        subscriber: L,
        state: B,
        cancelPageSetting: S,
        createPage: v,
        updatePage: V,
        restorePage: w,
        editPage: X,
        updatePageLifeCycles: q,
        copyPageData: te,
        copyPage: ae,
        settingDefaultPage: $,
        createHistoryMessage: ne,
        savePageSetting: oe,
        collectAllPage: re,
        deletePage: ge,
        PluginSetting: ve,
        ButtonGroup: Se,
        SvgButton: W,
        LifeCycles: ra,
        useLayout: H,
        usePage: A,
        useCanvas: I,
        useModal: x,
        useNotify: f,
        getMergeMeta: he,
        getMetaApi: p,
        META_SERVICE: P,
        useMessage: se,
        extend: j,
        isEqual: O,
        constants: R,
        isVsCodeEnv: la,
        handlePageUpdate: le,
        generatePage: ga,
        PageHistory: ca,
        PageInputOutput: ua,
        meta: Q,
        http: M,
        COMPONENT_NAME: da,
        isShow: $e,
        openPageSettingPanel: De,
        closePageSettingPanel: K,
        PAGE_SETTING_SESSION: aa
      })
    }), ae = g(() => {
      r() ? te() : h({
        title: "提示",
        message: "您即将复制的页面有更改未保存，是否确定跳过更改直接复制？",
        exec: () => {
          o(i.oldParentId, i.currentPageData.parentId), Object.assign(i.currentPageData, i.currentPageDataCopy), te();
        }
      });
    }, {
      metaData: {
        id: "engine.plugins.appmanage.PageSetting.copyPage"
      },
      ctx: () => ({
        props: a,
        emit: t,
        requestCreatePage: n,
        requestDeletePage: e,
        getDefaultPage: s,
        pageSettingState: i,
        changeTreeData: o,
        isCurrentDataSame: r,
        initCurrentPageData: l,
        isTemporaryPage: m,
        STATIC_PAGE_GROUP_ID: d,
        updatePageSettingAfterSave: D,
        pageState: c,
        initData: y,
        confirm: h,
        registry: _,
        pageGeneral: C,
        beforeCreatePage: T,
        pageGeneralRef: N,
        PLUGIN_NAME: u,
        getPluginByLayout: E,
        align: b,
        subscribe: F,
        unsubscribe: G,
        subscriber: L,
        state: B,
        cancelPageSetting: S,
        createPage: v,
        updatePage: V,
        restorePage: w,
        editPage: X,
        updatePageLifeCycles: q,
        copyPageData: te,
        copyPage: ae,
        settingDefaultPage: $,
        createHistoryMessage: ne,
        savePageSetting: oe,
        collectAllPage: re,
        deletePage: ge,
        PluginSetting: ve,
        ButtonGroup: Se,
        SvgButton: W,
        LifeCycles: ra,
        useLayout: H,
        usePage: A,
        useCanvas: I,
        useModal: x,
        useNotify: f,
        getMergeMeta: he,
        getMetaApi: p,
        META_SERVICE: P,
        useMessage: se,
        extend: j,
        isEqual: O,
        constants: R,
        isVsCodeEnv: la,
        handlePageUpdate: le,
        generatePage: ga,
        PageHistory: ca,
        PageInputOutput: ua,
        meta: Q,
        http: M,
        COMPONENT_NAME: da,
        isShow: $e,
        openPageSettingPanel: De,
        closePageSettingPanel: K,
        PAGE_SETTING_SESSION: aa
      })
    }), $ = g(async () => {
      var J;
      const k = {
        ...i.defaultPage,
        isDefault: !0
      };
      V((J = i.defaultPage) == null ? void 0 : J.id, k, !1).then((z) => {
        z && X();
      });
    }, {
      metaData: {
        id: "engine.plugins.appmanage.PageSetting.settingDefaultPage"
      },
      ctx: () => ({
        props: a,
        emit: t,
        requestCreatePage: n,
        requestDeletePage: e,
        getDefaultPage: s,
        pageSettingState: i,
        changeTreeData: o,
        isCurrentDataSame: r,
        initCurrentPageData: l,
        isTemporaryPage: m,
        STATIC_PAGE_GROUP_ID: d,
        updatePageSettingAfterSave: D,
        pageState: c,
        initData: y,
        confirm: h,
        registry: _,
        pageGeneral: C,
        beforeCreatePage: T,
        pageGeneralRef: N,
        PLUGIN_NAME: u,
        getPluginByLayout: E,
        align: b,
        subscribe: F,
        unsubscribe: G,
        subscriber: L,
        state: B,
        cancelPageSetting: S,
        createPage: v,
        updatePage: V,
        restorePage: w,
        editPage: X,
        updatePageLifeCycles: q,
        copyPageData: te,
        copyPage: ae,
        settingDefaultPage: $,
        createHistoryMessage: ne,
        savePageSetting: oe,
        collectAllPage: re,
        deletePage: ge,
        PluginSetting: ve,
        ButtonGroup: Se,
        SvgButton: W,
        LifeCycles: ra,
        useLayout: H,
        usePage: A,
        useCanvas: I,
        useModal: x,
        useNotify: f,
        getMergeMeta: he,
        getMetaApi: p,
        META_SERVICE: P,
        useMessage: se,
        extend: j,
        isEqual: O,
        constants: R,
        isVsCodeEnv: la,
        handlePageUpdate: le,
        generatePage: ga,
        PageHistory: ca,
        PageInputOutput: ua,
        meta: Q,
        http: M,
        COMPONENT_NAME: da,
        isShow: $e,
        openPageSettingPanel: De,
        closePageSettingPanel: K,
        PAGE_SETTING_SESSION: aa
      })
    }), ne = g(() => {
      if (i.isNew)
        i.currentPageData.message = "Page auto save", v();
      else {
        const k = "创建历史备份信息", J = {
          render: () => ee(ft, {
            placeholder: "历史备份信息",
            modelValue: B.historyMessage,
            "onUpdate:modelValue": (me) => B.historyMessage = me
          }, null)
        }, z = g(() => {
          var me;
          i.currentPageData.message = B.historyMessage.trim() || "Page auto save", (me = i.defaultPage) != null && me.id ? $() : X(), B.historyMessage = "";
        }, {
          metaData: {
            id: "engine.plugins.appmanage.PageSetting.exec"
          },
          ctx: () => ({
            title: k,
            messageRender: J,
            exec: z,
            props: a,
            emit: t,
            requestCreatePage: n,
            requestDeletePage: e,
            getDefaultPage: s,
            pageSettingState: i,
            changeTreeData: o,
            isCurrentDataSame: r,
            initCurrentPageData: l,
            isTemporaryPage: m,
            STATIC_PAGE_GROUP_ID: d,
            updatePageSettingAfterSave: D,
            pageState: c,
            initData: y,
            confirm: h,
            registry: _,
            pageGeneral: C,
            beforeCreatePage: T,
            pageGeneralRef: N,
            PLUGIN_NAME: u,
            getPluginByLayout: E,
            align: b,
            subscribe: F,
            unsubscribe: G,
            subscriber: L,
            state: B,
            cancelPageSetting: S,
            createPage: v,
            updatePage: V,
            restorePage: w,
            editPage: X,
            updatePageLifeCycles: q,
            copyPageData: te,
            copyPage: ae,
            settingDefaultPage: $,
            createHistoryMessage: ne,
            savePageSetting: oe,
            collectAllPage: re,
            deletePage: ge,
            PluginSetting: ve,
            ButtonGroup: Se,
            SvgButton: W,
            LifeCycles: ra,
            useLayout: H,
            usePage: A,
            useCanvas: I,
            useModal: x,
            useNotify: f,
            getMergeMeta: he,
            getMetaApi: p,
            META_SERVICE: P,
            useMessage: se,
            extend: j,
            isEqual: O,
            constants: R,
            isVsCodeEnv: la,
            handlePageUpdate: le,
            generatePage: ga,
            PageHistory: ca,
            PageInputOutput: ua,
            meta: Q,
            http: M,
            COMPONENT_NAME: da,
            isShow: $e,
            openPageSettingPanel: De,
            closePageSettingPanel: K,
            PAGE_SETTING_SESSION: aa
          })
        });
        h({
          title: k,
          message: J,
          exec: z
        });
      }
    }, {
      metaData: {
        id: "engine.plugins.appmanage.PageSetting.createHistoryMessage"
      },
      ctx: () => ({
        props: a,
        emit: t,
        requestCreatePage: n,
        requestDeletePage: e,
        getDefaultPage: s,
        pageSettingState: i,
        changeTreeData: o,
        isCurrentDataSame: r,
        initCurrentPageData: l,
        isTemporaryPage: m,
        STATIC_PAGE_GROUP_ID: d,
        updatePageSettingAfterSave: D,
        pageState: c,
        initData: y,
        confirm: h,
        registry: _,
        pageGeneral: C,
        beforeCreatePage: T,
        pageGeneralRef: N,
        PLUGIN_NAME: u,
        getPluginByLayout: E,
        align: b,
        subscribe: F,
        unsubscribe: G,
        subscriber: L,
        state: B,
        cancelPageSetting: S,
        createPage: v,
        updatePage: V,
        restorePage: w,
        editPage: X,
        updatePageLifeCycles: q,
        copyPageData: te,
        copyPage: ae,
        settingDefaultPage: $,
        createHistoryMessage: ne,
        savePageSetting: oe,
        collectAllPage: re,
        deletePage: ge,
        PluginSetting: ve,
        ButtonGroup: Se,
        SvgButton: W,
        LifeCycles: ra,
        useLayout: H,
        usePage: A,
        useCanvas: I,
        useModal: x,
        useNotify: f,
        getMergeMeta: he,
        getMetaApi: p,
        META_SERVICE: P,
        useMessage: se,
        extend: j,
        isEqual: O,
        constants: R,
        isVsCodeEnv: la,
        handlePageUpdate: le,
        generatePage: ga,
        PageHistory: ca,
        PageInputOutput: ua,
        meta: Q,
        http: M,
        COMPONENT_NAME: da,
        isShow: $e,
        openPageSettingPanel: De,
        closePageSettingPanel: K,
        PAGE_SETTING_SESSION: aa
      })
    }), oe = g(() => {
      N.value.validGeneralForm().then(ne);
    }, {
      metaData: {
        id: "engine.plugins.appmanage.PageSetting.savePageSetting"
      },
      ctx: () => ({
        props: a,
        emit: t,
        requestCreatePage: n,
        requestDeletePage: e,
        getDefaultPage: s,
        pageSettingState: i,
        changeTreeData: o,
        isCurrentDataSame: r,
        initCurrentPageData: l,
        isTemporaryPage: m,
        STATIC_PAGE_GROUP_ID: d,
        updatePageSettingAfterSave: D,
        pageState: c,
        initData: y,
        confirm: h,
        registry: _,
        pageGeneral: C,
        beforeCreatePage: T,
        pageGeneralRef: N,
        PLUGIN_NAME: u,
        getPluginByLayout: E,
        align: b,
        subscribe: F,
        unsubscribe: G,
        subscriber: L,
        state: B,
        cancelPageSetting: S,
        createPage: v,
        updatePage: V,
        restorePage: w,
        editPage: X,
        updatePageLifeCycles: q,
        copyPageData: te,
        copyPage: ae,
        settingDefaultPage: $,
        createHistoryMessage: ne,
        savePageSetting: oe,
        collectAllPage: re,
        deletePage: ge,
        PluginSetting: ve,
        ButtonGroup: Se,
        SvgButton: W,
        LifeCycles: ra,
        useLayout: H,
        usePage: A,
        useCanvas: I,
        useModal: x,
        useNotify: f,
        getMergeMeta: he,
        getMetaApi: p,
        META_SERVICE: P,
        useMessage: se,
        extend: j,
        isEqual: O,
        constants: R,
        isVsCodeEnv: la,
        handlePageUpdate: le,
        generatePage: ga,
        PageHistory: ca,
        PageInputOutput: ua,
        meta: Q,
        http: M,
        COMPONENT_NAME: da,
        isShow: $e,
        openPageSettingPanel: De,
        closePageSettingPanel: K,
        PAGE_SETTING_SESSION: aa
      })
    }), re = g((k = []) => {
      if (!Array.isArray(k))
        return [];
      const J = [];
      return k.forEach((z) => {
        var me;
        if (z != null && z.isPage) {
          J.push(z);
          return;
        }
        !(z != null && z.isPage) && ((me = z == null ? void 0 : z.children) != null && me.length) && J.push(...re(z.children));
      }), J;
    }, {
      metaData: {
        id: "engine.plugins.appmanage.PageSetting.collectAllPage"
      },
      ctx: () => ({
        props: a,
        emit: t,
        requestCreatePage: n,
        requestDeletePage: e,
        getDefaultPage: s,
        pageSettingState: i,
        changeTreeData: o,
        isCurrentDataSame: r,
        initCurrentPageData: l,
        isTemporaryPage: m,
        STATIC_PAGE_GROUP_ID: d,
        updatePageSettingAfterSave: D,
        pageState: c,
        initData: y,
        confirm: h,
        registry: _,
        pageGeneral: C,
        beforeCreatePage: T,
        pageGeneralRef: N,
        PLUGIN_NAME: u,
        getPluginByLayout: E,
        align: b,
        subscribe: F,
        unsubscribe: G,
        subscriber: L,
        state: B,
        cancelPageSetting: S,
        createPage: v,
        updatePage: V,
        restorePage: w,
        editPage: X,
        updatePageLifeCycles: q,
        copyPageData: te,
        copyPage: ae,
        settingDefaultPage: $,
        createHistoryMessage: ne,
        savePageSetting: oe,
        collectAllPage: re,
        deletePage: ge,
        PluginSetting: ve,
        ButtonGroup: Se,
        SvgButton: W,
        LifeCycles: ra,
        useLayout: H,
        usePage: A,
        useCanvas: I,
        useModal: x,
        useNotify: f,
        getMergeMeta: he,
        getMetaApi: p,
        META_SERVICE: P,
        useMessage: se,
        extend: j,
        isEqual: O,
        constants: R,
        isVsCodeEnv: la,
        handlePageUpdate: le,
        generatePage: ga,
        PageHistory: ca,
        PageInputOutput: ua,
        meta: Q,
        http: M,
        COMPONENT_NAME: da,
        isShow: $e,
        openPageSettingPanel: De,
        closePageSettingPanel: K,
        PAGE_SETTING_SESSION: aa
      })
    }), ge = g(() => {
      var k, J;
      if ((J = (k = i.treeDataMapping[i.currentPageData.id]) == null ? void 0 : k.children) != null && J.length) {
        f({
          type: "error",
          message: "此页面存在子页面或子文件夹，不能删除！"
        });
        return;
      }
      h({
        title: "提示",
        message: "您是否要删除页面?",
        exec: () => {
          var me;
          const z = ((me = i.currentPageData) == null ? void 0 : me.id) || "";
          e(z).then(() => {
            i.updateTreeData().then((fe) => {
              var lt, gt;
              if (((lt = c == null ? void 0 : c.currentPage) == null ? void 0 : lt.id) !== z)
                return;
              const _a = ((gt = (fe || []).find(({
                groupId: it
              }) => it === d)) == null ? void 0 : gt.data) || [], ka = re(_a), Qa = ka.find((it) => it.isHome), Dt = ka == null ? void 0 : ka[0], yt = {
                componentName: da.Page
              };
              t("openNewPage", Qa || Dt || yt);
            }), K(), f({
              message: "删除页面成功！",
              type: "success"
            });
          }).catch(() => {
            f({
              message: "删除页面失败！",
              type: "error"
            });
          });
        }
      });
    }, {
      metaData: {
        id: "engine.plugins.appmanage.PageSetting.deletePage"
      },
      ctx: () => ({
        props: a,
        emit: t,
        requestCreatePage: n,
        requestDeletePage: e,
        getDefaultPage: s,
        pageSettingState: i,
        changeTreeData: o,
        isCurrentDataSame: r,
        initCurrentPageData: l,
        isTemporaryPage: m,
        STATIC_PAGE_GROUP_ID: d,
        updatePageSettingAfterSave: D,
        pageState: c,
        initData: y,
        confirm: h,
        registry: _,
        pageGeneral: C,
        beforeCreatePage: T,
        pageGeneralRef: N,
        PLUGIN_NAME: u,
        getPluginByLayout: E,
        align: b,
        subscribe: F,
        unsubscribe: G,
        subscriber: L,
        state: B,
        cancelPageSetting: S,
        createPage: v,
        updatePage: V,
        restorePage: w,
        editPage: X,
        updatePageLifeCycles: q,
        copyPageData: te,
        copyPage: ae,
        settingDefaultPage: $,
        createHistoryMessage: ne,
        savePageSetting: oe,
        collectAllPage: re,
        deletePage: ge,
        PluginSetting: ve,
        ButtonGroup: Se,
        SvgButton: W,
        LifeCycles: ra,
        useLayout: H,
        usePage: A,
        useCanvas: I,
        useModal: x,
        useNotify: f,
        getMergeMeta: he,
        getMetaApi: p,
        META_SERVICE: P,
        useMessage: se,
        extend: j,
        isEqual: O,
        constants: R,
        isVsCodeEnv: la,
        handlePageUpdate: le,
        generatePage: ga,
        PageHistory: ca,
        PageInputOutput: ua,
        meta: Q,
        http: M,
        COMPONENT_NAME: da,
        isShow: $e,
        openPageSettingPanel: De,
        closePageSettingPanel: K,
        PAGE_SETTING_SESSION: aa
      })
    });
    return {
      align: b,
      PLUGIN_NAME: u,
      state: B,
      isShow: $e,
      savePageSetting: oe,
      copyPage: ae,
      pageSettingState: i,
      pageGeneral: C,
      pageGeneralRef: N,
      deletePage: ge,
      cancelPageSetting: S,
      closePageSettingPanel: K,
      updatePageLifeCycles: q,
      restorePage: w,
      PAGE_SETTING_SESSION: aa
    };
  }
}, Bt = { class: "page-setting-content" }, Ht = { class: "life-cycles-container" };
function Lt(a, t, n, e, s, i) {
  const o = ce("tiny-button"), r = ce("svg-button"), l = ce("button-group"), m = ce("tiny-collapse-item"), d = ce("page-input-output"), D = ce("life-cycles"), c = ce("page-history"), y = ce("tiny-collapse"), h = ce("plugin-setting");
  return e.isShow ? (ue(), ma(h, {
    key: 0,
    "fixed-name": e.PLUGIN_NAME.AppManage,
    align: e.align,
    title: e.state.title,
    class: "page-plugin-setting"
  }, {
    header: de(() => [
      ee(l, null, {
        default: de(() => [
          ee(o, {
            type: "primary",
            onClick: e.savePageSetting
          }, {
            default: de(() => t[1] || (t[1] = [
              at("保存", -1)
            ])),
            _: 1,
            __: [1]
          }, 8, ["onClick"]),
          e.pageSettingState.isNew ? ya("", !0) : (ue(), ma(r, {
            key: 0,
            name: "text-copy-page",
            placement: "bottom",
            tips: "复制页面",
            onClick: e.copyPage
          }, null, 8, ["onClick"])),
          e.pageSettingState.isNew ? ya("", !0) : (ue(), ma(r, {
            key: 1,
            name: "delete",
            tips: "删除页面",
            onClick: e.deletePage
          }, null, 8, ["onClick"])),
          ee(r, {
            name: "close",
            onClick: e.cancelPageSetting
          }, null, 8, ["onClick"])
        ]),
        _: 1
      })
    ]),
    content: de(() => [
      ea("div", Bt, [
        ee(y, {
          modelValue: e.state.activeName,
          "onUpdate:modelValue": t[0] || (t[0] = (_) => e.state.activeName = _),
          class: "page-setting-collapse"
        }, {
          default: de(() => [
            ee(m, {
              title: "基本设置",
              name: e.PAGE_SETTING_SESSION.general
            }, {
              default: de(() => [
                (ue(), ma(pt(e.pageGeneral), {
                  ref: "pageGeneralRef",
                  isFolder: n.isFolder
                }, null, 8, ["isFolder"]))
              ]),
              _: 1
            }, 8, ["name"]),
            e.pageSettingState.currentPageData.group !== "public" ? (ue(), ma(m, {
              key: 0,
              class: "base-setting",
              title: "输入输出",
              name: e.PAGE_SETTING_SESSION.inputOutput
            }, {
              default: de(() => [
                ee(d)
              ]),
              _: 1
            }, 8, ["name"])) : ya("", !0),
            e.pageSettingState.currentPageData.group !== "public" ? (ue(), ma(m, {
              key: 1,
              class: "input-output",
              title: "页面生命周期配置",
              name: e.PAGE_SETTING_SESSION.lifeCycles
            }, {
              default: de(() => {
                var _;
                return [
                  ea("div", Ht, [
                    ee(D, {
                      bindLifeCycles: (_ = e.pageSettingState.currentPageData.page_content) == null ? void 0 : _.lifeCycles,
                      onUpdatePageLifeCycles: e.updatePageLifeCycles
                    }, null, 8, ["bindLifeCycles", "onUpdatePageLifeCycles"])
                  ])
                ];
              }),
              _: 1
            }, 8, ["name"])) : ya("", !0),
            ee(m, {
              class: "history-source",
              title: "历史备份",
              name: e.PAGE_SETTING_SESSION.history
            }, {
              default: de(() => [
                ee(c, { onRestorePage: e.restorePage }, null, 8, ["onRestorePage"])
              ]),
              _: 1
            }, 8, ["name"])
          ]),
          _: 1
        }, 8, ["modelValue"])
      ])
    ]),
    _: 1
  }, 8, ["fixed-name", "align", "title"])) : ya("", !0);
}
const Ua = /* @__PURE__ */ Fa(Rt, [["render", Lt], ["__scopeId", "data-v-1bd86225"]]), Oa = Sa(!1), ha = g(() => {
  Oa.value = !0;
}, {
  metaData: {
    id: "engine.plugins.appmanage.PageFolderSetting.openFolderSettingPanel"
  },
  ctx: () => ({
    PluginSetting: ve,
    SvgButton: W,
    ButtonGroup: Se,
    usePage: A,
    useLayout: H,
    useModal: x,
    useNotify: f,
    getMergeMeta: he,
    getMetaApi: p,
    META_SERVICE: P,
    isEqual: O,
    throttle: Aa,
    meta: Q,
    http: M,
    isShow: Oa,
    openFolderSettingPanel: ha,
    closeFolderSettingPanel: ie
  })
}), ie = g(() => {
  Oa.value = !1;
  const {
    resetPageData: a
  } = A();
  a();
}, {
  metaData: {
    id: "engine.plugins.appmanage.PageFolderSetting.closeFolderSettingPanel"
  },
  ctx: () => ({
    PluginSetting: ve,
    SvgButton: W,
    ButtonGroup: Se,
    usePage: A,
    useLayout: H,
    useModal: x,
    useNotify: f,
    getMergeMeta: he,
    getMetaApi: p,
    META_SERVICE: P,
    isEqual: O,
    throttle: Aa,
    meta: Q,
    http: M,
    isShow: Oa,
    openFolderSettingPanel: ha,
    closeFolderSettingPanel: ie
  })
}), qt = {
  components: {
    TinyButton: mt,
    TinyCollapse: rt,
    TinyCollapseItem: ot,
    PluginSetting: ve,
    SvgButton: W,
    ButtonGroup: Se
  },
  props: {
    isFolder: {
      type: Boolean,
      default: !1
    }
  },
  setup() {
    const a = Ga({
      activeName: ["folderGeneralRef"],
      title: "文件夹设置"
    }), {
      requestCreatePage: t,
      requestUpdatePage: n,
      requestDeletePage: e
    } = M, {
      pageSettingState: s,
      changeTreeData: i
    } = A(), {
      confirm: o
    } = x(), r = he(Q.id), l = r.components.PageGeneral, m = Sa(null), {
      PLUGIN_NAME: d,
      getPluginByLayout: D
    } = H(), c = Ma(() => D(d.AppManage)), y = g(() => {
      O(s.currentPageData, s.currentPageDataCopy) ? ie() : o({
        title: "提示",
        message: "您即将使用未保存的更改关闭此页。是否要在关闭之前放弃这些更改？",
        exec: () => {
          s.isNew || (i(s.oldParentId, s.currentPageData.parentId), Object.assign(s.currentPageData, s.currentPageDataCopy)), ie();
        }
      });
    }, {
      metaData: {
        id: "engine.plugins.appmanage.PageFolderSetting.closeFolderSetting"
      },
      ctx: () => ({
        state: a,
        requestCreatePage: t,
        requestUpdatePage: n,
        requestDeletePage: e,
        pageSettingState: s,
        changeTreeData: i,
        confirm: o,
        registry: r,
        pageGeneral: l,
        folderGeneralRef: m,
        PLUGIN_NAME: d,
        getPluginByLayout: D,
        align: c,
        closeFolderSetting: y,
        createFolder: h,
        updateFolder: _,
        saveFolderSetting: C,
        deleteFolder: T,
        PluginSetting: ve,
        SvgButton: W,
        ButtonGroup: Se,
        usePage: A,
        useLayout: H,
        useModal: x,
        useNotify: f,
        getMergeMeta: he,
        getMetaApi: p,
        META_SERVICE: P,
        isEqual: O,
        throttle: Aa,
        meta: Q,
        http: M,
        isShow: Oa,
        openFolderSettingPanel: ha,
        closeFolderSettingPanel: ie
      })
    }), h = g(() => {
      const u = {
        ...s.currentPageData,
        app: p(P.GlobalService).getBaseInfo().id,
        isPage: !1
      };
      t(u).then(() => {
        s.updateTreeData(), s.isNew = !1, ie(), f({
          type: "success",
          message: "新建文件夹成功!"
        });
      }).catch((E) => {
        f({
          type: "error",
          title: "新建文件夹失败",
          message: JSON.stringify((E == null ? void 0 : E.message) || E)
        });
      });
    }, {
      metaData: {
        id: "engine.plugins.appmanage.PageFolderSetting.createFolder"
      },
      ctx: () => ({
        state: a,
        requestCreatePage: t,
        requestUpdatePage: n,
        requestDeletePage: e,
        pageSettingState: s,
        changeTreeData: i,
        confirm: o,
        registry: r,
        pageGeneral: l,
        folderGeneralRef: m,
        PLUGIN_NAME: d,
        getPluginByLayout: D,
        align: c,
        closeFolderSetting: y,
        createFolder: h,
        updateFolder: _,
        saveFolderSetting: C,
        deleteFolder: T,
        PluginSetting: ve,
        SvgButton: W,
        ButtonGroup: Se,
        usePage: A,
        useLayout: H,
        useModal: x,
        useNotify: f,
        getMergeMeta: he,
        getMetaApi: p,
        META_SERVICE: P,
        isEqual: O,
        throttle: Aa,
        meta: Q,
        http: M,
        isShow: Oa,
        openFolderSettingPanel: ha,
        closeFolderSettingPanel: ie
      })
    }), _ = g(() => {
      const {
        id: N
      } = s.currentPageData;
      n(N, {
        ...s.currentPageData,
        page_content: null
      }).then(() => {
        s.updateTreeData(), s.isNew = !1, ie(), f({
          type: "success",
          message: "更新文件夹成功!"
        });
      }).catch((u) => {
        f({
          type: "error",
          title: "更新文件夹失败",
          message: JSON.stringify((u == null ? void 0 : u.message) || u)
        });
      });
    }, {
      metaData: {
        id: "engine.plugins.appmanage.PageFolderSetting.updateFolder"
      },
      ctx: () => ({
        state: a,
        requestCreatePage: t,
        requestUpdatePage: n,
        requestDeletePage: e,
        pageSettingState: s,
        changeTreeData: i,
        confirm: o,
        registry: r,
        pageGeneral: l,
        folderGeneralRef: m,
        PLUGIN_NAME: d,
        getPluginByLayout: D,
        align: c,
        closeFolderSetting: y,
        createFolder: h,
        updateFolder: _,
        saveFolderSetting: C,
        deleteFolder: T,
        PluginSetting: ve,
        SvgButton: W,
        ButtonGroup: Se,
        usePage: A,
        useLayout: H,
        useModal: x,
        useNotify: f,
        getMergeMeta: he,
        getMetaApi: p,
        META_SERVICE: P,
        isEqual: O,
        throttle: Aa,
        meta: Q,
        http: M,
        isShow: Oa,
        openFolderSettingPanel: ha,
        closeFolderSettingPanel: ie
      })
    }), C = g(() => {
      m.value.validGeneralForm().then(() => {
        s.isNew ? h() : _();
      });
    }, {
      metaData: {
        id: "engine.plugins.appmanage.PageFolderSetting.saveFolderSetting"
      },
      ctx: () => ({
        state: a,
        requestCreatePage: t,
        requestUpdatePage: n,
        requestDeletePage: e,
        pageSettingState: s,
        changeTreeData: i,
        confirm: o,
        registry: r,
        pageGeneral: l,
        folderGeneralRef: m,
        PLUGIN_NAME: d,
        getPluginByLayout: D,
        align: c,
        closeFolderSetting: y,
        createFolder: h,
        updateFolder: _,
        saveFolderSetting: C,
        deleteFolder: T,
        PluginSetting: ve,
        SvgButton: W,
        ButtonGroup: Se,
        usePage: A,
        useLayout: H,
        useModal: x,
        useNotify: f,
        getMergeMeta: he,
        getMetaApi: p,
        META_SERVICE: P,
        isEqual: O,
        throttle: Aa,
        meta: Q,
        http: M,
        isShow: Oa,
        openFolderSettingPanel: ha,
        closeFolderSettingPanel: ie
      })
    }), T = g(() => {
      var N, u;
      if ((u = (N = s.treeDataMapping[s.currentPageData.id]) == null ? void 0 : N.children) != null && u.length) {
        f({
          type: "error",
          message: "此文件夹不是空文件夹，不能删除！"
        });
        return;
      }
      o({
        title: "提示",
        message: "您是否要删除文件夹?",
        exec: () => {
          var b;
          const E = ((b = s.currentPageData) == null ? void 0 : b.id) || "";
          e(E).then(() => {
            s.updateTreeData(), ie(), f({
              type: "success",
              message: "删除文件夹成功！"
            });
          }).catch((F) => {
            f({
              type: "success",
              title: "删除文件夹失败！",
              message: JSON.stringify((F == null ? void 0 : F.message) || F)
            });
          });
        }
      });
    }, {
      metaData: {
        id: "engine.plugins.appmanage.PageFolderSetting.deleteFolder"
      },
      ctx: () => ({
        state: a,
        requestCreatePage: t,
        requestUpdatePage: n,
        requestDeletePage: e,
        pageSettingState: s,
        changeTreeData: i,
        confirm: o,
        registry: r,
        pageGeneral: l,
        folderGeneralRef: m,
        PLUGIN_NAME: d,
        getPluginByLayout: D,
        align: c,
        closeFolderSetting: y,
        createFolder: h,
        updateFolder: _,
        saveFolderSetting: C,
        deleteFolder: T,
        PluginSetting: ve,
        SvgButton: W,
        ButtonGroup: Se,
        usePage: A,
        useLayout: H,
        useModal: x,
        useNotify: f,
        getMergeMeta: he,
        getMetaApi: p,
        META_SERVICE: P,
        isEqual: O,
        throttle: Aa,
        meta: Q,
        http: M,
        isShow: Oa,
        openFolderSettingPanel: ha,
        closeFolderSettingPanel: ie
      })
    });
    return {
      align: c,
      PLUGIN_NAME: d,
      saveFolderSetting: C,
      deleteFolder: Aa(5e3, !0, T),
      pageGeneral: l,
      folderGeneralRef: m,
      closeFolderSettingPanel: ie,
      isShow: Oa,
      state: a,
      pageSettingState: s,
      closeFolderSetting: y
    };
  }
}, Ut = { class: "page-setting-content" };
function jt(a, t, n, e, s, i) {
  const o = ce("tiny-button"), r = ce("svg-button"), l = ce("button-group"), m = ce("tiny-collapse-item"), d = ce("tiny-collapse"), D = ce("plugin-setting");
  return e.isShow ? (ue(), ma(D, {
    key: 0,
    "fixed-name": e.PLUGIN_NAME.AppManage,
    align: e.align,
    title: e.state.title,
    class: "pageFolder-plugin-setting"
  }, {
    header: de(() => [
      ee(l, null, {
        default: de(() => [
          ee(o, {
            type: "primary",
            onClick: e.saveFolderSetting
          }, {
            default: de(() => t[1] || (t[1] = [
              at("保存", -1)
            ])),
            _: 1,
            __: [1]
          }, 8, ["onClick"]),
          e.pageSettingState.isNew ? ya("", !0) : (ue(), ma(r, {
            key: 0,
            name: "delete",
            placement: "bottom",
            tips: "删除",
            onClick: e.deleteFolder
          }, null, 8, ["onClick"])),
          ee(r, {
            class: "close-plugin-setting-icon",
            name: "close",
            onClick: e.closeFolderSetting
          }, null, 8, ["onClick"])
        ]),
        _: 1
      })
    ]),
    content: de(() => [
      ea("div", Ut, [
        ee(d, {
          modelValue: e.state.activeName,
          "onUpdate:modelValue": t[0] || (t[0] = (c) => e.state.activeName = c)
        }, {
          default: de(() => [
            ee(m, {
              title: "基本设置",
              name: "folderGeneralRef"
            }, {
              default: de(() => [
                (ue(), ma(pt(e.pageGeneral), {
                  ref: "folderGeneralRef",
                  isFolder: n.isFolder
                }, null, 8, ["isFolder"]))
              ]),
              _: 1
            })
          ]),
          _: 1
        }, 8, ["modelValue"])
      ])
    ]),
    _: 1
  }, 8, ["fixed-name", "align", "title"])) : ya("", !0);
}
const ja = /* @__PURE__ */ Fa(qt, [["render", jt], ["__scopeId", "data-v-79e10f72"]]), Jt = {
  key: 0,
  width: "24",
  height: "24",
  viewBox: "0 0 24 24",
  xmlns: "http://www.w3.org/2000/svg"
}, Kt = {
  key: 0,
  x1: "8",
  y1: "12",
  x2: "20",
  y2: "12",
  stroke: "#EBEBEB",
  "stroke-width": "1"
}, Wt = {
  key: 1,
  x1: "8",
  y1: "12",
  x2: "8",
  y2: "24",
  stroke: "#EBEBEB",
  "stroke-width": "1"
}, Xt = /* @__PURE__ */ Pt({
  __name: "LayerLines",
  props: {
    level: {
      type: Number,
      required: !0
    },
    lineData: {
      type: Object,
      required: !0
    }
  },
  setup(a) {
    return (t, n) => (ue(!0), fa(za, null, tt(a.level - 1, (e) => (ue(), fa("span", {
      key: e,
      class: "gap"
    }, [a.lineData[e] ? (ue(), fa("svg", Jt, [n[0] || (n[0] = ea("line", {
      x1: "8",
      y1: "0",
      x2: "8",
      y2: "12",
      stroke: "#EBEBEB",
      "stroke-width": "1"
    }, null, -1)), (a.lineData[e] & 1) === 1 ? (ue(), fa("line", Kt)) : ya("", !0), (a.lineData[e] >> 1 & 1) === 1 ? (ue(), fa("line", Wt)) : ya("", !0)])) : ya("", !0)]))), 128));
  }
}), Ca = /* @__PURE__ */ Fa(Xt, [["__scopeId", "data-v-4aa4fb14"]]), zt = ["draggable", "onDragstart", "onDragover", "onDragenter", "onDrop"], Qt = ["onClick"], Yt = ["onClick"], Zt = /* @__PURE__ */ Pt({
  __name: "Tree",
  props: {
    data: {
      type: Object,
      required: !0
    },
    idKey: {
      type: String,
      default: "id"
    },
    labelKey: {
      type: String,
      default: "label"
    },
    childrenKey: {
      type: String,
      default: "children"
    },
    active: {
      type: String
    },
    filterValue: {
      type: String,
      default: ""
    },
    rootId: {
      type: [String, Number],
      default: "root"
    },
    draggable: {
      type: Boolean,
      default: !1
    }
  },
  emits: ["clickRow", "moveNode"],
  setup(a, {
    emit: t
  }) {
    const n = a, e = t, s = g(() => {
      const S = Sa({}), v = g((w, X) => {
        S.value[w] = X;
      }, {
        metaData: {
          id: "engine.plugins.appmanage.Tree.setCollapse"
        },
        ctx: () => ({
          collapseMap: S,
          setCollapse: v,
          switchCollapse: V,
          LayerLines: Ca,
          props: n,
          emit: e,
          useCollapseMap: s,
          handleSwitchCollapse: l,
          flattenTreeData: m,
          nodes: d,
          nodesMap: D,
          getAncestorIds: c,
          filteredNodes: y,
          filteredNodesWithAncestors: h,
          lines: _,
          layerLine: C,
          handleClickRow: T,
          draggedNode: N,
          hoveringNodeId: u,
          handleDragStart: E,
          handleDragOver: b,
          handleDrop: F,
          handleDragEnd: G,
          handleContainerDragOver: L,
          handleContainerDragLeave: B
        })
      }), V = g((w) => {
        S.value[w] = !S.value[w];
      }, {
        metaData: {
          id: "engine.plugins.appmanage.Tree.switchCollapse"
        },
        ctx: () => ({
          collapseMap: S,
          setCollapse: v,
          switchCollapse: V,
          LayerLines: Ca,
          props: n,
          emit: e,
          useCollapseMap: s,
          handleSwitchCollapse: l,
          flattenTreeData: m,
          nodes: d,
          nodesMap: D,
          getAncestorIds: c,
          filteredNodes: y,
          filteredNodesWithAncestors: h,
          lines: _,
          layerLine: C,
          handleClickRow: T,
          draggedNode: N,
          hoveringNodeId: u,
          handleDragStart: E,
          handleDragOver: b,
          handleDrop: F,
          handleDragEnd: G,
          handleContainerDragOver: L,
          handleContainerDragLeave: B
        })
      });
      return {
        collapseMap: S,
        setCollapse: v,
        switchCollapse: V
      };
    }, {
      metaData: {
        id: "engine.plugins.appmanage.Tree.useCollapseMap"
      },
      ctx: () => ({
        LayerLines: Ca,
        props: n,
        emit: e,
        useCollapseMap: s,
        handleSwitchCollapse: l,
        flattenTreeData: m,
        nodes: d,
        nodesMap: D,
        getAncestorIds: c,
        filteredNodes: y,
        filteredNodesWithAncestors: h,
        lines: _,
        layerLine: C,
        handleClickRow: T,
        draggedNode: N,
        hoveringNodeId: u,
        handleDragStart: E,
        handleDragOver: b,
        handleDrop: F,
        handleDragEnd: G,
        handleContainerDragOver: L,
        handleContainerDragLeave: B
      })
    }), {
      collapseMap: i,
      setCollapse: o,
      switchCollapse: r
    } = s(), l = g((S) => {
      const v = S.rawData[n.childrenKey];
      Array.isArray(v) && v.length > 0 && r(S.id);
    }, {
      metaData: {
        id: "engine.plugins.appmanage.Tree.handleSwitchCollapse"
      },
      ctx: () => ({
        LayerLines: Ca,
        props: n,
        emit: e,
        useCollapseMap: s,
        collapseMap: i,
        setCollapse: o,
        switchCollapse: r,
        handleSwitchCollapse: l,
        flattenTreeData: m,
        nodes: d,
        nodesMap: D,
        getAncestorIds: c,
        filteredNodes: y,
        filteredNodesWithAncestors: h,
        lines: _,
        layerLine: C,
        handleClickRow: T,
        draggedNode: N,
        hoveringNodeId: u,
        handleDragStart: E,
        handleDragOver: b,
        handleDrop: F,
        handleDragEnd: G,
        handleContainerDragOver: L,
        handleContainerDragLeave: B
      })
    }), m = g((S, v, V = 0, w = !1) => {
      const {
        idKey: X,
        labelKey: q,
        childrenKey: te
      } = n, ae = {
        id: S[X],
        label: S[q],
        parentId: v,
        level: V,
        collapsed: w,
        rawData: S
      }, $ = [ae], ne = S[te];
      if (Array.isArray(ne))
        for (const oe of ne)
          $.push(...m(oe, ae.id, V + 1, w || i.value[ae.id]));
      return $;
    }, {
      metaData: {
        id: "engine.plugins.appmanage.Tree.flattenTreeData"
      },
      ctx: () => ({
        LayerLines: Ca,
        props: n,
        emit: e,
        useCollapseMap: s,
        collapseMap: i,
        setCollapse: o,
        switchCollapse: r,
        handleSwitchCollapse: l,
        flattenTreeData: m,
        nodes: d,
        nodesMap: D,
        getAncestorIds: c,
        filteredNodes: y,
        filteredNodesWithAncestors: h,
        lines: _,
        layerLine: C,
        handleClickRow: T,
        draggedNode: N,
        hoveringNodeId: u,
        handleDragStart: E,
        handleDragOver: b,
        handleDrop: F,
        handleDragEnd: G,
        handleContainerDragOver: L,
        handleContainerDragLeave: B
      })
    }), d = Ma(() => m({
      [n.idKey]: n.rootId,
      [n.childrenKey]: n.data
    }).slice(1)), D = Ma(() => d.value.reduce((S, v) => (S[v.id] = v, S), {})), c = g((S) => {
      const v = D.value[S];
      if (!v || !v.parentId)
        return [];
      const V = c(v.parentId);
      return V.push(v.parentId), V;
    }, {
      metaData: {
        id: "engine.plugins.appmanage.Tree.getAncestorIds"
      },
      ctx: () => ({
        LayerLines: Ca,
        props: n,
        emit: e,
        useCollapseMap: s,
        collapseMap: i,
        setCollapse: o,
        switchCollapse: r,
        handleSwitchCollapse: l,
        flattenTreeData: m,
        nodes: d,
        nodesMap: D,
        getAncestorIds: c,
        filteredNodes: y,
        filteredNodesWithAncestors: h,
        lines: _,
        layerLine: C,
        handleClickRow: T,
        draggedNode: N,
        hoveringNodeId: u,
        handleDragStart: E,
        handleDragOver: b,
        handleDrop: F,
        handleDragEnd: G,
        handleContainerDragOver: L,
        handleContainerDragLeave: B
      })
    }), y = Sa([]);
    ct(d, (S) => {
      y.value = S.filter((v) => v.label.toLowerCase().includes(n.filterValue.toLowerCase()));
    }), ct(() => n.filterValue, (S) => {
      const v = d.value.filter((w) => w.label.toLowerCase().includes(S.toLowerCase()));
      let V = !1;
      S && v.forEach((w) => {
        for (const X of c(w.id))
          i.value[X] && (o(X, !1), V = !0);
      }), V || (y.value = v);
    });
    const h = Ma(() => {
      const S = /* @__PURE__ */ new Set();
      for (const v of y.value) {
        S.add(v.id);
        for (const V of c(v.id))
          S.add(V);
      }
      return d.value.filter((v) => S.has(v.id));
    }), _ = {
      node: 1,
      // └
      layer: 2,
      // │
      layerNode: 3
      // ├
    }, C = Ma(() => {
      const S = {}, v = h.value;
      for (const [V, w] of v.entries())
        if (S[V] = S[V] || {}, S[V][w.level - 1] = _.node, w.parentId !== n.rootId) {
          const X = v.findIndex((q) => q.id === w.parentId);
          for (let q = X + 1; q < V; q++)
            S[q][w.level - 1] = (S[q][w.level - 1] || 0) | _.layer;
        }
      return S;
    }), T = g((S, v) => {
      var w;
      (w = S.currentTarget.querySelector("div.prefix-icon")) != null && w.contains(S.target) || e("clickRow", v);
    }, {
      metaData: {
        id: "engine.plugins.appmanage.Tree.handleClickRow"
      },
      ctx: () => ({
        LayerLines: Ca,
        props: n,
        emit: e,
        useCollapseMap: s,
        collapseMap: i,
        setCollapse: o,
        switchCollapse: r,
        handleSwitchCollapse: l,
        flattenTreeData: m,
        nodes: d,
        nodesMap: D,
        getAncestorIds: c,
        filteredNodes: y,
        filteredNodesWithAncestors: h,
        lines: _,
        layerLine: C,
        handleClickRow: T,
        draggedNode: N,
        hoveringNodeId: u,
        handleDragStart: E,
        handleDragOver: b,
        handleDrop: F,
        handleDragEnd: G,
        handleContainerDragOver: L,
        handleContainerDragLeave: B
      })
    }), N = Sa(null), u = Sa(null), E = g((S, v) => {
      n.draggable && (N.value = v);
    }, {
      metaData: {
        id: "engine.plugins.appmanage.Tree.handleDragStart"
      },
      ctx: () => ({
        LayerLines: Ca,
        props: n,
        emit: e,
        useCollapseMap: s,
        collapseMap: i,
        setCollapse: o,
        switchCollapse: r,
        handleSwitchCollapse: l,
        flattenTreeData: m,
        nodes: d,
        nodesMap: D,
        getAncestorIds: c,
        filteredNodes: y,
        filteredNodesWithAncestors: h,
        lines: _,
        layerLine: C,
        handleClickRow: T,
        draggedNode: N,
        hoveringNodeId: u,
        handleDragStart: E,
        handleDragOver: b,
        handleDrop: F,
        handleDragEnd: G,
        handleContainerDragOver: L,
        handleContainerDragLeave: B
      })
    }), b = g((S, v) => {
      if (!n.draggable)
        return;
      c(v.id).includes(N.value.id) ? u.value = null : (S.preventDefault(), u.value = v.id);
    }, {
      metaData: {
        id: "engine.plugins.appmanage.Tree.handleDragOver"
      },
      ctx: () => ({
        LayerLines: Ca,
        props: n,
        emit: e,
        useCollapseMap: s,
        collapseMap: i,
        setCollapse: o,
        switchCollapse: r,
        handleSwitchCollapse: l,
        flattenTreeData: m,
        nodes: d,
        nodesMap: D,
        getAncestorIds: c,
        filteredNodes: y,
        filteredNodesWithAncestors: h,
        lines: _,
        layerLine: C,
        handleClickRow: T,
        draggedNode: N,
        hoveringNodeId: u,
        handleDragStart: E,
        handleDragOver: b,
        handleDrop: F,
        handleDragEnd: G,
        handleContainerDragOver: L,
        handleContainerDragLeave: B
      })
    }), F = g((S, v) => {
      S.preventDefault();
      const V = N.value;
      if (N.value = null, !V)
        return;
      !c(v.id).includes(V.id) && V.id !== v.id && V.parentId !== v.id && e("moveNode", V, v);
    }, {
      metaData: {
        id: "engine.plugins.appmanage.Tree.handleDrop"
      },
      ctx: () => ({
        LayerLines: Ca,
        props: n,
        emit: e,
        useCollapseMap: s,
        collapseMap: i,
        setCollapse: o,
        switchCollapse: r,
        handleSwitchCollapse: l,
        flattenTreeData: m,
        nodes: d,
        nodesMap: D,
        getAncestorIds: c,
        filteredNodes: y,
        filteredNodesWithAncestors: h,
        lines: _,
        layerLine: C,
        handleClickRow: T,
        draggedNode: N,
        hoveringNodeId: u,
        handleDragStart: E,
        handleDragOver: b,
        handleDrop: F,
        handleDragEnd: G,
        handleContainerDragOver: L,
        handleContainerDragLeave: B
      })
    }), G = g(() => {
      u.value = null;
    }, {
      metaData: {
        id: "engine.plugins.appmanage.Tree.handleDragEnd"
      },
      ctx: () => ({
        LayerLines: Ca,
        props: n,
        emit: e,
        useCollapseMap: s,
        collapseMap: i,
        setCollapse: o,
        switchCollapse: r,
        handleSwitchCollapse: l,
        flattenTreeData: m,
        nodes: d,
        nodesMap: D,
        getAncestorIds: c,
        filteredNodes: y,
        filteredNodesWithAncestors: h,
        lines: _,
        layerLine: C,
        handleClickRow: T,
        draggedNode: N,
        hoveringNodeId: u,
        handleDragStart: E,
        handleDragOver: b,
        handleDrop: F,
        handleDragEnd: G,
        handleContainerDragOver: L,
        handleContainerDragLeave: B
      })
    }), L = g((S) => {
      n.draggable && S.target === S.currentTarget && (S.preventDefault(), u.value = n.rootId);
    }, {
      metaData: {
        id: "engine.plugins.appmanage.Tree.handleContainerDragOver"
      },
      ctx: () => ({
        LayerLines: Ca,
        props: n,
        emit: e,
        useCollapseMap: s,
        collapseMap: i,
        setCollapse: o,
        switchCollapse: r,
        handleSwitchCollapse: l,
        flattenTreeData: m,
        nodes: d,
        nodesMap: D,
        getAncestorIds: c,
        filteredNodes: y,
        filteredNodesWithAncestors: h,
        lines: _,
        layerLine: C,
        handleClickRow: T,
        draggedNode: N,
        hoveringNodeId: u,
        handleDragStart: E,
        handleDragOver: b,
        handleDrop: F,
        handleDragEnd: G,
        handleContainerDragOver: L,
        handleContainerDragLeave: B
      })
    }), B = g((S) => {
      n.draggable && S.target === S.currentTarget && (u.value = null);
    }, {
      metaData: {
        id: "engine.plugins.appmanage.Tree.handleContainerDragLeave"
      },
      ctx: () => ({
        LayerLines: Ca,
        props: n,
        emit: e,
        useCollapseMap: s,
        collapseMap: i,
        setCollapse: o,
        switchCollapse: r,
        handleSwitchCollapse: l,
        flattenTreeData: m,
        nodes: d,
        nodesMap: D,
        getAncestorIds: c,
        filteredNodes: y,
        filteredNodesWithAncestors: h,
        lines: _,
        layerLine: C,
        handleClickRow: T,
        draggedNode: N,
        hoveringNodeId: u,
        handleDragStart: E,
        handleDragOver: b,
        handleDrop: F,
        handleDragEnd: G,
        handleContainerDragOver: L,
        handleContainerDragLeave: B
      })
    });
    return (S, v) => {
      const V = ce("svg-icon");
      return ue(), fa("div", {
        class: nt(["draggable-tree", "border-transparent", {
          "hover-border-color": u.value === a.rootId
        }]),
        onDragover: v[1] || (v[1] = //@ts-ignore
        (...w) => Da(L) && Da(L)(...w)),
        onDragenter: v[2] || (v[2] = //@ts-ignore
        (...w) => Da(L) && Da(L)(...w)),
        onDragleave: v[3] || (v[3] = //@ts-ignore
        (...w) => Da(B) && Da(B)(...w)),
        onDrop: v[4] || (v[4] = (w) => Da(F)(w, {
          id: a.rootId
        }))
      }, [(ue(!0), fa(za, null, tt(h.value, (w, X) => vt((ue(), fa("div", {
        class: nt(["row", "border-transparent", {
          active: String(a.active) === String(w.id),
          "hover-border-color": u.value === w.id
        }]),
        key: w.id,
        draggable: a.draggable ? "true" : void 0,
        onDragstart: (q) => Da(E)(q, w),
        onDragover: (q) => Da(b)(q, w),
        onDragenter: (q) => Da(b)(q, w),
        onDrop: (q) => Da(F)(q, w),
        onDragend: v[0] || (v[0] = //@ts-ignore
        (...q) => Da(G) && Da(G)(...q))
      }, [ea("div", {
        class: "content",
        onClick: (q) => Da(T)(q, w)
      }, [ee(Ca, {
        "line-data": C.value[X],
        level: w.level
      }, null, 8, ["line-data", "level"]), ea("div", {
        class: "prefix-icon",
        onClick: (q) => Da(l)(w)
      }, [w.rawData.isPage ? (ue(), ma(V, {
        key: 0,
        name: Da(i)[w.id] ? "page-collection" : "page"
      }, null, 8, ["name"])) : (ue(), ma(V, {
        key: 1,
        name: Da(i)[w.id] ? "folder" : "folder-wold"
      }, null, 8, ["name"]))], 8, Yt), ea("label", null, Xa(w.label), 1)], 8, Qt), Ct(S.$slots, "row-suffix", {
        node: w
      }, void 0, !0)], 42, zt)), [[Nt, !w.collapsed]])), 128))], 34);
    };
  }
}), ia = /* @__PURE__ */ Fa(Zt, [["__scopeId", "data-v-b6f00a9c"]]), {
  PAGE_STATUS: oa
} = R, $t = {
  components: {
    TinySearch: Et,
    TinyCollapse: rt,
    TinyCollapseItem: ot,
    TinyIconSearch: ta(),
    TinyPopover: wt,
    DraggableTree: ia,
    SvgButton: W
  },
  props: {
    isFolder: {
      type: Boolean,
      default: !1
    }
  },
  emits: ["openSettingPanel", "add", "createPage", "createFolder", "settingHome"],
  setup(a, {
    emit: t
  }) {
    const {
      confirm: n
    } = x(), {
      pageState: e,
      isBlock: s,
      isSaved: i
    } = I(), {
      pageSettingState: o,
      changeTreeData: r,
      isCurrentDataSame: l,
      getPageList: m,
      resetPageData: d,
      STATIC_PAGE_GROUP_ID: D,
      COMMON_PAGE_GROUP_ID: c,
      switchPage: y
    } = A(), {
      fetchPageDetail: h,
      requestUpdatePage: _
    } = M, C = g(() => p(P.GlobalService).getBaseInfo().id, {
      metaData: {
        id: "engine.plugins.appmanage.PageTree.getAppId"
      },
      ctx: () => ({
        props: a,
        emit: t,
        confirm: n,
        pageState: e,
        isBlock: s,
        isSaved: i,
        pageSettingState: o,
        changeTreeData: r,
        isCurrentDataSame: l,
        getPageList: m,
        resetPageData: d,
        STATIC_PAGE_GROUP_ID: D,
        COMMON_PAGE_GROUP_ID: c,
        switchPageById: y,
        fetchPageDetail: h,
        requestUpdatePage: _,
        getAppId: C,
        customPageOperations: T,
        state: N,
        subscribe: u,
        unsubscribe: E,
        refreshPageList: b,
        subscriber: F,
        switchPage: G,
        nodeClick: L,
        openSettingPanel: B,
        popoverRefs: S,
        setPopoverRef: v,
        handleClickRow: V,
        isPageLocked: w,
        handleClickPageSettings: X,
        createPage: q,
        createFolder: te,
        settingHome: ae,
        rowOperations: $,
        getRowOperations: ne,
        updatePage: oe,
        updateFolder: re,
        handleMoveNode: ge,
        createPublicPage: Ze,
        IconFolderOpened: sa,
        IconFolderClosed: na,
        IconSearch: ta,
        useCanvas: I,
        useModal: x,
        usePage: A,
        useNotify: f,
        useMessage: se,
        getMetaApi: p,
        getOptions: Y,
        META_SERVICE: P,
        isEqual: O,
        getCanvasStatus: Z,
        handlePageUpdate: le,
        constants: R,
        closePageSettingPanel: K,
        closeFolderSettingPanel: ie,
        http: M,
        DraggableTree: ia,
        SvgButton: W,
        meta: Q,
        PAGE_STATUS: oa
      })
    }), {
      customPageOperations: T = []
    } = Y(Q.id), N = Ga({
      pageSearchValue: "",
      collapseValue: [D, c],
      currentNodeData: {
        id: p(P.GlobalService).getBaseInfo().pageId
      }
    }), {
      subscribe: u,
      unsubscribe: E
    } = se(), b = g((k) => m(k), {
      metaData: {
        id: "engine.plugins.appmanage.PageTree.refreshPageList"
      },
      ctx: () => ({
        props: a,
        emit: t,
        confirm: n,
        pageState: e,
        isBlock: s,
        isSaved: i,
        pageSettingState: o,
        changeTreeData: r,
        isCurrentDataSame: l,
        getPageList: m,
        resetPageData: d,
        STATIC_PAGE_GROUP_ID: D,
        COMMON_PAGE_GROUP_ID: c,
        switchPageById: y,
        fetchPageDetail: h,
        requestUpdatePage: _,
        getAppId: C,
        customPageOperations: T,
        state: N,
        subscribe: u,
        unsubscribe: E,
        refreshPageList: b,
        subscriber: F,
        switchPage: G,
        nodeClick: L,
        openSettingPanel: B,
        popoverRefs: S,
        setPopoverRef: v,
        handleClickRow: V,
        isPageLocked: w,
        handleClickPageSettings: X,
        createPage: q,
        createFolder: te,
        settingHome: ae,
        rowOperations: $,
        getRowOperations: ne,
        updatePage: oe,
        updateFolder: re,
        handleMoveNode: ge,
        createPublicPage: Ze,
        IconFolderOpened: sa,
        IconFolderClosed: na,
        IconSearch: ta,
        useCanvas: I,
        useModal: x,
        usePage: A,
        useNotify: f,
        useMessage: se,
        getMetaApi: p,
        getOptions: Y,
        META_SERVICE: P,
        isEqual: O,
        getCanvasStatus: Z,
        handlePageUpdate: le,
        constants: R,
        closePageSettingPanel: K,
        closeFolderSettingPanel: ie,
        http: M,
        DraggableTree: ia,
        SvgButton: W,
        meta: Q,
        PAGE_STATUS: oa
      })
    });
    let F = null;
    xt(g(() => {
      b(C()), F = u({
        topic: "locationHistoryChanged",
        callback: (k) => {
          k.pageId ? N.currentNodeData = {
            id: k.pageId
          } : s() && (N.currentNodeData = {});
        },
        subscriber: "pageTree"
      });
    }, {
      metaData: {
        id: "engine.plugins.appmanage.PageTree.onMounted[0]"
      },
      ctx: () => ({
        props: a,
        emit: t,
        confirm: n,
        pageState: e,
        isBlock: s,
        isSaved: i,
        pageSettingState: o,
        changeTreeData: r,
        isCurrentDataSame: l,
        getPageList: m,
        resetPageData: d,
        STATIC_PAGE_GROUP_ID: D,
        COMMON_PAGE_GROUP_ID: c,
        switchPageById: y,
        fetchPageDetail: h,
        requestUpdatePage: _,
        getAppId: C,
        customPageOperations: T,
        state: N,
        subscribe: u,
        unsubscribe: E,
        refreshPageList: b,
        subscriber: F,
        switchPage: G,
        nodeClick: L,
        openSettingPanel: B,
        popoverRefs: S,
        setPopoverRef: v,
        handleClickRow: V,
        isPageLocked: w,
        handleClickPageSettings: X,
        createPage: q,
        createFolder: te,
        settingHome: ae,
        rowOperations: $,
        getRowOperations: ne,
        updatePage: oe,
        updateFolder: re,
        handleMoveNode: ge,
        createPublicPage: Ze,
        IconFolderOpened: sa,
        IconFolderClosed: na,
        IconSearch: ta,
        useCanvas: I,
        useModal: x,
        usePage: A,
        useNotify: f,
        useMessage: se,
        getMetaApi: p,
        getOptions: Y,
        META_SERVICE: P,
        isEqual: O,
        getCanvasStatus: Z,
        handlePageUpdate: le,
        constants: R,
        closePageSettingPanel: K,
        closeFolderSettingPanel: ie,
        http: M,
        DraggableTree: ia,
        SvgButton: W,
        meta: Q,
        PAGE_STATUS: oa
      })
    })), ut(g(() => {
      F && E(F);
    }, {
      metaData: {
        id: "engine.plugins.appmanage.PageTree.onUnmounted[0]"
      },
      ctx: () => ({
        props: a,
        emit: t,
        confirm: n,
        pageState: e,
        isBlock: s,
        isSaved: i,
        pageSettingState: o,
        changeTreeData: r,
        isCurrentDataSame: l,
        getPageList: m,
        resetPageData: d,
        STATIC_PAGE_GROUP_ID: D,
        COMMON_PAGE_GROUP_ID: c,
        switchPageById: y,
        fetchPageDetail: h,
        requestUpdatePage: _,
        getAppId: C,
        customPageOperations: T,
        state: N,
        subscribe: u,
        unsubscribe: E,
        refreshPageList: b,
        subscriber: F,
        switchPage: G,
        nodeClick: L,
        openSettingPanel: B,
        popoverRefs: S,
        setPopoverRef: v,
        handleClickRow: V,
        isPageLocked: w,
        handleClickPageSettings: X,
        createPage: q,
        createFolder: te,
        settingHome: ae,
        rowOperations: $,
        getRowOperations: ne,
        updatePage: oe,
        updateFolder: re,
        handleMoveNode: ge,
        createPublicPage: Ze,
        IconFolderOpened: sa,
        IconFolderClosed: na,
        IconSearch: ta,
        useCanvas: I,
        useModal: x,
        usePage: A,
        useNotify: f,
        useMessage: se,
        getMetaApi: p,
        getOptions: Y,
        META_SERVICE: P,
        isEqual: O,
        getCanvasStatus: Z,
        handlePageUpdate: le,
        constants: R,
        closePageSettingPanel: K,
        closeFolderSettingPanel: ie,
        http: M,
        DraggableTree: ia,
        SvgButton: W,
        meta: Q,
        PAGE_STATUS: oa
      })
    })), o.updateTreeData = async () => await b(C());
    const G = g((k) => {
      N.currentNodeData = k, y(k.id).then(() => {
        K(), ie();
      });
    }, {
      metaData: {
        id: "engine.plugins.appmanage.PageTree.switchPage"
      },
      ctx: () => ({
        props: a,
        emit: t,
        confirm: n,
        pageState: e,
        isBlock: s,
        isSaved: i,
        pageSettingState: o,
        changeTreeData: r,
        isCurrentDataSame: l,
        getPageList: m,
        resetPageData: d,
        STATIC_PAGE_GROUP_ID: D,
        COMMON_PAGE_GROUP_ID: c,
        switchPageById: y,
        fetchPageDetail: h,
        requestUpdatePage: _,
        getAppId: C,
        customPageOperations: T,
        state: N,
        subscribe: u,
        unsubscribe: E,
        refreshPageList: b,
        subscriber: F,
        switchPage: G,
        nodeClick: L,
        openSettingPanel: B,
        popoverRefs: S,
        setPopoverRef: v,
        handleClickRow: V,
        isPageLocked: w,
        handleClickPageSettings: X,
        createPage: q,
        createFolder: te,
        settingHome: ae,
        rowOperations: $,
        getRowOperations: ne,
        updatePage: oe,
        updateFolder: re,
        handleMoveNode: ge,
        createPublicPage: Ze,
        IconFolderOpened: sa,
        IconFolderClosed: na,
        IconSearch: ta,
        useCanvas: I,
        useModal: x,
        usePage: A,
        useNotify: f,
        useMessage: se,
        getMetaApi: p,
        getOptions: Y,
        META_SERVICE: P,
        isEqual: O,
        getCanvasStatus: Z,
        handlePageUpdate: le,
        constants: R,
        closePageSettingPanel: K,
        closeFolderSettingPanel: ie,
        http: M,
        DraggableTree: ia,
        SvgButton: W,
        meta: Q,
        PAGE_STATUS: oa
      })
    }), L = g((k, J) => {
      var fe;
      k == null || k.stopPropagation();
      const {
        id: z,
        isPage: me
      } = J;
      !s() && z === ((fe = N == null ? void 0 : N.currentNodeData) == null ? void 0 : fe.id) || !me || (i() && l() ? G(J) : n({
        title: "提示",
        message: `${s() ? "区块" : "页面"}尚未保存，是否要继续切换?`,
        exec: () => {
          r(o.oldParentId, o.currentPageData.parentId), Object.assign(o.currentPageData, o.currentPageDataCopy), G(J);
        }
      }));
    }, {
      metaData: {
        id: "engine.plugins.appmanage.PageTree.nodeClick"
      },
      ctx: () => ({
        props: a,
        emit: t,
        confirm: n,
        pageState: e,
        isBlock: s,
        isSaved: i,
        pageSettingState: o,
        changeTreeData: r,
        isCurrentDataSame: l,
        getPageList: m,
        resetPageData: d,
        STATIC_PAGE_GROUP_ID: D,
        COMMON_PAGE_GROUP_ID: c,
        switchPageById: y,
        fetchPageDetail: h,
        requestUpdatePage: _,
        getAppId: C,
        customPageOperations: T,
        state: N,
        subscribe: u,
        unsubscribe: E,
        refreshPageList: b,
        subscriber: F,
        switchPage: G,
        nodeClick: L,
        openSettingPanel: B,
        popoverRefs: S,
        setPopoverRef: v,
        handleClickRow: V,
        isPageLocked: w,
        handleClickPageSettings: X,
        createPage: q,
        createFolder: te,
        settingHome: ae,
        rowOperations: $,
        getRowOperations: ne,
        updatePage: oe,
        updateFolder: re,
        handleMoveNode: ge,
        createPublicPage: Ze,
        IconFolderOpened: sa,
        IconFolderClosed: na,
        IconSearch: ta,
        useCanvas: I,
        useModal: x,
        usePage: A,
        useNotify: f,
        useMessage: se,
        getMetaApi: p,
        getOptions: Y,
        META_SERVICE: P,
        isEqual: O,
        getCanvasStatus: Z,
        handlePageUpdate: le,
        constants: R,
        closePageSettingPanel: K,
        closeFolderSettingPanel: ie,
        http: M,
        DraggableTree: ia,
        SvgButton: W,
        meta: Q,
        PAGE_STATUS: oa
      })
    }), B = g((k, J, z) => {
      var me;
      if (k == null || k.stopPropagation(), z && J.isPage) {
        const fe = ((me = J.occupier) == null ? void 0 : me.username) || "";
        x().message({
          message: `您点击的页面被${fe}锁定，暂时无法编辑，请联系解锁`
        });
        return;
      }
      O(o.currentPageData, o.currentPageDataCopy) ? t("openSettingPanel", J) : n({
        title: "提示",
        message: `当前页面或文件夹${o.currentPageData.name}尚未保存，是否要继续切换?`,
        exec: () => {
          r(o.oldParentId, o.currentPageData.parentId), Object.assign(o.currentPageData, o.currentPageDataCopy), t("openSettingPanel", J);
        }
      });
    }, {
      metaData: {
        id: "engine.plugins.appmanage.PageTree.openSettingPanel"
      },
      ctx: () => ({
        props: a,
        emit: t,
        confirm: n,
        pageState: e,
        isBlock: s,
        isSaved: i,
        pageSettingState: o,
        changeTreeData: r,
        isCurrentDataSame: l,
        getPageList: m,
        resetPageData: d,
        STATIC_PAGE_GROUP_ID: D,
        COMMON_PAGE_GROUP_ID: c,
        switchPageById: y,
        fetchPageDetail: h,
        requestUpdatePage: _,
        getAppId: C,
        customPageOperations: T,
        state: N,
        subscribe: u,
        unsubscribe: E,
        refreshPageList: b,
        subscriber: F,
        switchPage: G,
        nodeClick: L,
        openSettingPanel: B,
        popoverRefs: S,
        setPopoverRef: v,
        handleClickRow: V,
        handleClickPageSettings: X,
        createPage: q,
        createFolder: te,
        settingHome: ae,
        rowOperations: $,
        getRowOperations: ne,
        updatePage: oe,
        updateFolder: re,
        handleMoveNode: ge,
        createPublicPage: Ze,
        IconFolderOpened: sa,
        IconFolderClosed: na,
        IconSearch: ta,
        useCanvas: I,
        useModal: x,
        usePage: A,
        useNotify: f,
        useMessage: se,
        getMetaApi: p,
        getOptions: Y,
        META_SERVICE: P,
        isEqual: O,
        getCanvasStatus: Z,
        handlePageUpdate: le,
        constants: R,
        closePageSettingPanel: K,
        closeFolderSettingPanel: ie,
        http: M,
        DraggableTree: ia,
        SvgButton: W,
        meta: Q,
        PAGE_STATUS: oa
      })
    }), S = {}, v = g((k, J) => {
      S[J] = k;
    }, {
      metaData: {
        id: "engine.plugins.appmanage.PageTree.setPopoverRef"
      },
      ctx: () => ({
        props: a,
        emit: t,
        confirm: n,
        pageState: e,
        isBlock: s,
        isSaved: i,
        pageSettingState: o,
        changeTreeData: r,
        isCurrentDataSame: l,
        getPageList: m,
        resetPageData: d,
        STATIC_PAGE_GROUP_ID: D,
        COMMON_PAGE_GROUP_ID: c,
        switchPageById: y,
        fetchPageDetail: h,
        requestUpdatePage: _,
        getAppId: C,
        customPageOperations: T,
        state: N,
        subscribe: u,
        unsubscribe: E,
        refreshPageList: b,
        subscriber: F,
        switchPage: G,
        nodeClick: L,
        openSettingPanel: B,
        popoverRefs: S,
        setPopoverRef: v,
        handleClickRow: V,
        isPageLocked: w,
        handleClickPageSettings: X,
        createPage: q,
        createFolder: te,
        settingHome: ae,
        rowOperations: $,
        getRowOperations: ne,
        updatePage: oe,
        updateFolder: re,
        handleMoveNode: ge,
        createPublicPage: Ze,
        IconFolderOpened: sa,
        IconFolderClosed: na,
        IconSearch: ta,
        useCanvas: I,
        useModal: x,
        usePage: A,
        useNotify: f,
        useMessage: se,
        getMetaApi: p,
        getOptions: Y,
        META_SERVICE: P,
        isEqual: O,
        getCanvasStatus: Z,
        handlePageUpdate: le,
        constants: R,
        closePageSettingPanel: K,
        closeFolderSettingPanel: ie,
        http: M,
        DraggableTree: ia,
        SvgButton: W,
        meta: Q,
        PAGE_STATUS: oa
      })
    }), V = g((k) => {
      L(null, k.rawData);
    }, {
      metaData: {
        id: "engine.plugins.appmanage.PageTree.handleClickRow"
      },
      ctx: () => ({
        props: a,
        emit: t,
        confirm: n,
        pageState: e,
        isBlock: s,
        isSaved: i,
        pageSettingState: o,
        changeTreeData: r,
        isCurrentDataSame: l,
        getPageList: m,
        resetPageData: d,
        STATIC_PAGE_GROUP_ID: D,
        COMMON_PAGE_GROUP_ID: c,
        switchPageById: y,
        fetchPageDetail: h,
        requestUpdatePage: _,
        getAppId: C,
        customPageOperations: T,
        state: N,
        subscribe: u,
        unsubscribe: E,
        refreshPageList: b,
        subscriber: F,
        switchPage: G,
        nodeClick: L,
        openSettingPanel: B,
        popoverRefs: S,
        setPopoverRef: v,
        handleClickRow: V,
        isPageLocked: w,
        handleClickPageSettings: X,
        createPage: q,
        createFolder: te,
        settingHome: ae,
        rowOperations: $,
        getRowOperations: ne,
        updatePage: oe,
        updateFolder: re,
        handleMoveNode: ge,
        createPublicPage: Ze,
        IconFolderOpened: sa,
        IconFolderClosed: na,
        IconSearch: ta,
        useCanvas: I,
        useModal: x,
        usePage: A,
        useNotify: f,
        useMessage: se,
        getMetaApi: p,
        getOptions: Y,
        META_SERVICE: P,
        isEqual: O,
        getCanvasStatus: Z,
        handlePageUpdate: le,
        constants: R,
        closePageSettingPanel: K,
        closeFolderSettingPanel: ie,
        http: M,
        DraggableTree: ia,
        SvgButton: W,
        meta: Q,
        PAGE_STATUS: oa
      })
    }), w = g((k) => Z(k.occupier).state === oa.Lock, {
      metaData: {
        id: "engine.plugins.appmanage.PageTree.isPageLocked"
      },
      ctx: () => ({
        props: a,
        emit: t,
        confirm: n,
        pageState: e,
        isBlock: s,
        isSaved: i,
        pageSettingState: o,
        changeTreeData: r,
        isCurrentDataSame: l,
        getPageList: m,
        resetPageData: d,
        STATIC_PAGE_GROUP_ID: D,
        COMMON_PAGE_GROUP_ID: c,
        switchPageById: y,
        fetchPageDetail: h,
        requestUpdatePage: _,
        getAppId: C,
        customPageOperations: T,
        state: N,
        subscribe: u,
        unsubscribe: E,
        refreshPageList: b,
        subscriber: F,
        switchPage: G,
        nodeClick: L,
        openSettingPanel: B,
        popoverRefs: S,
        setPopoverRef: v,
        handleClickRow: V,
        isPageLocked: w,
        handleClickPageSettings: X,
        createPage: q,
        createFolder: te,
        settingHome: ae,
        rowOperations: $,
        getRowOperations: ne,
        updatePage: oe,
        updateFolder: re,
        handleMoveNode: ge,
        createPublicPage: Ze,
        IconFolderOpened: sa,
        IconFolderClosed: na,
        IconSearch: ta,
        useCanvas: I,
        useModal: x,
        usePage: A,
        useNotify: f,
        useMessage: se,
        getMetaApi: p,
        getOptions: Y,
        META_SERVICE: P,
        isEqual: O,
        getCanvasStatus: Z,
        handlePageUpdate: le,
        constants: R,
        closePageSettingPanel: K,
        closeFolderSettingPanel: ie,
        http: M,
        DraggableTree: ia,
        SvgButton: W,
        meta: Q,
        PAGE_STATUS: oa
      })
    }), X = g((k) => {
      B(null, k.rawData, w(k.rawData));
    }, {
      metaData: {
        id: "engine.plugins.appmanage.PageTree.handleClickPageSettings"
      },
      ctx: () => ({
        props: a,
        emit: t,
        confirm: n,
        pageState: e,
        isBlock: s,
        isSaved: i,
        pageSettingState: o,
        changeTreeData: r,
        isCurrentDataSame: l,
        getPageList: m,
        resetPageData: d,
        STATIC_PAGE_GROUP_ID: D,
        COMMON_PAGE_GROUP_ID: c,
        switchPageById: y,
        fetchPageDetail: h,
        requestUpdatePage: _,
        getAppId: C,
        customPageOperations: T,
        state: N,
        subscribe: u,
        unsubscribe: E,
        refreshPageList: b,
        subscriber: F,
        switchPage: G,
        nodeClick: L,
        openSettingPanel: B,
        popoverRefs: S,
        setPopoverRef: v,
        handleClickRow: V,
        isPageLocked: w,
        handleClickPageSettings: X,
        createPage: q,
        createFolder: te,
        settingHome: ae,
        rowOperations: $,
        getRowOperations: ne,
        updatePage: oe,
        updateFolder: re,
        handleMoveNode: ge,
        createPublicPage: Ze,
        IconFolderOpened: sa,
        IconFolderClosed: na,
        IconSearch: ta,
        useCanvas: I,
        useModal: x,
        usePage: A,
        useNotify: f,
        useMessage: se,
        getMetaApi: p,
        getOptions: Y,
        META_SERVICE: P,
        isEqual: O,
        getCanvasStatus: Z,
        handlePageUpdate: le,
        constants: R,
        closePageSettingPanel: K,
        closeFolderSettingPanel: ie,
        http: M,
        DraggableTree: ia,
        SvgButton: W,
        meta: Q,
        PAGE_STATUS: oa
      })
    }), q = g((k) => {
      t("createPage", "staticPages", k.id);
    }, {
      metaData: {
        id: "engine.plugins.appmanage.PageTree.createPage"
      },
      ctx: () => ({
        props: a,
        emit: t,
        confirm: n,
        pageState: e,
        isBlock: s,
        isSaved: i,
        pageSettingState: o,
        changeTreeData: r,
        isCurrentDataSame: l,
        getPageList: m,
        resetPageData: d,
        STATIC_PAGE_GROUP_ID: D,
        COMMON_PAGE_GROUP_ID: c,
        switchPageById: y,
        fetchPageDetail: h,
        requestUpdatePage: _,
        getAppId: C,
        customPageOperations: T,
        state: N,
        subscribe: u,
        unsubscribe: E,
        refreshPageList: b,
        subscriber: F,
        switchPage: G,
        nodeClick: L,
        openSettingPanel: B,
        popoverRefs: S,
        setPopoverRef: v,
        handleClickRow: V,
        isPageLocked: w,
        handleClickPageSettings: X,
        createPage: q,
        createFolder: te,
        settingHome: ae,
        rowOperations: $,
        getRowOperations: ne,
        updatePage: oe,
        updateFolder: re,
        handleMoveNode: ge,
        createPublicPage: Ze,
        IconFolderOpened: sa,
        IconFolderClosed: na,
        IconSearch: ta,
        useCanvas: I,
        useModal: x,
        usePage: A,
        useNotify: f,
        useMessage: se,
        getMetaApi: p,
        getOptions: Y,
        META_SERVICE: P,
        isEqual: O,
        getCanvasStatus: Z,
        handlePageUpdate: le,
        constants: R,
        closePageSettingPanel: K,
        closeFolderSettingPanel: ie,
        http: M,
        DraggableTree: ia,
        SvgButton: W,
        meta: Q,
        PAGE_STATUS: oa
      })
    }), te = g((k) => {
      t("createFolder", k.id);
    }, {
      metaData: {
        id: "engine.plugins.appmanage.PageTree.createFolder"
      },
      ctx: () => ({
        props: a,
        emit: t,
        confirm: n,
        pageState: e,
        isBlock: s,
        isSaved: i,
        pageSettingState: o,
        changeTreeData: r,
        isCurrentDataSame: l,
        getPageList: m,
        resetPageData: d,
        STATIC_PAGE_GROUP_ID: D,
        COMMON_PAGE_GROUP_ID: c,
        switchPageById: y,
        fetchPageDetail: h,
        requestUpdatePage: _,
        getAppId: C,
        customPageOperations: T,
        state: N,
        subscribe: u,
        unsubscribe: E,
        refreshPageList: b,
        subscriber: F,
        switchPage: G,
        nodeClick: L,
        openSettingPanel: B,
        popoverRefs: S,
        setPopoverRef: v,
        handleClickRow: V,
        isPageLocked: w,
        handleClickPageSettings: X,
        createPage: q,
        createFolder: te,
        settingHome: ae,
        rowOperations: $,
        getRowOperations: ne,
        updatePage: oe,
        updateFolder: re,
        handleMoveNode: ge,
        createPublicPage: Ze,
        IconFolderOpened: sa,
        IconFolderClosed: na,
        IconSearch: ta,
        useCanvas: I,
        useModal: x,
        usePage: A,
        useNotify: f,
        useMessage: se,
        getMetaApi: p,
        getOptions: Y,
        META_SERVICE: P,
        isEqual: O,
        getCanvasStatus: Z,
        handlePageUpdate: le,
        constants: R,
        closePageSettingPanel: K,
        closeFolderSettingPanel: ie,
        http: M,
        DraggableTree: ia,
        SvgButton: W,
        meta: Q,
        PAGE_STATUS: oa
      })
    }), ae = g((k) => {
      t("settingHome", k);
    }, {
      metaData: {
        id: "engine.plugins.appmanage.PageTree.settingHome"
      },
      ctx: () => ({
        props: a,
        emit: t,
        confirm: n,
        pageState: e,
        isBlock: s,
        isSaved: i,
        pageSettingState: o,
        changeTreeData: r,
        isCurrentDataSame: l,
        getPageList: m,
        resetPageData: d,
        STATIC_PAGE_GROUP_ID: D,
        COMMON_PAGE_GROUP_ID: c,
        switchPageById: y,
        fetchPageDetail: h,
        requestUpdatePage: _,
        getAppId: C,
        customPageOperations: T,
        state: N,
        subscribe: u,
        unsubscribe: E,
        refreshPageList: b,
        subscriber: F,
        switchPage: G,
        nodeClick: L,
        openSettingPanel: B,
        popoverRefs: S,
        setPopoverRef: v,
        handleClickRow: V,
        isPageLocked: w,
        handleClickPageSettings: X,
        createPage: q,
        createFolder: te,
        settingHome: ae,
        rowOperations: $,
        getRowOperations: ne,
        updatePage: oe,
        updateFolder: re,
        handleMoveNode: ge,
        createPublicPage: Ze,
        IconFolderOpened: sa,
        IconFolderClosed: na,
        IconSearch: ta,
        useCanvas: I,
        useModal: x,
        usePage: A,
        useNotify: f,
        useMessage: se,
        getMetaApi: p,
        getOptions: Y,
        META_SERVICE: P,
        isEqual: O,
        getCanvasStatus: Z,
        handlePageUpdate: le,
        constants: R,
        closePageSettingPanel: K,
        closeFolderSettingPanel: ie,
        http: M,
        DraggableTree: ia,
        SvgButton: W,
        meta: Q,
        PAGE_STATUS: oa
      })
    }), $ = [
      {
        type: "settings",
        label: "设置",
        action: X
      },
      {
        type: "divider"
      },
      {
        type: "createPage",
        label: "新建子页面",
        action: q
      },
      {
        type: "createFolder",
        label: "新建子文件夹",
        action: te
      },
      {
        type: "settingHome",
        label: "设置为主页",
        action: ae
      },
      ...T
      // TODO 复制和删除的逻辑耦合在其他组件内，暂时屏蔽
      // { type: 'divider' },
      // { type: 'copy', label: '复制页面', action: copyPage },
      // { type: 'delete', label: '删除', class: ['danger'], action: deleteNode }
    ].map((k) => ({
      ...k,
      action: (J) => {
        var z, me, fe;
        (z = k.action) == null || z.call(k, J, t), (fe = (me = S[J.id]) == null ? void 0 : me.doClose) == null || fe.call(me);
      }
    })), ne = g((k, J) => k === c ? $.slice(0, 1) : !J.rawData.isPage || J.rawData.group === "public" ? $.filter((z) => z.type !== "settingHome") : $, {
      metaData: {
        id: "engine.plugins.appmanage.PageTree.getRowOperations"
      },
      ctx: () => ({
        props: a,
        emit: t,
        confirm: n,
        pageState: e,
        isBlock: s,
        isSaved: i,
        pageSettingState: o,
        changeTreeData: r,
        isCurrentDataSame: l,
        getPageList: m,
        resetPageData: d,
        STATIC_PAGE_GROUP_ID: D,
        COMMON_PAGE_GROUP_ID: c,
        switchPageById: y,
        fetchPageDetail: h,
        requestUpdatePage: _,
        getAppId: C,
        customPageOperations: T,
        state: N,
        subscribe: u,
        unsubscribe: E,
        refreshPageList: b,
        subscriber: F,
        switchPage: G,
        nodeClick: L,
        openSettingPanel: B,
        popoverRefs: S,
        setPopoverRef: v,
        handleClickRow: V,
        isPageLocked: w,
        handleClickPageSettings: X,
        createPage: q,
        createFolder: te,
        settingHome: ae,
        rowOperations: $,
        getRowOperations: ne,
        updatePage: oe,
        updateFolder: re,
        handleMoveNode: ge,
        createPublicPage: Ze,
        IconFolderOpened: sa,
        IconFolderClosed: na,
        IconSearch: ta,
        useCanvas: I,
        useModal: x,
        usePage: A,
        useNotify: f,
        useMessage: se,
        getMetaApi: p,
        getOptions: Y,
        META_SERVICE: P,
        isEqual: O,
        getCanvasStatus: Z,
        handlePageUpdate: le,
        constants: R,
        closePageSettingPanel: K,
        closeFolderSettingPanel: ie,
        http: M,
        DraggableTree: ia,
        SvgButton: W,
        meta: Q,
        PAGE_STATUS: oa
      })
    }), oe = g((k) => {
      var Qa;
      const {
        id: J,
        name: z,
        page_content: me
      } = k, fe = {
        ...k,
        page_content: {
          ...me,
          fileName: z
        }
      }, _a = ((Qa = e == null ? void 0 : e.currentPage) == null ? void 0 : Qa.id) === J;
      return le({
        id: J,
        params: fe,
        isCurEditPage: _a
      });
    }, {
      metaData: {
        id: "engine.plugins.appmanage.PageTree.updatePage"
      },
      ctx: () => ({
        props: a,
        emit: t,
        confirm: n,
        pageState: e,
        isBlock: s,
        isSaved: i,
        pageSettingState: o,
        changeTreeData: r,
        isCurrentDataSame: l,
        getPageList: m,
        resetPageData: d,
        STATIC_PAGE_GROUP_ID: D,
        COMMON_PAGE_GROUP_ID: c,
        switchPageById: y,
        fetchPageDetail: h,
        requestUpdatePage: _,
        getAppId: C,
        customPageOperations: T,
        state: N,
        subscribe: u,
        unsubscribe: E,
        refreshPageList: b,
        subscriber: F,
        switchPage: G,
        nodeClick: L,
        openSettingPanel: B,
        popoverRefs: S,
        setPopoverRef: v,
        handleClickRow: V,
        isPageLocked: w,
        handleClickPageSettings: X,
        createPage: q,
        createFolder: te,
        settingHome: ae,
        rowOperations: $,
        getRowOperations: ne,
        updatePage: oe,
        updateFolder: re,
        handleMoveNode: ge,
        createPublicPage: Ze,
        IconFolderOpened: sa,
        IconFolderClosed: na,
        IconSearch: ta,
        useCanvas: I,
        useModal: x,
        usePage: A,
        useNotify: f,
        useMessage: se,
        getMetaApi: p,
        getOptions: Y,
        META_SERVICE: P,
        isEqual: O,
        getCanvasStatus: Z,
        handlePageUpdate: le,
        constants: R,
        closePageSettingPanel: K,
        closeFolderSettingPanel: ie,
        http: M,
        DraggableTree: ia,
        SvgButton: W,
        meta: Q,
        PAGE_STATUS: oa
      })
    }), re = g((k) => {
      const {
        id: J
      } = k;
      return _(J, {
        ...k,
        page_content: null
      }).then(() => {
        f({
          type: "success",
          message: "更新文件夹成功!"
        });
      }).catch((z) => {
        f({
          type: "error",
          title: "更新文件夹失败",
          message: JSON.stringify((z == null ? void 0 : z.message) || z)
        });
      }).finally(() => {
        o.updateTreeData(), o.isNew = !1;
      });
    }, {
      metaData: {
        id: "engine.plugins.appmanage.PageTree.updateFolder"
      },
      ctx: () => ({
        props: a,
        emit: t,
        confirm: n,
        pageState: e,
        isBlock: s,
        isSaved: i,
        pageSettingState: o,
        changeTreeData: r,
        isCurrentDataSame: l,
        getPageList: m,
        resetPageData: d,
        STATIC_PAGE_GROUP_ID: D,
        COMMON_PAGE_GROUP_ID: c,
        switchPageById: y,
        fetchPageDetail: h,
        requestUpdatePage: _,
        getAppId: C,
        customPageOperations: T,
        state: N,
        subscribe: u,
        unsubscribe: E,
        refreshPageList: b,
        subscriber: F,
        switchPage: G,
        nodeClick: L,
        openSettingPanel: B,
        popoverRefs: S,
        setPopoverRef: v,
        handleClickRow: V,
        isPageLocked: w,
        handleClickPageSettings: X,
        createPage: q,
        createFolder: te,
        settingHome: ae,
        rowOperations: $,
        getRowOperations: ne,
        updatePage: oe,
        updateFolder: re,
        handleMoveNode: ge,
        createPublicPage: Ze,
        IconFolderOpened: sa,
        IconFolderClosed: na,
        IconSearch: ta,
        useCanvas: I,
        useModal: x,
        usePage: A,
        useNotify: f,
        useMessage: se,
        getMetaApi: p,
        getOptions: Y,
        META_SERVICE: P,
        isEqual: O,
        getCanvasStatus: Z,
        handlePageUpdate: le,
        constants: R,
        closePageSettingPanel: K,
        closeFolderSettingPanel: ie,
        http: M,
        DraggableTree: ia,
        SvgButton: W,
        meta: Q,
        PAGE_STATUS: oa
      })
    }), ge = g((k, J) => {
      O(o.currentPageData, o.currentPageDataCopy) ? (K(), ie(), o.currentPageData.id = k.id, r(J.id, k.parentId), d(), h(k.id).then((z) => {
        z.parentId = J.id, z.isPage ? (z.isDefault = !1, oe(z)) : re(z);
      }).catch((z) => {
        f({
          type: "error",
          title: "移动页面文件/文件夹失败",
          message: JSON.stringify((z == null ? void 0 : z.message) || z)
        });
      })) : n({
        title: "提示",
        message: "更改尚未保存，是否要放弃这些更改？",
        exec: () => {
          o.isNew || (r(o.oldParentId, o.currentPageData.parentId), Object.assign(o.currentPageData, o.currentPageDataCopy)), K();
        }
      });
    }, {
      metaData: {
        id: "engine.plugins.appmanage.PageTree.handleMoveNode"
      },
      ctx: () => ({
        props: a,
        emit: t,
        confirm: n,
        pageState: e,
        isBlock: s,
        isSaved: i,
        pageSettingState: o,
        changeTreeData: r,
        isCurrentDataSame: l,
        getPageList: m,
        resetPageData: d,
        STATIC_PAGE_GROUP_ID: D,
        COMMON_PAGE_GROUP_ID: c,
        switchPageById: y,
        fetchPageDetail: h,
        requestUpdatePage: _,
        getAppId: C,
        customPageOperations: T,
        state: N,
        subscribe: u,
        unsubscribe: E,
        refreshPageList: b,
        subscriber: F,
        switchPage: G,
        nodeClick: L,
        openSettingPanel: B,
        popoverRefs: S,
        setPopoverRef: v,
        handleClickRow: V,
        isPageLocked: w,
        handleClickPageSettings: X,
        createPage: q,
        createFolder: te,
        settingHome: ae,
        rowOperations: $,
        getRowOperations: ne,
        updatePage: oe,
        updateFolder: re,
        handleMoveNode: ge,
        createPublicPage: Ze,
        IconFolderOpened: sa,
        IconFolderClosed: na,
        IconSearch: ta,
        useCanvas: I,
        useModal: x,
        usePage: A,
        useNotify: f,
        useMessage: se,
        getMetaApi: p,
        getOptions: Y,
        META_SERVICE: P,
        isEqual: O,
        getCanvasStatus: Z,
        handlePageUpdate: le,
        constants: R,
        closePageSettingPanel: K,
        closeFolderSettingPanel: ie,
        http: M,
        DraggableTree: ia,
        SvgButton: W,
        meta: Q,
        PAGE_STATUS: oa
      })
    });
    se().subscribe({
      topic: "app_id_changed",
      subscriber: "page_tree_app_id_changed",
      callback: (k) => {
        b(k);
      }
    });
    const Ze = g((k) => {
      k.stopPropagation(), k.preventDefault(), t("add");
    }, {
      metaData: {
        id: "engine.plugins.appmanage.PageTree.createPublicPage"
      },
      ctx: () => ({
        props: a,
        emit: t,
        confirm: n,
        pageState: e,
        isBlock: s,
        isSaved: i,
        pageSettingState: o,
        changeTreeData: r,
        isCurrentDataSame: l,
        getPageList: m,
        resetPageData: d,
        STATIC_PAGE_GROUP_ID: D,
        COMMON_PAGE_GROUP_ID: c,
        switchPageById: y,
        fetchPageDetail: h,
        requestUpdatePage: _,
        getAppId: C,
        customPageOperations: T,
        state: N,
        subscribe: u,
        unsubscribe: E,
        refreshPageList: b,
        subscriber: F,
        switchPage: G,
        nodeClick: L,
        openSettingPanel: B,
        popoverRefs: S,
        setPopoverRef: v,
        handleClickRow: V,
        isPageLocked: w,
        handleClickPageSettings: X,
        createPage: q,
        createFolder: te,
        settingHome: ae,
        rowOperations: $,
        getRowOperations: ne,
        updatePage: oe,
        updateFolder: re,
        handleMoveNode: ge,
        createPublicPage: Ze,
        IconFolderOpened: sa,
        IconFolderClosed: na,
        IconSearch: ta,
        useCanvas: I,
        useModal: x,
        usePage: A,
        useNotify: f,
        useMessage: se,
        getMetaApi: p,
        getOptions: Y,
        META_SERVICE: P,
        isEqual: O,
        getCanvasStatus: Z,
        handlePageUpdate: le,
        constants: R,
        closePageSettingPanel: K,
        closeFolderSettingPanel: ie,
        http: M,
        DraggableTree: ia,
        SvgButton: W,
        meta: Q,
        PAGE_STATUS: oa
      })
    });
    return ut(g(() => {
      se().unsubscribe({
        topic: "app_id_changed",
        subscriber: "page_tree_app_id_changed"
      });
    }, {
      metaData: {
        id: "engine.plugins.appmanage.PageTree.onUnmounted[1]"
      },
      ctx: () => ({
        props: a,
        emit: t,
        confirm: n,
        pageState: e,
        isBlock: s,
        isSaved: i,
        pageSettingState: o,
        changeTreeData: r,
        isCurrentDataSame: l,
        getPageList: m,
        resetPageData: d,
        STATIC_PAGE_GROUP_ID: D,
        COMMON_PAGE_GROUP_ID: c,
        switchPageById: y,
        fetchPageDetail: h,
        requestUpdatePage: _,
        getAppId: C,
        customPageOperations: T,
        state: N,
        subscribe: u,
        unsubscribe: E,
        refreshPageList: b,
        subscriber: F,
        switchPage: G,
        nodeClick: L,
        openSettingPanel: B,
        popoverRefs: S,
        setPopoverRef: v,
        handleClickRow: V,
        isPageLocked: w,
        handleClickPageSettings: X,
        createPage: q,
        createFolder: te,
        settingHome: ae,
        rowOperations: $,
        getRowOperations: ne,
        updatePage: oe,
        updateFolder: re,
        handleMoveNode: ge,
        createPublicPage: Ze,
        IconFolderOpened: sa,
        IconFolderClosed: na,
        IconSearch: ta,
        useCanvas: I,
        useModal: x,
        usePage: A,
        useNotify: f,
        useMessage: se,
        getMetaApi: p,
        getOptions: Y,
        META_SERVICE: P,
        isEqual: O,
        getCanvasStatus: Z,
        handlePageUpdate: le,
        constants: R,
        closePageSettingPanel: K,
        closeFolderSettingPanel: ie,
        http: M,
        DraggableTree: ia,
        SvgButton: W,
        meta: Q,
        PAGE_STATUS: oa
      })
    })), {
      createPublicPage: Ze,
      state: N,
      switchPage: G,
      pageSettingState: o,
      setPopoverRef: v,
      IconFolderOpened: sa(),
      IconFolderClosed: na(),
      getRowOperations: ne,
      handleClickRow: V,
      handleMoveNode: ge,
      isPageLocked: w,
      handleClickPageSettings: X,
      STATIC_PAGE_GROUP_ID: D
    };
  }
}, en = { class: "app-manage-search" }, an = { class: "title" }, tn = { class: "app-manage-tree" }, nn = {
  class: /* @__PURE__ */ nt(["actions"])
}, sn = { class: "operation-list" }, on = ["onClick"];
function rn(a, t, n, e, s, i) {
  const o = ce("tiny-icon-search"), r = ce("tiny-search"), l = ce("svg-button"), m = ce("tiny-popover"), d = ce("draggable-tree"), D = ce("tiny-collapse-item"), c = ce("tiny-collapse");
  return ue(), fa(za, null, [
    ea("div", en, [
      ee(r, {
        modelValue: e.state.pageSearchValue,
        "onUpdate:modelValue": t[0] || (t[0] = (y) => e.state.pageSearchValue = y),
        clearable: "",
        placeholder: "搜索"
      }, {
        prefix: de(() => [
          ee(o)
        ]),
        _: 1
      }, 8, ["modelValue"])
    ]),
    ee(c, {
      modelValue: e.state.collapseValue,
      "onUpdate:modelValue": t[1] || (t[1] = (y) => e.state.collapseValue = y),
      class: "page-manage-collapse lowcode-scrollbar"
    }, {
      default: de(() => [
        (ue(!0), fa(za, null, tt(e.pageSettingState.pages, (y, h) => (ue(), ma(D, {
          key: h,
          name: y.groupId
        }, {
          title: de(() => [
            ea("span", an, Xa(y.groupName), 1)
          ]),
          default: de(() => [
            ea("div", tn, [
              ee(d, {
                data: y.data,
                "label-key": "name",
                active: e.state.currentNodeData.id,
                "filter-value": e.state.pageSearchValue,
                "root-id": e.pageSettingState.ROOT_ID,
                draggable: y.groupId === e.STATIC_PAGE_GROUP_ID,
                onClickRow: e.handleClickRow,
                onMoveNode: e.handleMoveNode
              }, {
                "row-suffix": de(({ node: _ }) => [
                  ea("div", nn, [
                    e.isPageLocked(_.rawData) ? (ue(), ma(l, {
                      key: 0,
                      name: "locked",
                      hoverBgColor: !1
                    })) : ya("", !0),
                    _.rawData.isHome ? (ue(), ma(l, {
                      key: 1,
                      name: "home",
                      hoverBgColor: !1
                    })) : ya("", !0),
                    ee(m, {
                      ref_for: !0,
                      ref: (C) => e.setPopoverRef(C, _.id),
                      placement: "bottom-start",
                      "visible-arrow": !1,
                      "popper-class": "page-tree-row-operation-list"
                    }, {
                      reference: de(() => [
                        ee(l, {
                          name: "ellipsis",
                          class: "auto-hidden",
                          hoverBgColor: !1
                        })
                      ]),
                      default: de(() => [
                        ea("div", sn, [
                          (ue(!0), fa(za, null, tt(e.getRowOperations(y.groupId, _), (C, T) => (ue(), fa("div", {
                            key: T,
                            class: nt([C.type === "divider" ? "divider" : "item"].concat(C.class || [])),
                            onClick: (N) => {
                              var u;
                              return (u = C.action) == null ? void 0 : u.call(C, _);
                            }
                          }, Xa(C.label), 11, on))), 128))
                        ])
                      ]),
                      _: 2
                    }, 1536)
                  ])
                ]),
                _: 2
              }, 1032, ["data", "active", "filter-value", "root-id", "draggable", "onClickRow", "onMoveNode"])
            ])
          ]),
          _: 2
        }, 1032, ["name"]))), 128))
      ]),
      _: 1
    }, 8, ["modelValue"])
  ], 64);
}
const Ja = /* @__PURE__ */ Fa($t, [["render", rn], ["__scopeId", "data-v-f74de849"]]), Ka = {
  getPageById: async (a) => {
    if (a)
      return pa(a);
  },
  openPageSettingPanel: De
}, ln = {
  components: {
    PageSetting: Wa({
      component: Ua,
      metaData: {
        id: "engine.plugins.page.PageSetting"
      }
    }),
    PluginPanel: Wa({
      component: Ba,
      metaData: {
        id: "engine.plugins.page.PluginPanel"
      }
    }),
    SvgButton: Wa({
      component: W,
      metaData: {
        id: "engine.plugins.page.SvgButton"
      }
    }),
    PageFolderSetting: Wa({
      component: ja,
      metaData: {
        id: "engine.plugins.page.PageFolderSetting"
      }
    }),
    PageTree: Wa({
      component: Ja,
      metaData: {
        id: "engine.plugins.page.PageTree"
      }
    })
  },
  props: {
    title: {
      type: String,
      default: "页面"
    },
    fixedPanels: {
      type: Array
    }
  },
  emits: ["close"],
  setup(a, {
    emit: t
  }) {
    const {
      confirm: n
    } = x(), {
      pageState: e
    } = I(), {
      pageSettingState: s,
      getDefaultPage: i,
      isTemporaryPage: o,
      initCurrentPageData: r
    } = A(), {
      PLUGIN_NAME: l
    } = H(), m = Ga({
      emitEvent: t
    });
    dt("panelState", m);
    const d = Sa(null), D = s.ROOT_ID, c = Ra().getDocsUrl("page"), y = "在这里新增页面/文件夹，还可以对已有的页面进行生命周期管理。", h = Ga({
      isFolder: !1
    }), _ = g((b, F = D) => {
      ie(), s.isNew = !0;
      try {
        const G = i();
        if (!G)
          throw new Error("Failed to get default page configuration");
        s.currentPageData = {
          ...i(),
          ...G,
          parentId: F,
          route: "",
          name: "Untitled",
          page_content: {
            lifeCycles: {}
          },
          group: b
        };
      } catch (G) {
        throw new Error(G);
      }
      s.currentPageDataCopy = j(!0, {}, s.currentPageData), h.isFolder = !1, De();
    }, {
      metaData: {
        id: "engine.plugins.appmanage.Main.createNewPage"
      },
      ctx: () => ({
        props: a,
        emit: t,
        confirm: n,
        pageState: e,
        pageSettingState: s,
        getDefaultPage: i,
        isTemporaryPage: o,
        initCurrentPageData: r,
        PLUGIN_NAME: l,
        panelState: m,
        pageTreeRef: d,
        ROOT_ID: D,
        docsUrl: c,
        docsContent: y,
        state: h,
        createNewPage: _,
        createNewFolder: C,
        settingHome: T,
        openSettingPanel: N,
        pluginPanelClosed: u,
        openNewPage: E,
        useCanvas: I,
        usePage: A,
        useHelp: Ra,
        useModal: x,
        useNotify: f,
        useLayout: H,
        PluginPanel: Ba,
        SvgButton: W,
        extend: j,
        PageSetting: Ua,
        openPageSettingPanel: De,
        closePageSettingPanel: K,
        PageFolderSetting: ja,
        openFolderSettingPanel: ha,
        closeFolderSettingPanel: ie,
        PageTree: Ja,
        fetchPageDetail: pa,
        handleRouteHomeUpdate: Pa,
        api: Ka
      })
    }), C = g((b = D) => {
      K(), s.isNew = !0, s.currentPageData = {
        parentId: b,
        route: "",
        name: "untitled"
      }, s.currentPageDataCopy = j(!0, {}, s.currentPageData), h.isFolder = !0, ha();
    }, {
      metaData: {
        id: "engine.plugins.appmanage.Main.createNewFolder"
      },
      ctx: () => ({
        props: a,
        emit: t,
        confirm: n,
        pageState: e,
        pageSettingState: s,
        getDefaultPage: i,
        isTemporaryPage: o,
        initCurrentPageData: r,
        PLUGIN_NAME: l,
        panelState: m,
        pageTreeRef: d,
        ROOT_ID: D,
        docsUrl: c,
        docsContent: y,
        state: h,
        createNewPage: _,
        createNewFolder: C,
        settingHome: T,
        openSettingPanel: N,
        pluginPanelClosed: u,
        openNewPage: E,
        useCanvas: I,
        usePage: A,
        useHelp: Ra,
        useModal: x,
        useNotify: f,
        useLayout: H,
        PluginPanel: Ba,
        SvgButton: W,
        extend: j,
        PageSetting: Ua,
        openPageSettingPanel: De,
        closePageSettingPanel: K,
        PageFolderSetting: ja,
        openFolderSettingPanel: ha,
        closeFolderSettingPanel: ie,
        PageTree: Ja,
        fetchPageDetail: pa,
        handleRouteHomeUpdate: Pa,
        api: Ka
      })
    }), T = g((b) => {
      n({
        title: "提示",
        type: "warning ",
        message: "是否确定要将此页面设置为主页？",
        exec: () => {
          const F = {
            ...b.rawData,
            isHome: !0
          };
          Pa(b.id, F).then(() => {
            s.updateTreeData(), s.isNew = !1, f({
              message: "主页设置成功！",
              type: "success"
            });
          }).catch(() => {
            f({
              message: "主页设置失败！",
              type: "error"
            });
          });
        }
      });
    }, {
      metaData: {
        id: "engine.plugins.appmanage.Main.settingHome"
      },
      ctx: () => ({
        props: a,
        emit: t,
        confirm: n,
        pageState: e,
        pageSettingState: s,
        getDefaultPage: i,
        isTemporaryPage: o,
        initCurrentPageData: r,
        PLUGIN_NAME: l,
        panelState: m,
        pageTreeRef: d,
        ROOT_ID: D,
        docsUrl: c,
        docsContent: y,
        state: h,
        createNewPage: _,
        createNewFolder: C,
        settingHome: T,
        openSettingPanel: N,
        pluginPanelClosed: u,
        openNewPage: E,
        useCanvas: I,
        usePage: A,
        useHelp: Ra,
        useModal: x,
        useNotify: f,
        useLayout: H,
        PluginPanel: Ba,
        SvgButton: W,
        extend: j,
        PageSetting: Ua,
        openPageSettingPanel: De,
        closePageSettingPanel: K,
        PageFolderSetting: ja,
        openFolderSettingPanel: ha,
        closeFolderSettingPanel: ie,
        PageTree: Ja,
        fetchPageDetail: pa,
        handleRouteHomeUpdate: Pa,
        api: Ka
      })
    });
    st(() => {
      o.saved && De();
    });
    const N = g(async (b) => {
      h.isFolder = !b.isPage, s.isNew = !1;
      const F = b.id !== s.currentPageData.id;
      h.isFolder ? (F && K(), ha()) : (F && ie(), De());
      const G = await pa(b == null ? void 0 : b.id);
      r(G);
    }, {
      metaData: {
        id: "engine.plugins.appmanage.Main.openSettingPanel"
      },
      ctx: () => ({
        props: a,
        emit: t,
        confirm: n,
        pageState: e,
        pageSettingState: s,
        getDefaultPage: i,
        isTemporaryPage: o,
        initCurrentPageData: r,
        PLUGIN_NAME: l,
        panelState: m,
        pageTreeRef: d,
        ROOT_ID: D,
        docsUrl: c,
        docsContent: y,
        state: h,
        createNewPage: _,
        createNewFolder: C,
        settingHome: T,
        openSettingPanel: N,
        pluginPanelClosed: u,
        openNewPage: E,
        useCanvas: I,
        usePage: A,
        useHelp: Ra,
        useModal: x,
        useNotify: f,
        useLayout: H,
        PluginPanel: Ba,
        SvgButton: W,
        extend: j,
        PageSetting: Ua,
        openPageSettingPanel: De,
        closePageSettingPanel: K,
        PageFolderSetting: ja,
        openFolderSettingPanel: ha,
        closeFolderSettingPanel: ie,
        PageTree: Ja,
        fetchPageDetail: pa,
        handleRouteHomeUpdate: Pa,
        api: Ka
      })
    });
    dt("openSettingPanel", N);
    const u = g(() => {
      t("close"), K(), ie();
    }, {
      metaData: {
        id: "engine.plugins.appmanage.Main.pluginPanelClosed"
      },
      ctx: () => ({
        props: a,
        emit: t,
        confirm: n,
        pageState: e,
        pageSettingState: s,
        getDefaultPage: i,
        isTemporaryPage: o,
        initCurrentPageData: r,
        PLUGIN_NAME: l,
        panelState: m,
        pageTreeRef: d,
        ROOT_ID: D,
        docsUrl: c,
        docsContent: y,
        state: h,
        createNewPage: _,
        createNewFolder: C,
        settingHome: T,
        openSettingPanel: N,
        pluginPanelClosed: u,
        openNewPage: E,
        useCanvas: I,
        usePage: A,
        useHelp: Ra,
        useModal: x,
        useNotify: f,
        useLayout: H,
        PluginPanel: Ba,
        SvgButton: W,
        extend: j,
        PageSetting: Ua,
        openPageSettingPanel: De,
        closePageSettingPanel: K,
        PageFolderSetting: ja,
        openFolderSettingPanel: ha,
        closeFolderSettingPanel: ie,
        PageTree: Ja,
        fetchPageDetail: pa,
        handleRouteHomeUpdate: Pa,
        api: Ka
      })
    }), E = g((b) => {
      d.value.switchPage(b);
    }, {
      metaData: {
        id: "engine.plugins.appmanage.Main.openNewPage"
      },
      ctx: () => ({
        props: a,
        emit: t,
        confirm: n,
        pageState: e,
        pageSettingState: s,
        getDefaultPage: i,
        isTemporaryPage: o,
        initCurrentPageData: r,
        PLUGIN_NAME: l,
        panelState: m,
        pageTreeRef: d,
        ROOT_ID: D,
        docsUrl: c,
        docsContent: y,
        state: h,
        createNewPage: _,
        createNewFolder: C,
        settingHome: T,
        openSettingPanel: N,
        pluginPanelClosed: u,
        openNewPage: E,
        useCanvas: I,
        usePage: A,
        useHelp: Ra,
        useModal: x,
        useNotify: f,
        useLayout: H,
        PluginPanel: Ba,
        SvgButton: W,
        extend: j,
        PageSetting: Ua,
        openPageSettingPanel: De,
        closePageSettingPanel: K,
        PageFolderSetting: ja,
        openFolderSettingPanel: ha,
        closeFolderSettingPanel: ie,
        PageTree: Ja,
        fetchPageDetail: pa,
        handleRouteHomeUpdate: Pa,
        api: Ka
      })
    });
    return {
      PLUGIN_NAME: l,
      state: h,
      pageState: e,
      openNewPage: E,
      pageTreeRef: d,
      pluginPanelClosed: u,
      openSettingPanel: N,
      createNewFolder: C,
      createNewPage: _,
      docsUrl: c,
      docsContent: y,
      settingHome: T
    };
  }
}, gn = { class: "plugin-page" };
function cn(a, t, n, e, s, i) {
  const o = ce("svg-button"), r = ce("page-tree"), l = ce("plugin-panel"), m = ce("page-setting"), d = ce("page-folder-setting");
  return ue(), fa("div", gn, [
    ee(l, {
      title: n.title,
      "fixed-name": e.PLUGIN_NAME.AppManage,
      fixedPanels: n.fixedPanels,
      onClose: e.pluginPanelClosed,
      docsUrl: e.docsUrl,
      docsContent: e.docsContent,
      isShowDocsIcon: !0
    }, {
      header: de(() => [
        ee(o, {
          class: "add-folder-icon",
          name: "add-folder",
          placement: "bottom",
          tips: "新建文件夹",
          onClick: t[0] || (t[0] = (D) => e.createNewFolder())
        }),
        ee(o, {
          class: "new-page-icon",
          name: "new-page",
          placement: "bottom",
          tips: "新建页面",
          onClick: t[1] || (t[1] = (D) => e.createNewPage("staticPages"))
        })
      ]),
      content: de(() => [
        ee(r, {
          ref: "pageTreeRef",
          isFolder: e.state.isFolder,
          onAdd: t[2] || (t[2] = (D) => e.createNewPage("publicPages")),
          onOpenSettingPanel: e.openSettingPanel,
          onCreatePage: e.createNewPage,
          onCreateFolder: e.createNewFolder,
          onSettingHome: e.settingHome
        }, null, 8, ["isFolder", "onOpenSettingPanel", "onCreatePage", "onCreateFolder", "onSettingHome"])
      ]),
      _: 1
    }, 8, ["title", "fixed-name", "fixedPanels", "onClose", "docsUrl", "docsContent"]),
    ee(m, {
      isFolder: e.state.isFolder,
      onOpenNewPage: e.openNewPage
    }, null, 8, ["isFolder", "onOpenNewPage"]),
    ee(d, {
      isFolder: e.state.isFolder
    }, null, 8, ["isFolder"])
  ]);
}
const un = /* @__PURE__ */ Fa(ln, [["render", cn], ["__scopeId", "data-v-db4f4ccc"]]), {
  ELEMENT_TAG: Ie,
  COMPONENT_NAME: Oe
} = R, pe = {
  app: "",
  name: "",
  route: "",
  page_content: {
    componentName: "Page",
    css: "",
    props: {},
    lifeCycles: {},
    children: [],
    dataSource: {
      list: []
    },
    state: {},
    methods: {},
    utils: [],
    bridge: [],
    inputs: [],
    outputs: []
  },
  isHome: !1,
  parentId: "none",
  isBody: !1,
  group: "staticPages"
}, Me = Sa(null), U = Ga({
  currentPageDataCopy: {},
  // 记录当前页最开始的状态，当用户点击取消按钮的时候恢复到初始状态
  currentPageData: {},
  // 当前配置页面的数据
  pages: [],
  oldParentId: null,
  isNew: !1,
  ROOT_ID: "0",
  // 根节点ID
  updateTreeData: null,
  treeDataMapping: {},
  defaultPage: null
  // 当前页设置的默认页
}), Fe = Ga({
  saved: !1
}), ye = 0, be = 1, ke = g((a, t) => {
  var s, i;
  if (!((s = a == null ? void 0 : a.pageBaseStyle) != null && s.className) || !((i = a == null ? void 0 : a.pageBaseStyle) != null && i.style))
    return "";
  const n = g((o, r) => `.${o} {
  ${r.trim()}
}
`, {
    metaData: {
      id: "engine.service.page.usePage.formatCssRule"
    },
    ctx: () => ({
      pageOptions: a,
      materialsOptions: t,
      formatCssRule: n,
      baseStyle: e,
      extend: j,
      isValuesEqual: O,
      constants: R,
      getCanvasStatus: Z,
      useCanvas: I,
      useLayout: H,
      useBreadcrumb: Te,
      useModal: x,
      useNotify: f,
      getMetaApi: p,
      META_SERVICE: P,
      http: M,
      ELEMENT_TAG: Ie,
      COMPONENT_NAME: Oe,
      getOptions: Y,
      DEFAULT_PAGE: pe,
      selectedTemplateCard: Me,
      pageSettingState: U,
      isTemporaryPage: Fe,
      STATIC_PAGE_GROUP_ID: ye,
      COMMON_PAGE_GROUP_ID: be,
      generateCssString: ke,
      getDefaultPage: Ve,
      syncPageContent: we,
      updatePageSettingAfterSave: Ae,
      isCurrentDataSame: Ge,
      getParentNode: Ce,
      changeTreeData: Re,
      getPageContent: Be,
      initCurrentPageData: He,
      resetPageData: Le,
      isChangePageData: qe,
      generateTree: Ne,
      getPageList: Pe,
      getAncestorsRecursively: _e,
      getAncestors: Ue,
      flatternFolder: Ee,
      getPageChildren: je,
      clearCurrentState: Je,
      switchPage: xe,
      switchPageWithConfirm: Ke,
      updatePageContent: We,
      fetchPageDetailIfNeeded: Xe,
      updateParentId: ze,
      handlePageDetail: Qe,
      getFamily: Ye
    })
  }), e = `.${a.pageBaseStyle.className}{\r
 ${a.pageBaseStyle.style}\r
}\r
`;
  return t.useBaseStyle ? [n(a.pageBaseStyle.className, a.pageBaseStyle.style), n(t.blockBaseStyle.className, t.blockBaseStyle.style), n(t.componentBaseStyle.className, t.componentBaseStyle.style)].join(`
`) : e;
}, {
  metaData: {
    id: "engine.service.page.usePage.generateCssString"
  },
  ctx: () => ({
    extend: j,
    isValuesEqual: O,
    constants: R,
    getCanvasStatus: Z,
    useCanvas: I,
    useLayout: H,
    useBreadcrumb: Te,
    useModal: x,
    useNotify: f,
    getMetaApi: p,
    META_SERVICE: P,
    http: M,
    ELEMENT_TAG: Ie,
    COMPONENT_NAME: Oe,
    getOptions: Y,
    DEFAULT_PAGE: pe,
    selectedTemplateCard: Me,
    pageSettingState: U,
    isTemporaryPage: Fe,
    STATIC_PAGE_GROUP_ID: ye,
    COMMON_PAGE_GROUP_ID: be,
    generateCssString: ke,
    getDefaultPage: Ve,
    syncPageContent: we,
    updatePageSettingAfterSave: Ae,
    isCurrentDataSame: Ge,
    getParentNode: Ce,
    changeTreeData: Re,
    getPageContent: Be,
    initCurrentPageData: He,
    resetPageData: Le,
    isChangePageData: qe,
    generateTree: Ne,
    getPageList: Pe,
    getAncestorsRecursively: _e,
    getAncestors: Ue,
    flatternFolder: Ee,
    getPageChildren: je,
    clearCurrentState: Je,
    switchPage: xe,
    switchPageWithConfirm: Ke,
    updatePageContent: We,
    fetchPageDetailIfNeeded: Xe,
    updateParentId: ze,
    handlePageDetail: Qe,
    getFamily: Ye
  })
}), Ve = g(() => {
  const a = Y("engine.plugins.materials"), t = Y("engine.plugins.appmanage");
  return !a || !t || !t.pageBaseStyle ? {
    ...pe
  } : {
    ...pe,
    page_content: {
      ...pe.page_content,
      props: {
        ...pe.page_content.props,
        className: t.pageBaseStyle.className
      },
      css: ke(t, a)
    }
  };
}, {
  metaData: {
    id: "engine.service.page.usePage.getDefaultPage"
  },
  ctx: () => ({
    extend: j,
    isValuesEqual: O,
    constants: R,
    getCanvasStatus: Z,
    useCanvas: I,
    useLayout: H,
    useBreadcrumb: Te,
    useModal: x,
    useNotify: f,
    getMetaApi: p,
    META_SERVICE: P,
    http: M,
    ELEMENT_TAG: Ie,
    COMPONENT_NAME: Oe,
    getOptions: Y,
    DEFAULT_PAGE: pe,
    selectedTemplateCard: Me,
    pageSettingState: U,
    isTemporaryPage: Fe,
    STATIC_PAGE_GROUP_ID: ye,
    COMMON_PAGE_GROUP_ID: be,
    generateCssString: ke,
    getDefaultPage: Ve,
    syncPageContent: we,
    updatePageSettingAfterSave: Ae,
    isCurrentDataSame: Ge,
    getParentNode: Ce,
    changeTreeData: Re,
    getPageContent: Be,
    initCurrentPageData: He,
    resetPageData: Le,
    isChangePageData: qe,
    generateTree: Ne,
    getPageList: Pe,
    getAncestorsRecursively: _e,
    getAncestors: Ue,
    flatternFolder: Ee,
    getPageChildren: je,
    clearCurrentState: Je,
    switchPage: xe,
    switchPageWithConfirm: Ke,
    updatePageContent: We,
    fetchPageDetailIfNeeded: Xe,
    updateParentId: ze,
    handlePageDetail: Qe,
    getFamily: Ye
  })
}), we = g(() => {
  const {
    getBaseInfo: a
  } = p(P.GlobalService);
  if (U.currentPageData.id === Number.parseInt(a().pageId)) {
    const t = I().getPageSchema();
    U.currentPageData.page_content = t;
  }
}, {
  metaData: {
    id: "engine.service.page.usePage.syncPageContent"
  },
  ctx: () => ({
    extend: j,
    isValuesEqual: O,
    constants: R,
    getCanvasStatus: Z,
    useCanvas: I,
    useLayout: H,
    useBreadcrumb: Te,
    useModal: x,
    useNotify: f,
    getMetaApi: p,
    META_SERVICE: P,
    http: M,
    ELEMENT_TAG: Ie,
    COMPONENT_NAME: Oe,
    getOptions: Y,
    DEFAULT_PAGE: pe,
    selectedTemplateCard: Me,
    pageSettingState: U,
    isTemporaryPage: Fe,
    STATIC_PAGE_GROUP_ID: ye,
    COMMON_PAGE_GROUP_ID: be,
    generateCssString: ke,
    getDefaultPage: Ve,
    syncPageContent: we,
    updatePageSettingAfterSave: Ae,
    isCurrentDataSame: Ge,
    getParentNode: Ce,
    changeTreeData: Re,
    getPageContent: Be,
    initCurrentPageData: He,
    resetPageData: Le,
    isChangePageData: qe,
    generateTree: Ne,
    getPageList: Pe,
    getAncestorsRecursively: _e,
    getAncestors: Ue,
    flatternFolder: Ee,
    getPageChildren: je,
    clearCurrentState: Je,
    switchPage: xe,
    switchPageWithConfirm: Ke,
    updatePageContent: We,
    fetchPageDetailIfNeeded: Xe,
    updateParentId: ze,
    handlePageDetail: Qe,
    getFamily: Ye
  })
}), Ae = g(() => {
  we(), U.currentPageDataCopy = j(!0, {}, U.currentPageData);
}, {
  metaData: {
    id: "engine.service.page.usePage.updatePageSettingAfterSave"
  },
  ctx: () => ({
    extend: j,
    isValuesEqual: O,
    constants: R,
    getCanvasStatus: Z,
    useCanvas: I,
    useLayout: H,
    useBreadcrumb: Te,
    useModal: x,
    useNotify: f,
    getMetaApi: p,
    META_SERVICE: P,
    http: M,
    ELEMENT_TAG: Ie,
    COMPONENT_NAME: Oe,
    getOptions: Y,
    DEFAULT_PAGE: pe,
    selectedTemplateCard: Me,
    pageSettingState: U,
    isTemporaryPage: Fe,
    STATIC_PAGE_GROUP_ID: ye,
    COMMON_PAGE_GROUP_ID: be,
    generateCssString: ke,
    getDefaultPage: Ve,
    syncPageContent: we,
    updatePageSettingAfterSave: Ae,
    isCurrentDataSame: Ge,
    getParentNode: Ce,
    changeTreeData: Re,
    getPageContent: Be,
    initCurrentPageData: He,
    resetPageData: Le,
    isChangePageData: qe,
    generateTree: Ne,
    getPageList: Pe,
    getAncestorsRecursively: _e,
    getAncestors: Ue,
    flatternFolder: Ee,
    getPageChildren: je,
    clearCurrentState: Je,
    switchPage: xe,
    switchPageWithConfirm: Ke,
    updatePageContent: We,
    fetchPageDetailIfNeeded: Xe,
    updateParentId: ze,
    handlePageDetail: Qe,
    getFamily: Ye
  })
}), Ge = g(() => {
  we();
  const a = U.currentPageData || {}, t = U.currentPageDataCopy || {};
  let n = !0;
  return Object.keys(t).some((e) => {
    if (["children", "label", "createdBy", "assets", "occupier"].includes(e))
      return !1;
    if (e === "page_content") {
      const s = {
        inputs: t[e].inputs,
        outputs: t[e].outputs,
        lifeCycles: t[e].lifeCycles,
        children: t[e].children
      }, i = {
        inputs: a[e].inputs,
        outputs: a[e].outputs,
        lifeCycles: a[e].lifeCycles,
        children: a[e].children
      };
      JSON.stringify(s) !== JSON.stringify(i) && (n = !1);
    } else
      O(t[e], a[e]) || (n = !1);
    return !n;
  }), n;
}, {
  metaData: {
    id: "engine.service.page.usePage.isCurrentDataSame"
  },
  ctx: () => ({
    extend: j,
    isValuesEqual: O,
    constants: R,
    getCanvasStatus: Z,
    useCanvas: I,
    useLayout: H,
    useBreadcrumb: Te,
    useModal: x,
    useNotify: f,
    getMetaApi: p,
    META_SERVICE: P,
    http: M,
    ELEMENT_TAG: Ie,
    COMPONENT_NAME: Oe,
    getOptions: Y,
    DEFAULT_PAGE: pe,
    selectedTemplateCard: Me,
    pageSettingState: U,
    isTemporaryPage: Fe,
    STATIC_PAGE_GROUP_ID: ye,
    COMMON_PAGE_GROUP_ID: be,
    generateCssString: ke,
    getDefaultPage: Ve,
    syncPageContent: we,
    updatePageSettingAfterSave: Ae,
    isCurrentDataSame: Ge,
    getParentNode: Ce,
    changeTreeData: Re,
    getPageContent: Be,
    initCurrentPageData: He,
    resetPageData: Le,
    isChangePageData: qe,
    generateTree: Ne,
    getPageList: Pe,
    getAncestorsRecursively: _e,
    getAncestors: Ue,
    flatternFolder: Ee,
    getPageChildren: je,
    clearCurrentState: Je,
    switchPage: xe,
    switchPageWithConfirm: Ke,
    updatePageContent: We,
    fetchPageDetailIfNeeded: Xe,
    updateParentId: ze,
    handlePageDetail: Qe,
    getFamily: Ye
  })
}), Ce = g((a) => a === U.ROOT_ID ? {
  id: U.ROOT_ID,
  children: U.pages[ye].data
} : U.treeDataMapping[a], {
  metaData: {
    id: "engine.service.page.usePage.getParentNode"
  },
  ctx: () => ({
    extend: j,
    isValuesEqual: O,
    constants: R,
    getCanvasStatus: Z,
    useCanvas: I,
    useLayout: H,
    useBreadcrumb: Te,
    useModal: x,
    useNotify: f,
    getMetaApi: p,
    META_SERVICE: P,
    http: M,
    ELEMENT_TAG: Ie,
    COMPONENT_NAME: Oe,
    getOptions: Y,
    DEFAULT_PAGE: pe,
    selectedTemplateCard: Me,
    pageSettingState: U,
    isTemporaryPage: Fe,
    STATIC_PAGE_GROUP_ID: ye,
    COMMON_PAGE_GROUP_ID: be,
    generateCssString: ke,
    getDefaultPage: Ve,
    syncPageContent: we,
    updatePageSettingAfterSave: Ae,
    isCurrentDataSame: Ge,
    getParentNode: Ce,
    changeTreeData: Re,
    getPageContent: Be,
    initCurrentPageData: He,
    resetPageData: Le,
    isChangePageData: qe,
    generateTree: Ne,
    getPageList: Pe,
    getAncestorsRecursively: _e,
    getAncestors: Ue,
    flatternFolder: Ee,
    getPageChildren: je,
    clearCurrentState: Je,
    switchPage: xe,
    switchPageWithConfirm: Ke,
    updatePageContent: We,
    fetchPageDetailIfNeeded: Xe,
    updateParentId: ze,
    handlePageDetail: Qe,
    getFamily: Ye
  })
}), Re = g((a, t) => {
  var n, e;
  if (a && t && String(a) !== String(t)) {
    const s = Ce(a), i = Ce(t);
    if (!s || !i)
      return;
    const o = U.currentPageData.id, r = (e = (n = i.children) == null ? void 0 : n.findIndex) == null ? void 0 : e.call(n, ({
      id: l
    }) => l === o);
    if (r > -1) {
      const l = i.children.splice(r, 1)[0];
      s.children || (s.children = []), s.children.unshift(l);
    }
  }
}, {
  metaData: {
    id: "engine.service.page.usePage.changeTreeData"
  },
  ctx: () => ({
    extend: j,
    isValuesEqual: O,
    constants: R,
    getCanvasStatus: Z,
    useCanvas: I,
    useLayout: H,
    useBreadcrumb: Te,
    useModal: x,
    useNotify: f,
    getMetaApi: p,
    META_SERVICE: P,
    http: M,
    ELEMENT_TAG: Ie,
    COMPONENT_NAME: Oe,
    getOptions: Y,
    DEFAULT_PAGE: pe,
    selectedTemplateCard: Me,
    pageSettingState: U,
    isTemporaryPage: Fe,
    STATIC_PAGE_GROUP_ID: ye,
    COMMON_PAGE_GROUP_ID: be,
    generateCssString: ke,
    getDefaultPage: Ve,
    syncPageContent: we,
    updatePageSettingAfterSave: Ae,
    isCurrentDataSame: Ge,
    getParentNode: Ce,
    changeTreeData: Re,
    getPageContent: Be,
    initCurrentPageData: He,
    resetPageData: Le,
    isChangePageData: qe,
    generateTree: Ne,
    getPageList: Pe,
    getAncestorsRecursively: _e,
    getAncestors: Ue,
    flatternFolder: Ee,
    getPageChildren: je,
    clearCurrentState: Je,
    switchPage: xe,
    switchPageWithConfirm: Ke,
    updatePageContent: We,
    fetchPageDetailIfNeeded: Xe,
    updateParentId: ze,
    handlePageDetail: Qe,
    getFamily: Ye
  })
}), Be = g(() => U.currentPageData.page_content || {}, {
  metaData: {
    id: "engine.service.page.usePage.getPageContent"
  },
  ctx: () => ({
    extend: j,
    isValuesEqual: O,
    constants: R,
    getCanvasStatus: Z,
    useCanvas: I,
    useLayout: H,
    useBreadcrumb: Te,
    useModal: x,
    useNotify: f,
    getMetaApi: p,
    META_SERVICE: P,
    http: M,
    ELEMENT_TAG: Ie,
    COMPONENT_NAME: Oe,
    getOptions: Y,
    DEFAULT_PAGE: pe,
    selectedTemplateCard: Me,
    pageSettingState: U,
    isTemporaryPage: Fe,
    STATIC_PAGE_GROUP_ID: ye,
    COMMON_PAGE_GROUP_ID: be,
    generateCssString: ke,
    getDefaultPage: Ve,
    syncPageContent: we,
    updatePageSettingAfterSave: Ae,
    isCurrentDataSame: Ge,
    getParentNode: Ce,
    changeTreeData: Re,
    getPageContent: Be,
    initCurrentPageData: He,
    resetPageData: Le,
    isChangePageData: qe,
    generateTree: Ne,
    getPageList: Pe,
    getAncestorsRecursively: _e,
    getAncestors: Ue,
    flatternFolder: Ee,
    getPageChildren: je,
    clearCurrentState: Je,
    switchPage: xe,
    switchPageWithConfirm: Ke,
    updatePageContent: We,
    fetchPageDetailIfNeeded: Xe,
    updateParentId: ze,
    handlePageDetail: Qe,
    getFamily: Ye
  })
}), He = g((a) => {
  U.currentPageData = a, U.currentPageDataCopy = j(!0, {}, a), U.oldParentId = a.parentId;
}, {
  metaData: {
    id: "engine.service.page.usePage.initCurrentPageData"
  },
  ctx: () => ({
    extend: j,
    isValuesEqual: O,
    constants: R,
    getCanvasStatus: Z,
    useCanvas: I,
    useLayout: H,
    useBreadcrumb: Te,
    useModal: x,
    useNotify: f,
    getMetaApi: p,
    META_SERVICE: P,
    http: M,
    ELEMENT_TAG: Ie,
    COMPONENT_NAME: Oe,
    getOptions: Y,
    DEFAULT_PAGE: pe,
    selectedTemplateCard: Me,
    pageSettingState: U,
    isTemporaryPage: Fe,
    STATIC_PAGE_GROUP_ID: ye,
    COMMON_PAGE_GROUP_ID: be,
    generateCssString: ke,
    getDefaultPage: Ve,
    syncPageContent: we,
    updatePageSettingAfterSave: Ae,
    isCurrentDataSame: Ge,
    getParentNode: Ce,
    changeTreeData: Re,
    getPageContent: Be,
    initCurrentPageData: He,
    resetPageData: Le,
    isChangePageData: qe,
    generateTree: Ne,
    getPageList: Pe,
    getAncestorsRecursively: _e,
    getAncestors: Ue,
    flatternFolder: Ee,
    getPageChildren: je,
    clearCurrentState: Je,
    switchPage: xe,
    switchPageWithConfirm: Ke,
    updatePageContent: We,
    fetchPageDetailIfNeeded: Xe,
    updateParentId: ze,
    handlePageDetail: Qe,
    getFamily: Ye
  })
}), Le = g(() => {
  U.currentPageData = {}, U.currentPageDataCopy = {}, U.oldParentId = null, U.defaultPage = null;
}, {
  metaData: {
    id: "engine.service.page.usePage.resetPageData"
  },
  ctx: () => ({
    extend: j,
    isValuesEqual: O,
    constants: R,
    getCanvasStatus: Z,
    useCanvas: I,
    useLayout: H,
    useBreadcrumb: Te,
    useModal: x,
    useNotify: f,
    getMetaApi: p,
    META_SERVICE: P,
    http: M,
    ELEMENT_TAG: Ie,
    COMPONENT_NAME: Oe,
    getOptions: Y,
    DEFAULT_PAGE: pe,
    selectedTemplateCard: Me,
    pageSettingState: U,
    isTemporaryPage: Fe,
    STATIC_PAGE_GROUP_ID: ye,
    COMMON_PAGE_GROUP_ID: be,
    generateCssString: ke,
    getDefaultPage: Ve,
    syncPageContent: we,
    updatePageSettingAfterSave: Ae,
    isCurrentDataSame: Ge,
    getParentNode: Ce,
    changeTreeData: Re,
    getPageContent: Be,
    initCurrentPageData: He,
    resetPageData: Le,
    isChangePageData: qe,
    generateTree: Ne,
    getPageList: Pe,
    getAncestorsRecursively: _e,
    getAncestors: Ue,
    flatternFolder: Ee,
    getPageChildren: je,
    clearCurrentState: Je,
    switchPage: xe,
    switchPageWithConfirm: Ke,
    updatePageContent: We,
    fetchPageDetailIfNeeded: Xe,
    updateParentId: ze,
    handlePageDetail: Qe,
    getFamily: Ye
  })
}), qe = g(() => !O(U.currentPageData, U.currentPageDataCopy), {
  metaData: {
    id: "engine.service.page.usePage.isChangePageData"
  },
  ctx: () => ({
    extend: j,
    isValuesEqual: O,
    constants: R,
    getCanvasStatus: Z,
    useCanvas: I,
    useLayout: H,
    useBreadcrumb: Te,
    useModal: x,
    useNotify: f,
    getMetaApi: p,
    META_SERVICE: P,
    http: M,
    ELEMENT_TAG: Ie,
    COMPONENT_NAME: Oe,
    getOptions: Y,
    DEFAULT_PAGE: pe,
    selectedTemplateCard: Me,
    pageSettingState: U,
    isTemporaryPage: Fe,
    STATIC_PAGE_GROUP_ID: ye,
    COMMON_PAGE_GROUP_ID: be,
    generateCssString: ke,
    getDefaultPage: Ve,
    syncPageContent: we,
    updatePageSettingAfterSave: Ae,
    isCurrentDataSame: Ge,
    getParentNode: Ce,
    changeTreeData: Re,
    getPageContent: Be,
    initCurrentPageData: He,
    resetPageData: Le,
    isChangePageData: qe,
    generateTree: Ne,
    getPageList: Pe,
    getAncestorsRecursively: _e,
    getAncestors: Ue,
    flatternFolder: Ee,
    getPageChildren: je,
    clearCurrentState: Je,
    switchPage: xe,
    switchPageWithConfirm: Ke,
    updatePageContent: We,
    fetchPageDetailIfNeeded: Xe,
    updateParentId: ze,
    handlePageDetail: Qe,
    getFamily: Ye
  })
}), Ne = g((a) => {
  const {
    ROOT_ID: t
  } = U, n = {
    [t]: {
      id: t,
      parentId: ""
    }
  };
  return a.forEach((e) => {
    n[e.id] = e;
  }), a.forEach((e) => {
    const s = n[e.parentId];
    s && (s.children = s.children || [], s.children.push(e));
  }), n;
}, {
  metaData: {
    id: "engine.service.page.usePage.generateTree"
  },
  ctx: () => ({
    extend: j,
    isValuesEqual: O,
    constants: R,
    getCanvasStatus: Z,
    useCanvas: I,
    useLayout: H,
    useBreadcrumb: Te,
    useModal: x,
    useNotify: f,
    getMetaApi: p,
    META_SERVICE: P,
    http: M,
    ELEMENT_TAG: Ie,
    COMPONENT_NAME: Oe,
    getOptions: Y,
    DEFAULT_PAGE: pe,
    selectedTemplateCard: Me,
    pageSettingState: U,
    isTemporaryPage: Fe,
    STATIC_PAGE_GROUP_ID: ye,
    COMMON_PAGE_GROUP_ID: be,
    generateCssString: ke,
    getDefaultPage: Ve,
    syncPageContent: we,
    updatePageSettingAfterSave: Ae,
    isCurrentDataSame: Ge,
    getParentNode: Ce,
    changeTreeData: Re,
    getPageContent: Be,
    initCurrentPageData: He,
    resetPageData: Le,
    isChangePageData: qe,
    generateTree: Ne,
    getPageList: Pe,
    getAncestorsRecursively: _e,
    getAncestors: Ue,
    flatternFolder: Ee,
    getPageChildren: je,
    clearCurrentState: Je,
    switchPage: xe,
    switchPageWithConfirm: Ke,
    updatePageContent: We,
    fetchPageDetailIfNeeded: Xe,
    updateParentId: ze,
    handlePageDetail: Qe,
    getFamily: Ye
  })
}), Pe = g(async (a) => {
  const t = await M.fetchPageList(a || p(P.GlobalService).getBaseInfo().id), n = {
    groupName: "静态页面",
    groupId: ye,
    data: []
  }, e = {
    groupName: "公共页面",
    groupId: be,
    data: []
  };
  t.forEach((o) => {
    const r = o.name ? o : {
      ...o,
      name: o.folderName,
      group: "staticPages"
    }, l = o.meta ? {
      ...o,
      ...o.meta,
      name: o.fileName,
      isPage: !0,
      isBody: o.meta.rootElement === Ie.Body
    } : r, {
      children: m,
      ...d
    } = l;
    l.group === "staticPages" ? n.data.push(d) : e.data.push(d);
  });
  const s = Ne(n.data), i = Ne(e.data);
  return U.treeDataMapping = {
    ...s,
    ...i
  }, n.data = s[U.ROOT_ID].children || [], U.pages = [n, e], U.pages;
}, {
  metaData: {
    id: "engine.service.page.usePage.getPageList"
  },
  ctx: () => ({
    extend: j,
    isValuesEqual: O,
    constants: R,
    getCanvasStatus: Z,
    useCanvas: I,
    useLayout: H,
    useBreadcrumb: Te,
    useModal: x,
    useNotify: f,
    getMetaApi: p,
    META_SERVICE: P,
    http: M,
    ELEMENT_TAG: Ie,
    COMPONENT_NAME: Oe,
    getOptions: Y,
    DEFAULT_PAGE: pe,
    selectedTemplateCard: Me,
    pageSettingState: U,
    isTemporaryPage: Fe,
    STATIC_PAGE_GROUP_ID: ye,
    COMMON_PAGE_GROUP_ID: be,
    generateCssString: ke,
    getDefaultPage: Ve,
    syncPageContent: we,
    updatePageSettingAfterSave: Ae,
    isCurrentDataSame: Ge,
    getParentNode: Ce,
    changeTreeData: Re,
    getPageContent: Be,
    initCurrentPageData: He,
    resetPageData: Le,
    isChangePageData: qe,
    generateTree: Ne,
    getPageList: Pe,
    getAncestorsRecursively: _e,
    getAncestors: Ue,
    flatternFolder: Ee,
    getPageChildren: je,
    clearCurrentState: Je,
    switchPage: xe,
    switchPageWithConfirm: Ke,
    updatePageContent: We,
    fetchPageDetailIfNeeded: Xe,
    updateParentId: ze,
    handlePageDetail: Qe,
    getFamily: Ye
  })
}), _e = g((a) => {
  if (a === U.ROOT_ID)
    return [];
  const t = U.treeDataMapping[a];
  return [t].concat(_e(t.parentId));
}, {
  metaData: {
    id: "engine.service.page.usePage.getAncestorsRecursively"
  },
  ctx: () => ({
    extend: j,
    isValuesEqual: O,
    constants: R,
    getCanvasStatus: Z,
    useCanvas: I,
    useLayout: H,
    useBreadcrumb: Te,
    useModal: x,
    useNotify: f,
    getMetaApi: p,
    META_SERVICE: P,
    http: M,
    ELEMENT_TAG: Ie,
    COMPONENT_NAME: Oe,
    getOptions: Y,
    DEFAULT_PAGE: pe,
    selectedTemplateCard: Me,
    pageSettingState: U,
    isTemporaryPage: Fe,
    STATIC_PAGE_GROUP_ID: ye,
    COMMON_PAGE_GROUP_ID: be,
    generateCssString: ke,
    getDefaultPage: Ve,
    syncPageContent: we,
    updatePageSettingAfterSave: Ae,
    isCurrentDataSame: Ge,
    getParentNode: Ce,
    changeTreeData: Re,
    getPageContent: Be,
    initCurrentPageData: He,
    resetPageData: Le,
    isChangePageData: qe,
    generateTree: Ne,
    getPageList: Pe,
    getAncestorsRecursively: _e,
    getAncestors: Ue,
    flatternFolder: Ee,
    getPageChildren: je,
    clearCurrentState: Je,
    switchPage: xe,
    switchPageWithConfirm: Ke,
    updatePageContent: We,
    fetchPageDetailIfNeeded: Xe,
    updateParentId: ze,
    handlePageDetail: Qe,
    getFamily: Ye
  })
}), Ue = g(async (a, t) => {
  if (U.pages.length === 0 && await Pe(), !U.treeDataMapping[a])
    return null;
  const e = _e(a).slice(1).reverse(), s = t ? () => !0 : (i) => i.isPage;
  return e.filter(s).map((i) => i.id);
}, {
  metaData: {
    id: "engine.service.page.usePage.getAncestors"
  },
  ctx: () => ({
    extend: j,
    isValuesEqual: O,
    constants: R,
    getCanvasStatus: Z,
    useCanvas: I,
    useLayout: H,
    useBreadcrumb: Te,
    useModal: x,
    useNotify: f,
    getMetaApi: p,
    META_SERVICE: P,
    http: M,
    ELEMENT_TAG: Ie,
    COMPONENT_NAME: Oe,
    getOptions: Y,
    DEFAULT_PAGE: pe,
    selectedTemplateCard: Me,
    pageSettingState: U,
    isTemporaryPage: Fe,
    STATIC_PAGE_GROUP_ID: ye,
    COMMON_PAGE_GROUP_ID: be,
    generateCssString: ke,
    getDefaultPage: Ve,
    syncPageContent: we,
    updatePageSettingAfterSave: Ae,
    isCurrentDataSame: Ge,
    getParentNode: Ce,
    changeTreeData: Re,
    getPageContent: Be,
    initCurrentPageData: He,
    resetPageData: Le,
    isChangePageData: qe,
    generateTree: Ne,
    getPageList: Pe,
    getAncestorsRecursively: _e,
    getAncestors: Ue,
    flatternFolder: Ee,
    getPageChildren: je,
    clearCurrentState: Je,
    switchPage: xe,
    switchPageWithConfirm: Ke,
    updatePageContent: We,
    fetchPageDetailIfNeeded: Xe,
    updateParentId: ze,
    handlePageDetail: Qe,
    getFamily: Ye
  })
}), Ee = g((a) => {
  if (a.every((n) => n.isPage))
    return a;
  const t = a.map((n) => n.isPage ? n : (n.children || []).map((e) => ({
    ...e,
    routePath: `${n.routePath || n.route}/${e.route}`
  }))).flat();
  return Ee(t);
}, {
  metaData: {
    id: "engine.service.page.usePage.flatternFolder"
  },
  ctx: () => ({
    extend: j,
    isValuesEqual: O,
    constants: R,
    getCanvasStatus: Z,
    useCanvas: I,
    useLayout: H,
    useBreadcrumb: Te,
    useModal: x,
    useNotify: f,
    getMetaApi: p,
    META_SERVICE: P,
    http: M,
    ELEMENT_TAG: Ie,
    COMPONENT_NAME: Oe,
    getOptions: Y,
    DEFAULT_PAGE: pe,
    selectedTemplateCard: Me,
    pageSettingState: U,
    isTemporaryPage: Fe,
    STATIC_PAGE_GROUP_ID: ye,
    COMMON_PAGE_GROUP_ID: be,
    generateCssString: ke,
    getDefaultPage: Ve,
    syncPageContent: we,
    updatePageSettingAfterSave: Ae,
    isCurrentDataSame: Ge,
    getParentNode: Ce,
    changeTreeData: Re,
    getPageContent: Be,
    initCurrentPageData: He,
    resetPageData: Le,
    isChangePageData: qe,
    generateTree: Ne,
    getPageList: Pe,
    getAncestorsRecursively: _e,
    getAncestors: Ue,
    flatternFolder: Ee,
    getPageChildren: je,
    clearCurrentState: Je,
    switchPage: xe,
    switchPageWithConfirm: Ke,
    updatePageContent: We,
    fetchPageDetailIfNeeded: Xe,
    updateParentId: ze,
    handlePageDetail: Qe,
    getFamily: Ye
  })
}), je = g(async (a) => {
  U.pages.length === 0 && await Pe();
  const t = U.treeDataMapping[a];
  return Array.isArray(t == null ? void 0 : t.children) ? Ee(t.children) : [];
}, {
  metaData: {
    id: "engine.service.page.usePage.getPageChildren"
  },
  ctx: () => ({
    extend: j,
    isValuesEqual: O,
    constants: R,
    getCanvasStatus: Z,
    useCanvas: I,
    useLayout: H,
    useBreadcrumb: Te,
    useModal: x,
    useNotify: f,
    getMetaApi: p,
    META_SERVICE: P,
    http: M,
    ELEMENT_TAG: Ie,
    COMPONENT_NAME: Oe,
    getOptions: Y,
    DEFAULT_PAGE: pe,
    selectedTemplateCard: Me,
    pageSettingState: U,
    isTemporaryPage: Fe,
    STATIC_PAGE_GROUP_ID: ye,
    COMMON_PAGE_GROUP_ID: be,
    generateCssString: ke,
    getDefaultPage: Ve,
    syncPageContent: we,
    updatePageSettingAfterSave: Ae,
    isCurrentDataSame: Ge,
    getParentNode: Ce,
    changeTreeData: Re,
    getPageContent: Be,
    initCurrentPageData: He,
    resetPageData: Le,
    isChangePageData: qe,
    generateTree: Ne,
    getPageList: Pe,
    getAncestorsRecursively: _e,
    getAncestors: Ue,
    flatternFolder: Ee,
    getPageChildren: je,
    clearCurrentState: Je,
    switchPage: xe,
    switchPageWithConfirm: Ke,
    updatePageContent: We,
    fetchPageDetailIfNeeded: Xe,
    updateParentId: ze,
    handlePageDetail: Qe,
    getFamily: Ye
  })
}), Je = g(() => {
  const {
    pageState: a
  } = I();
  a.currentVm = null, a.hoverVm = null, a.properties = {}, a.pageSchema = null;
}, {
  metaData: {
    id: "engine.service.page.usePage.clearCurrentState"
  },
  ctx: () => ({
    extend: j,
    isValuesEqual: O,
    constants: R,
    getCanvasStatus: Z,
    useCanvas: I,
    useLayout: H,
    useBreadcrumb: Te,
    useModal: x,
    useNotify: f,
    getMetaApi: p,
    META_SERVICE: P,
    http: M,
    ELEMENT_TAG: Ie,
    COMPONENT_NAME: Oe,
    getOptions: Y,
    DEFAULT_PAGE: pe,
    selectedTemplateCard: Me,
    pageSettingState: U,
    isTemporaryPage: Fe,
    STATIC_PAGE_GROUP_ID: ye,
    COMMON_PAGE_GROUP_ID: be,
    generateCssString: ke,
    getDefaultPage: Ve,
    syncPageContent: we,
    updatePageSettingAfterSave: Ae,
    isCurrentDataSame: Ge,
    getParentNode: Ce,
    changeTreeData: Re,
    getPageContent: Be,
    initCurrentPageData: He,
    resetPageData: Le,
    isChangePageData: qe,
    generateTree: Ne,
    getPageList: Pe,
    getAncestorsRecursively: _e,
    getAncestors: Ue,
    flatternFolder: Ee,
    getPageChildren: je,
    clearCurrentState: Je,
    switchPage: xe,
    switchPageWithConfirm: Ke,
    updatePageContent: We,
    fetchPageDetailIfNeeded: Xe,
    updateParentId: ze,
    handlePageDetail: Qe,
    getFamily: Ye
  })
}), xe = g((a, t = !1) => {
  if (Je(), a !== 0 && !a) {
    t ? p(P.GlobalService).updateParams({
      pageId: "",
      previewId: ""
    }) : p(P.GlobalService).updatePageId(""), I().initData({
      componentName: Oe.Page,
      props: {}
    }, {}), H().layoutState.pageStatus = {
      state: "empty",
      data: {}
    };
    return;
  }
  return M.fetchPageDetail(a).then((n) => {
    n.isPage && Te().setBreadcrumbPage([n.name]), t ? p(P.GlobalService).updateParams({
      pageId: a,
      previewId: ""
    }) : p(P.GlobalService).updatePageId(a), H().closePlugin(), H().layoutState.pageStatus = Z(n.occupier), I().initData(n.page_content, n);
  }).catch(() => {
    f({
      type: "error",
      message: "切换页面失败，目标页面不存在"
    });
  });
}, {
  metaData: {
    id: "engine.service.page.usePage.switchPage"
  },
  ctx: () => ({
    extend: j,
    isValuesEqual: O,
    constants: R,
    getCanvasStatus: Z,
    useCanvas: I,
    useLayout: H,
    useBreadcrumb: Te,
    useModal: x,
    useNotify: f,
    getMetaApi: p,
    META_SERVICE: P,
    http: M,
    ELEMENT_TAG: Ie,
    COMPONENT_NAME: Oe,
    getOptions: Y,
    DEFAULT_PAGE: pe,
    selectedTemplateCard: Me,
    pageSettingState: U,
    isTemporaryPage: Fe,
    STATIC_PAGE_GROUP_ID: ye,
    COMMON_PAGE_GROUP_ID: be,
    generateCssString: ke,
    getDefaultPage: Ve,
    syncPageContent: we,
    updatePageSettingAfterSave: Ae,
    isCurrentDataSame: Ge,
    getParentNode: Ce,
    changeTreeData: Re,
    getPageContent: Be,
    initCurrentPageData: He,
    resetPageData: Le,
    isChangePageData: qe,
    generateTree: Ne,
    getPageList: Pe,
    getAncestorsRecursively: _e,
    getAncestors: Ue,
    flatternFolder: Ee,
    getPageChildren: je,
    clearCurrentState: Je,
    switchPage: xe,
    switchPageWithConfirm: Ke,
    updatePageContent: We,
    fetchPageDetailIfNeeded: Xe,
    updateParentId: ze,
    handlePageDetail: Qe,
    getFamily: Ye
  })
}), Ke = g((a, t = !1) => {
  const n = g(() => {
    const {
      isSaved: e,
      isBlock: s
    } = I();
    return new Promise((i) => {
      if (e()) {
        i(!0);
        return;
      }
      x().confirm({
        title: "提示",
        message: `${s() ? "区块" : "页面"}尚未保存，是否要继续切换?`,
        exec: () => {
          i(!0);
        },
        cancel: () => {
          i(!1);
        }
      });
    });
  }, {
    metaData: {
      id: "engine.service.page.usePage.checkPageSaved"
    },
    ctx: () => ({
      pageId: a,
      clearPreview: t,
      checkPageSaved: n,
      extend: j,
      isValuesEqual: O,
      constants: R,
      getCanvasStatus: Z,
      useCanvas: I,
      useLayout: H,
      useBreadcrumb: Te,
      useModal: x,
      useNotify: f,
      getMetaApi: p,
      META_SERVICE: P,
      http: M,
      ELEMENT_TAG: Ie,
      COMPONENT_NAME: Oe,
      getOptions: Y,
      DEFAULT_PAGE: pe,
      selectedTemplateCard: Me,
      pageSettingState: U,
      isTemporaryPage: Fe,
      STATIC_PAGE_GROUP_ID: ye,
      COMMON_PAGE_GROUP_ID: be,
      generateCssString: ke,
      getDefaultPage: Ve,
      syncPageContent: we,
      updatePageSettingAfterSave: Ae,
      isCurrentDataSame: Ge,
      getParentNode: Ce,
      changeTreeData: Re,
      getPageContent: Be,
      initCurrentPageData: He,
      resetPageData: Le,
      isChangePageData: qe,
      generateTree: Ne,
      getPageList: Pe,
      getAncestorsRecursively: _e,
      getAncestors: Ue,
      flatternFolder: Ee,
      getPageChildren: je,
      clearCurrentState: Je,
      switchPage: xe,
      switchPageWithConfirm: Ke,
      updatePageContent: We,
      fetchPageDetailIfNeeded: Xe,
      updateParentId: ze,
      handlePageDetail: Qe,
      getFamily: Ye
    })
  });
  n().then((e) => {
    e && xe(a, t);
  });
}, {
  metaData: {
    id: "engine.service.page.usePage.switchPageWithConfirm"
  },
  ctx: () => ({
    extend: j,
    isValuesEqual: O,
    constants: R,
    getCanvasStatus: Z,
    useCanvas: I,
    useLayout: H,
    useBreadcrumb: Te,
    useModal: x,
    useNotify: f,
    getMetaApi: p,
    META_SERVICE: P,
    http: M,
    ELEMENT_TAG: Ie,
    COMPONENT_NAME: Oe,
    getOptions: Y,
    DEFAULT_PAGE: pe,
    selectedTemplateCard: Me,
    pageSettingState: U,
    isTemporaryPage: Fe,
    STATIC_PAGE_GROUP_ID: ye,
    COMMON_PAGE_GROUP_ID: be,
    generateCssString: ke,
    getDefaultPage: Ve,
    syncPageContent: we,
    updatePageSettingAfterSave: Ae,
    isCurrentDataSame: Ge,
    getParentNode: Ce,
    changeTreeData: Re,
    getPageContent: Be,
    initCurrentPageData: He,
    resetPageData: Le,
    isChangePageData: qe,
    generateTree: Ne,
    getPageList: Pe,
    getAncestorsRecursively: _e,
    getAncestors: Ue,
    flatternFolder: Ee,
    getPageChildren: je,
    clearCurrentState: Je,
    switchPage: xe,
    switchPageWithConfirm: Ke,
    updatePageContent: We,
    fetchPageDetailIfNeeded: Xe,
    updateParentId: ze,
    handlePageDetail: Qe,
    getFamily: Ye
  })
}), We = g((a, t) => {
  const n = a.find((e) => e.id === t.id);
  n && (n.page_content = t.page_content);
}, {
  metaData: {
    id: "engine.service.page.usePage.updatePageContent"
  },
  ctx: () => ({
    extend: j,
    isValuesEqual: O,
    constants: R,
    getCanvasStatus: Z,
    useCanvas: I,
    useLayout: H,
    useBreadcrumb: Te,
    useModal: x,
    useNotify: f,
    getMetaApi: p,
    META_SERVICE: P,
    http: M,
    ELEMENT_TAG: Ie,
    COMPONENT_NAME: Oe,
    getOptions: Y,
    DEFAULT_PAGE: pe,
    selectedTemplateCard: Me,
    pageSettingState: U,
    isTemporaryPage: Fe,
    STATIC_PAGE_GROUP_ID: ye,
    COMMON_PAGE_GROUP_ID: be,
    generateCssString: ke,
    getDefaultPage: Ve,
    syncPageContent: we,
    updatePageSettingAfterSave: Ae,
    isCurrentDataSame: Ge,
    getParentNode: Ce,
    changeTreeData: Re,
    getPageContent: Be,
    initCurrentPageData: He,
    resetPageData: Le,
    isChangePageData: qe,
    generateTree: Ne,
    getPageList: Pe,
    getAncestorsRecursively: _e,
    getAncestors: Ue,
    flatternFolder: Ee,
    getPageChildren: je,
    clearCurrentState: Je,
    switchPage: xe,
    switchPageWithConfirm: Ke,
    updatePageContent: We,
    fetchPageDetailIfNeeded: Xe,
    updateParentId: ze,
    handlePageDetail: Qe,
    getFamily: Ye
  })
}), Xe = g(async (a) => {
  if (!a.page_content)
    try {
      const t = await M.fetchPageDetail(a.id);
      a.page_content = t.page_content;
    } catch (t) {
      throw a.page_content = {}, new Error(String(t));
    }
}, {
  metaData: {
    id: "engine.service.page.usePage.fetchPageDetailIfNeeded"
  },
  ctx: () => ({
    extend: j,
    isValuesEqual: O,
    constants: R,
    getCanvasStatus: Z,
    useCanvas: I,
    useLayout: H,
    useBreadcrumb: Te,
    useModal: x,
    useNotify: f,
    getMetaApi: p,
    META_SERVICE: P,
    http: M,
    ELEMENT_TAG: Ie,
    COMPONENT_NAME: Oe,
    getOptions: Y,
    DEFAULT_PAGE: pe,
    selectedTemplateCard: Me,
    pageSettingState: U,
    isTemporaryPage: Fe,
    STATIC_PAGE_GROUP_ID: ye,
    COMMON_PAGE_GROUP_ID: be,
    generateCssString: ke,
    getDefaultPage: Ve,
    syncPageContent: we,
    updatePageSettingAfterSave: Ae,
    isCurrentDataSame: Ge,
    getParentNode: Ce,
    changeTreeData: Re,
    getPageContent: Be,
    initCurrentPageData: He,
    resetPageData: Le,
    isChangePageData: qe,
    generateTree: Ne,
    getPageList: Pe,
    getAncestorsRecursively: _e,
    getAncestors: Ue,
    flatternFolder: Ee,
    getPageChildren: je,
    clearCurrentState: Je,
    switchPage: xe,
    switchPageWithConfirm: Ke,
    updatePageContent: We,
    fetchPageDetailIfNeeded: Xe,
    updateParentId: ze,
    handlePageDetail: Qe,
    getFamily: Ye
  })
}), ze = g((a, t, n, e) => {
  var s;
  a.parentId !== e && !t.find((i) => i.id === a.parentId) && (a.parentId = (s = t[n - 1]) != null && s.id ? t[n - 1].id : e);
}, {
  metaData: {
    id: "engine.service.page.usePage.updateParentId"
  },
  ctx: () => ({
    extend: j,
    isValuesEqual: O,
    constants: R,
    getCanvasStatus: Z,
    useCanvas: I,
    useLayout: H,
    useBreadcrumb: Te,
    useModal: x,
    useNotify: f,
    getMetaApi: p,
    META_SERVICE: P,
    http: M,
    ELEMENT_TAG: Ie,
    COMPONENT_NAME: Oe,
    getOptions: Y,
    DEFAULT_PAGE: pe,
    selectedTemplateCard: Me,
    pageSettingState: U,
    isTemporaryPage: Fe,
    STATIC_PAGE_GROUP_ID: ye,
    COMMON_PAGE_GROUP_ID: be,
    generateCssString: ke,
    getDefaultPage: Ve,
    syncPageContent: we,
    updatePageSettingAfterSave: Ae,
    isCurrentDataSame: Ge,
    getParentNode: Ce,
    changeTreeData: Re,
    getPageContent: Be,
    initCurrentPageData: He,
    resetPageData: Le,
    isChangePageData: qe,
    generateTree: Ne,
    getPageList: Pe,
    getAncestorsRecursively: _e,
    getAncestors: Ue,
    flatternFolder: Ee,
    getPageChildren: je,
    clearCurrentState: Je,
    switchPage: xe,
    switchPageWithConfirm: Ke,
    updatePageContent: We,
    fetchPageDetailIfNeeded: Xe,
    updateParentId: ze,
    handlePageDetail: Qe,
    getFamily: Ye
  })
}), Qe = g(async (a) => {
  const {
    ROOT_ID: t
  } = U;
  a.length > 0 && await Promise.all(a.map(async (n, e) => {
    await Xe(n), ze(n, a, e, t);
  }));
}, {
  metaData: {
    id: "engine.service.page.usePage.handlePageDetail"
  },
  ctx: () => ({
    extend: j,
    isValuesEqual: O,
    constants: R,
    getCanvasStatus: Z,
    useCanvas: I,
    useLayout: H,
    useBreadcrumb: Te,
    useModal: x,
    useNotify: f,
    getMetaApi: p,
    META_SERVICE: P,
    http: M,
    ELEMENT_TAG: Ie,
    COMPONENT_NAME: Oe,
    getOptions: Y,
    DEFAULT_PAGE: pe,
    selectedTemplateCard: Me,
    pageSettingState: U,
    isTemporaryPage: Fe,
    STATIC_PAGE_GROUP_ID: ye,
    COMMON_PAGE_GROUP_ID: be,
    generateCssString: ke,
    getDefaultPage: Ve,
    syncPageContent: we,
    updatePageSettingAfterSave: Ae,
    isCurrentDataSame: Ge,
    getParentNode: Ce,
    changeTreeData: Re,
    getPageContent: Be,
    initCurrentPageData: He,
    resetPageData: Le,
    isChangePageData: qe,
    generateTree: Ne,
    getPageList: Pe,
    getAncestorsRecursively: _e,
    getAncestors: Ue,
    flatternFolder: Ee,
    getPageChildren: je,
    clearCurrentState: Je,
    switchPage: xe,
    switchPageWithConfirm: Ke,
    updatePageContent: We,
    fetchPageDetailIfNeeded: Xe,
    updateParentId: ze,
    handlePageDetail: Qe,
    getFamily: Ye
  })
}), Ye = g(async (a) => {
  U.pages.length === 0 && await Pe();
  const t = _e(a.id).filter((n) => n.isPage).reverse().map((n) => ({
    id: n.id,
    page_content: n.page_content,
    name: n.name,
    parentId: n.parentId,
    route: n.route,
    isPage: n.isPage,
    isBody: n.isBody,
    isHome: n.isHome,
    group: n.group,
    isDefault: n.isDefault,
    depth: n.depth
  }));
  return await Qe(t), We(t, a), t;
}, {
  metaData: {
    id: "engine.service.page.usePage.getFamily"
  },
  ctx: () => ({
    extend: j,
    isValuesEqual: O,
    constants: R,
    getCanvasStatus: Z,
    useCanvas: I,
    useLayout: H,
    useBreadcrumb: Te,
    useModal: x,
    useNotify: f,
    getMetaApi: p,
    META_SERVICE: P,
    http: M,
    ELEMENT_TAG: Ie,
    COMPONENT_NAME: Oe,
    getOptions: Y,
    DEFAULT_PAGE: pe,
    selectedTemplateCard: Me,
    pageSettingState: U,
    isTemporaryPage: Fe,
    STATIC_PAGE_GROUP_ID: ye,
    COMMON_PAGE_GROUP_ID: be,
    generateCssString: ke,
    getDefaultPage: Ve,
    syncPageContent: we,
    updatePageSettingAfterSave: Ae,
    isCurrentDataSame: Ge,
    getParentNode: Ce,
    changeTreeData: Re,
    getPageContent: Be,
    initCurrentPageData: He,
    resetPageData: Le,
    isChangePageData: qe,
    generateTree: Ne,
    getPageList: Pe,
    getAncestorsRecursively: _e,
    getAncestors: Ue,
    flatternFolder: Ee,
    getPageChildren: je,
    clearCurrentState: Je,
    switchPage: xe,
    switchPageWithConfirm: Ke,
    updatePageContent: We,
    fetchPageDetailIfNeeded: Xe,
    updateParentId: ze,
    handlePageDetail: Qe,
    getFamily: Ye
  })
}), dn = () => ({
  getDefaultPage: Ve,
  selectedTemplateCard: Me,
  pageSettingState: U,
  isTemporaryPage: Fe,
  isCurrentDataSame: Ge,
  changeTreeData: Re,
  getPageContent: Be,
  resetPageData: Le,
  initCurrentPageData: He,
  isChangePageData: qe,
  getPageList: Pe,
  getAncestors: Ue,
  switchPage: xe,
  switchPageWithConfirm: Ke,
  getFamily: Ye,
  getPageChildren: je,
  updatePageSettingAfterSave: Ae,
  STATIC_PAGE_GROUP_ID: ye,
  COMMON_PAGE_GROUP_ID: be
}), pn = {
  id: "engine.service.page",
  type: "MetaService",
  apis: dn(),
  composable: {
    name: _t.usePage
  }
}, Pn = {
  components: {
    TinyForm: Mt,
    TinyFormItem: Ot,
    TinyInput: ft,
    TinySelect: It,
    TinyRadio: Tt
  },
  props: {
    modelValue: {
      type: Object,
      default: () => ({})
    },
    isFolder: {
      type: Boolean,
      default: !1
    }
  },
  setup() {
    const {
      pageSettingState: a,
      changeTreeData: t,
      STATIC_PAGE_GROUP_ID: n,
      getPageChildren: e
    } = A(), s = a.ROOT_ID, i = Ma({
      get() {
        return String(a.currentPageData.parentId);
      },
      set(u) {
        a.currentPageData.parentId = u;
      }
    }), o = Sa(i.value), r = Ga({
      childPageList: [],
      childPageOp: [],
      defaultPageId: ""
    }), l = g(async (u) => {
      var E;
      if (a.isNew)
        r.childPageList = [], r.childPageOp = [], r.defaultPageId = "";
      else {
        r.childPageList = await e(u);
        const b = (E = r.childPageList) == null ? void 0 : E.find((F) => F.isDefault);
        a.defaultPage = b || null, r.defaultPageId = b ? b.id : "", r.childPageOp = r.childPageList.map((F) => ({
          value: F.id,
          label: F.name,
          icon: Ha()
        }));
      }
    }, {
      metaData: {
        id: "engine.plugins.appmanage.PageGeneral.setChildAndDefaultPage"
      },
      ctx: () => ({
        pageSettingState: a,
        changeTreeData: t,
        STATIC_PAGE_GROUP_ID: n,
        getPageChildren: e,
        ROOT_ID: s,
        pageParentId: i,
        oldParentId: o,
        state: r,
        setChildAndDefaultPage: l,
        changeDefaultPage: m,
        currentRoute: d,
        pageRules: D,
        folderRules: c,
        pageToTreeData: y,
        getNodeIcon: h,
        treeFolderOp: _,
        generalForm: C,
        validGeneralForm: T,
        changeParentForderId: N,
        iconFile: Ha,
        usePage: A,
        REGEXP_PAGE_NAME: qa,
        REGEXP_FOLDER_NAME: La,
        REGEXP_ROUTE: Va
      })
    }), m = g(() => {
      a.defaultPage = r.childPageList.find((u) => u.id === r.defaultPageId);
    }, {
      metaData: {
        id: "engine.plugins.appmanage.PageGeneral.changeDefaultPage"
      },
      ctx: () => ({
        pageSettingState: a,
        changeTreeData: t,
        STATIC_PAGE_GROUP_ID: n,
        getPageChildren: e,
        ROOT_ID: s,
        pageParentId: i,
        oldParentId: o,
        state: r,
        setChildAndDefaultPage: l,
        changeDefaultPage: m,
        currentRoute: d,
        pageRules: D,
        folderRules: c,
        pageToTreeData: y,
        getNodeIcon: h,
        treeFolderOp: _,
        generalForm: C,
        validGeneralForm: T,
        changeParentForderId: N,
        iconFile: Ha,
        usePage: A,
        REGEXP_PAGE_NAME: qa,
        REGEXP_FOLDER_NAME: La,
        REGEXP_ROUTE: Va
      })
    });
    st(() => {
      var u;
      o.value = a.oldParentId, l((u = a.currentPageData) == null ? void 0 : u.id);
    });
    const d = Ma(() => {
      let u = a.currentPageData.route || "", E = i.value;
      for (; E !== s; ) {
        const b = a.treeDataMapping[E];
        if (!b)
          break;
        u = `${b.route}/${u}`, E = b.parentId;
      }
      return u.startsWith("/") && (u = u.slice(1)), u;
    }), D = {
      name: [{
        required: !0,
        message: "请输入页面 ID"
      }, {
        pattern: qa,
        message: "只允许包含英文字母，且为大写开头驼峰格式, 如DemoPage"
      }, {
        min: 3,
        max: 25,
        message: "长度在 3 到 25 个字符"
      }],
      route: [{
        required: !0,
        message: "请输入页面路由"
      }, {
        pattern: Va,
        message: "只允许包含英文字母、数字、下横线_、中横线-、正斜杠/, 且以英文字母开头"
      }]
    }, c = {
      name: [{
        required: !0,
        message: "请输入页面文件夹 ID"
      }, {
        pattern: La,
        message: "只允许包含英文字母、数字、下横线_、中横线-, 且以英文字母开头"
      }, {
        min: 3,
        max: 25,
        message: "长度在 3 到 25 个字符"
      }],
      route: [{
        required: !0,
        message: "请输入页面文件夹路由"
      }, {
        pattern: Va,
        message: "只允许包含英文字母、数字、下横线_、中横线-、正斜杠/, 且以英文字母开头"
      }],
      group: [{
        required: !0,
        message: "必须选择页面类型"
      }]
    }, y = g((u) => {
      const {
        id: E,
        name: b,
        isPage: F,
        children: G
      } = u, L = {
        id: String(E),
        name: b,
        isPage: F
      };
      return Array.isArray(G) && (L.children = G.filter((B) => B.id !== a.currentPageData.id).map((B) => y(B))), L;
    }, {
      metaData: {
        id: "engine.plugins.appmanage.PageGeneral.pageToTreeData"
      },
      ctx: () => ({
        pageSettingState: a,
        changeTreeData: t,
        STATIC_PAGE_GROUP_ID: n,
        getPageChildren: e,
        ROOT_ID: s,
        pageParentId: i,
        oldParentId: o,
        state: r,
        setChildAndDefaultPage: l,
        changeDefaultPage: m,
        currentRoute: d,
        pageRules: D,
        folderRules: c,
        pageToTreeData: y,
        getNodeIcon: h,
        treeFolderOp: _,
        generalForm: C,
        validGeneralForm: T,
        changeParentForderId: N,
        iconFile: Ha,
        usePage: A,
        REGEXP_PAGE_NAME: qa,
        REGEXP_FOLDER_NAME: La,
        REGEXP_ROUTE: Va
      })
    }), h = g((u) => u.id === s ? null : u.isPage ? ee(ce("SvgIcon"), {
      name: "text-page-common"
    }, null) : ee(ce("SvgIcon"), {
      name: "text-page-folder"
    }, null), {
      metaData: {
        id: "engine.plugins.appmanage.PageGeneral.getNodeIcon"
      },
      ctx: () => ({
        pageSettingState: a,
        changeTreeData: t,
        STATIC_PAGE_GROUP_ID: n,
        getPageChildren: e,
        ROOT_ID: s,
        pageParentId: i,
        oldParentId: o,
        state: r,
        setChildAndDefaultPage: l,
        changeDefaultPage: m,
        currentRoute: d,
        pageRules: D,
        folderRules: c,
        pageToTreeData: y,
        getNodeIcon: h,
        treeFolderOp: _,
        generalForm: C,
        validGeneralForm: T,
        changeParentForderId: N,
        iconFile: Ha,
        usePage: A,
        REGEXP_PAGE_NAME: qa,
        REGEXP_FOLDER_NAME: La,
        REGEXP_ROUTE: Va
      })
    }), _ = Ma(() => {
      var G;
      const u = ((G = a.pages[n]) == null ? void 0 : G.data) || [];
      return {
        data: y({
          children: [{
            name: "无",
            id: s
          }].concat(u)
        }).children,
        shrinkIcon: null,
        expandIcon: null,
        renderContent: (L, {
          node: B,
          data: S
        }) => ee(za, null, [h(S), ee("div", null, [B.label])])
      };
    }), C = Sa(null), T = g(() => new Promise((u) => {
      C.value.validate((E) => {
        E && u(E);
      });
    }), {
      metaData: {
        id: "engine.plugins.appmanage.PageGeneral.validGeneralForm"
      },
      ctx: () => ({
        pageSettingState: a,
        changeTreeData: t,
        STATIC_PAGE_GROUP_ID: n,
        getPageChildren: e,
        ROOT_ID: s,
        pageParentId: i,
        oldParentId: o,
        state: r,
        setChildAndDefaultPage: l,
        changeDefaultPage: m,
        currentRoute: d,
        pageRules: D,
        folderRules: c,
        pageToTreeData: y,
        getNodeIcon: h,
        treeFolderOp: _,
        generalForm: C,
        validGeneralForm: T,
        changeParentForderId: N,
        iconFile: Ha,
        usePage: A,
        REGEXP_PAGE_NAME: qa,
        REGEXP_FOLDER_NAME: La,
        REGEXP_ROUTE: Va
      })
    }), N = g((u) => {
      t(u.id, o.value), o.value = u.id;
    }, {
      metaData: {
        id: "engine.plugins.appmanage.PageGeneral.changeParentForderId"
      },
      ctx: () => ({
        pageSettingState: a,
        changeTreeData: t,
        STATIC_PAGE_GROUP_ID: n,
        getPageChildren: e,
        ROOT_ID: s,
        pageParentId: i,
        oldParentId: o,
        state: r,
        setChildAndDefaultPage: l,
        changeDefaultPage: m,
        currentRoute: d,
        pageRules: D,
        folderRules: c,
        pageToTreeData: y,
        getNodeIcon: h,
        treeFolderOp: _,
        generalForm: C,
        validGeneralForm: T,
        changeParentForderId: N,
        iconFile: Ha,
        usePage: A,
        REGEXP_PAGE_NAME: qa,
        REGEXP_FOLDER_NAME: La,
        REGEXP_ROUTE: Va
      })
    });
    return {
      pageRules: D,
      folderRules: c,
      pageSettingState: a,
      pageParentId: i,
      generalForm: C,
      validGeneralForm: T,
      treeFolderOp: _,
      currentRoute: d,
      changeParentForderId: N,
      state: r,
      changeDefaultPage: m
    };
  }
}, mn = { class: "general-config" }, fn = { class: "tip" }, Dn = {
  key: 0,
  class: "text"
}, yn = {
  key: 1,
  class: "route-text"
}, _n = { class: "tip-text-dim" }, hn = {
  key: 0,
  class: "tip"
}, Sn = { class: "tip-text-dim" }, vn = { class: "tip-text-dim" };
function Cn(a, t, n, e, s, i) {
  const o = ce("tiny-radio"), r = ce("tiny-form-item"), l = ce("tiny-input"), m = ce("tiny-select"), d = ce("tiny-form");
  return ue(), fa("div", mn, [
    ee(d, {
      ref: "generalForm",
      model: e.pageSettingState.currentPageData,
      rules: n.isFolder ? e.folderRules : e.pageRules,
      "label-width": "120px",
      "validate-type": "text",
      "inline-message": !0,
      "label-align": !0,
      "label-position": "top",
      class: "general-config-form"
    }, {
      default: de(() => {
        var D;
        return [
          n.isFolder ? ya("", !0) : (ue(), ma(r, {
            key: 0,
            prop: "group",
            label: "页面类型",
            class: "form-item-page-type"
          }, {
            default: de(() => [
              ee(o, {
                modelValue: e.pageSettingState.currentPageData.group,
                "onUpdate:modelValue": t[0] || (t[0] = (c) => e.pageSettingState.currentPageData.group = c),
                class: "page-type-radio",
                label: "staticPages"
              }, {
                default: de(() => t[6] || (t[6] = [
                  at(" 静态页面 ", -1)
                ])),
                _: 1,
                __: [6]
              }, 8, ["modelValue"]),
              ee(o, {
                modelValue: e.pageSettingState.currentPageData.group,
                "onUpdate:modelValue": t[1] || (t[1] = (c) => e.pageSettingState.currentPageData.group = c),
                class: "page-type-radio",
                label: "publicPages"
              }, {
                default: de(() => t[7] || (t[7] = [
                  at(" 公共页面 ", -1)
                ])),
                _: 1,
                __: [7]
              }, 8, ["modelValue"])
            ]),
            _: 1
          })),
          ee(r, {
            prop: "name",
            label: `${n.isFolder ? "文件夹" : "页面"}名称`
          }, {
            default: de(() => [
              ee(l, {
                modelValue: e.pageSettingState.currentPageData.name,
                "onUpdate:modelValue": t[2] || (t[2] = (c) => e.pageSettingState.currentPageData.name = c),
                placeholder: `请设置${n.isFolder ? "文件夹" : "页面"}名称`
              }, null, 8, ["modelValue", "placeholder"])
            ]),
            _: 1
          }, 8, ["label"]),
          e.pageSettingState.currentPageData.group !== "publicPages" ? (ue(), ma(r, {
            key: 1,
            label: "父文件夹/父页面",
            prop: "parentId"
          }, {
            default: de(() => [
              ee(m, {
                modelValue: e.pageParentId,
                "onUpdate:modelValue": t[3] || (t[3] = (c) => e.pageParentId = c),
                "value-field": "id",
                "render-type": "tree",
                "tree-op": e.treeFolderOp,
                "text-field": "name",
                placeholder: "请选择父文件夹/父页面",
                "popper-class": "parent-fold-select-dropdown",
                onChange: e.changeParentForderId
              }, null, 8, ["modelValue", "tree-op", "onChange"])
            ]),
            _: 1
          })) : ya("", !0),
          ee(r, {
            label: "页面路由",
            prop: "route"
          }, {
            default: de(() => [
              ee(l, {
                modelValue: e.pageSettingState.currentPageData.route,
                "onUpdate:modelValue": t[4] || (t[4] = (c) => e.pageSettingState.currentPageData.route = c),
                placeholder: "请设置路由"
              }, null, 8, ["modelValue"]),
              ea("div", fn, [
                e.pageSettingState.currentPageData.route ? (ue(), fa("span", yn, [
                  t[8] || (t[8] = ea("span", { class: "tip-text" }, "website.com/", -1)),
                  ea("span", _n, Xa(e.currentRoute), 1)
                ])) : (ue(), fa("span", Dn, "路由将以website.com开头"))
              ])
            ]),
            _: 1
          }),
          e.pageSettingState.currentPageData.group !== "publicPages" && !n.isFolder && ((D = e.state.childPageOp) != null && D.length) ? (ue(), ma(r, {
            key: 2,
            label: "设置默认跳转页",
            prop: "isDefault"
          }, {
            default: de(() => {
              var c, y;
              return [
                ee(m, {
                  modelValue: e.state.defaultPageId,
                  "onUpdate:modelValue": t[5] || (t[5] = (h) => e.state.defaultPageId = h),
                  options: e.state.childPageOp,
                  placeholder: "请选择默认跳转页",
                  onChange: e.changeDefaultPage
                }, null, 8, ["modelValue", "options", "onChange"]),
                e.state.defaultPageId ? (ue(), fa("div", hn, [
                  t[9] || (t[9] = ea("div", { class: "tip-text" }, "访问", -1)),
                  ea("span", Sn, "/" + Xa(e.currentRoute), 1),
                  t[10] || (t[10] = ea("div", { class: "tip-text" }, "路由，默认跳转", -1)),
                  ea("span", vn, "/" + Xa(e.currentRoute) + "/" + Xa((y = (c = e.pageSettingState) == null ? void 0 : c.defaultPage) == null ? void 0 : y.route), 1)
                ])) : ya("", !0)
              ];
            }),
            _: 1
          })) : ya("", !0)
        ];
      }),
      _: 1
    }, 8, ["model", "rules"])
  ]);
}
const Nn = /* @__PURE__ */ Fa(Pn, [["render", Cn], ["__scopeId", "data-v-2bfaa8aa"]]), Hn = {
  ...Q,
  apis: Ka,
  entry: un,
  options: {
    pageBaseStyle: {
      className: "page-base-style",
      style: "padding: 24px;background: #FFFFFF;"
    }
  },
  components: {
    PageGeneral: Nn
  },
  metas: [pn]
};
export {
  pn as PageService,
  Hn as default
};
//# sourceMappingURL=index.js.map
