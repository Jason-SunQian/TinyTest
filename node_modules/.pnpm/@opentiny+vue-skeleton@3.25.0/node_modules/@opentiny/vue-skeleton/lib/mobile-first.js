import { renderless, api } from '@opentiny/vue-renderless/skeleton/vue';
import { defineComponent, props, setup } from '@opentiny/vue-common';
import SkeletonItem from '@opentiny/vue-skeleton-item';
import { resolveComponent, openBlock, createElementBlock, renderSlot, createElementVNode, createBlock, createCommentVNode, createVNode, Fragment, renderList, normalizeClass, normalizeStyle } from 'vue';

function _createForOfIteratorHelperLoose(r, e) {
  var t = "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (t) return (t = t.call(r)).next.bind(t);
  if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && "number" == typeof r.length) {
    t && (r = t);
    var o = 0;
    return function() {
      return o >= r.length ? { done: true } : { done: false, value: r[o++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r) return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}
function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
  return n;
}
var _export_sfc = function _export_sfc2(sfc, props) {
  var target = sfc.__vccOpts || sfc;
  for (var _iterator = _createForOfIteratorHelperLoose(props), _step; !(_step = _iterator()).done; ) {
    var _step$value = _step.value, key = _step$value[0], val = _step$value[1];
    target[key] = val;
  }
  return target;
};

var _sfc_main = defineComponent({
  emits: [],
  props: [].concat(props, ["loading", "rows", "avatar", "rowsWidth", "animated"]),
  components: {
    TinySkeletonItem: SkeletonItem
  },
  setup: function setup$1(props2, context) {
    return setup({
      props: props2,
      context,
      renderless,
      api
    });
  }
});
var _hoisted_1 = {
  class: "w-full",
  "data-tag": "tiny-skeleton"
};
var _hoisted_2 = {
  "data-tag": "tiny-skeleton__article",
  class: "flex w-full"
};
var _hoisted_3 = {
  "data-tag": "tiny-skeleton__section",
  class: "w-full"
};
var _hoisted_4 = {
  "data-tag": "tiny-skeleton-item__rows",
  class: "mt-6 mb-6"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  var _component_tiny_skeleton_item = resolveComponent("tiny-skeleton-item");
  return openBlock(), createElementBlock("div", _hoisted_1, [_ctx.loading ? renderSlot(_ctx.$slots, "placeholder", {
    key: 0
  }, function() {
    return [createElementVNode("div", _hoisted_2, [_ctx.avatar ? (openBlock(), createBlock(_component_tiny_skeleton_item, {
      key: 0,
      variant: "circle",
      "data-tag": "tiny-skeleton__avatar",
      class: "relative overflow-hidden shrink-0 mr-4"
    })) : createCommentVNode("v-if", true), createElementVNode("div", _hoisted_3, [createVNode(_component_tiny_skeleton_item, {
      "data-tag": "tiny-skeleton-item__title",
      class: "w-60 h-12"
    }), createElementVNode("div", _hoisted_4, [(openBlock(true), createElementBlock(
      Fragment,
      null,
      renderList(_ctx.rows, function(item, index) {
        return openBlock(), createBlock(_component_tiny_skeleton_item, {
          class: normalizeClass(index === _ctx.rows - 1 ? "mb-0 w-3/5" : "mb-3"),
          key: item,
          style: normalizeStyle({
            width: _ctx.toPxStyle(_ctx.rowsWidth[index])
          })
        }, null, 8, ["class", "style"]);
      }),
      128
      /* KEYED_FRAGMENT */
    ))])])])];
  }) : renderSlot(_ctx.$slots, "default", {
    key: 1
  })]);
}
var mobileFirst = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);

export { mobileFirst as default };
