import "./style.css";
import { useLayout as I, getMetaApi as f, META_SERVICE as v, getMergeMeta as T, callEntry as B, useModal as M, useCompile as re } from "@opentiny/tiny-engine-meta-register";
import { defineComponent as pe, reactive as me, computed as z, ref as H, nextTick as J, onUnmounted as ue, resolveComponent as de, createBlock as K, openBlock as G, unref as a, withCtx as n, createElementVNode as E, createElementBlock as O, createCommentVNode as ce, createVNode as l, withModifiers as ge, Fragment as fe, renderList as ve, toDisplayString as Q, createTextVNode as F } from "vue";
import { Loading as W, DialogBox as X, Form as we, FormItem as q, Input as R, Switch as Y, Tooltip as Z, Button as ee } from "@opentiny/vue";
import { iconHelpCircle as N } from "@opentiny/vue-icon";
import { ToolbarBase as U } from "@opentiny/tiny-engine-common";
import { isDevelopEnv as _ } from "@opentiny/tiny-engine-common/js/environments";
const ie = {
  id: "engine.toolbars.logo",
  type: "toolbars",
  title: "logo",
  options: {
    icon: {
      default: "logo"
    },
    renderType: "slot"
  }
}, te = {
  class: "top-panel-logo"
}, oe = {
  class: "menu-icon-wrapper"
}, ae = {
  key: 0,
  class: "main-menu"
}, ne = ["onClick"], le = {
  class: "menu-item"
}, se = {
  key: 1
}, be = /* @__PURE__ */ pe({
  __name: "Main",
  props: {
    options: {
      type: Object,
      default: () => ({})
    }
  },
  setup(P) {
    var j;
    const {
      PLUGIN_NAME: m,
      activePlugin: r
    } = I(), u = N(), p = f(v.GlobalService).getState(), e = me({
      hoverState: !1,
      showMenu: !1,
      show: !1,
      showPreview: !1,
      formData: {
        version: "",
        account: "",
        password: "",
        commitMsg: "",
        branch: "",
        allGenerate: !1,
        canCreateNewBranch: !1
      },
      title: z(() => e.showPreview ? "发布应用" : "保存历史版本"),
      appName: z(() => p.appInfo.name),
      leaveTimeoutId: null,
      overTimeoutId: null
    }), i = H(!1), d = H("发布成功"), w = H(null), D = H(((j = T("engine.config")) == null ? void 0 : j.dslMode) === "Angular" ? [] : [{
      name: "应用发布",
      code: "publishApp",
      icon: "news"
    }]), y = B((s) => {
      const t = s.target.value.replaceAll(/^\s*/g, "");
      e.formData.commitMsg = t;
    }, {
      metaData: {
        id: "engine.toolbars.logo.Main.repalceTrim"
      },
      ctx: () => ({
        iconHelpCircle: N,
        useLayout: I,
        useModal: M,
        getMetaApi: f,
        META_SERVICE: v,
        getMergeMeta: T,
        ToolbarBase: U,
        isDevelopEnv: _,
        PLUGIN_NAME: m,
        activePlugin: r,
        IconHelp: u,
        globalState: p,
        state: e,
        tipBoxVisibility: i,
        tipText: d,
        form: w,
        menus: D,
        repalceTrim: y,
        getTargetUrl: b,
        actions: g,
        confirm: k,
        handleClick: C,
        rules: x,
        saveRule: V,
        handleCloseMenu: c,
        handleTitleClick: h
      })
    }), b = B((s) => `/#/${s}/`, {
      metaData: {
        id: "engine.toolbars.logo.Main.getTargetUrl"
      },
      ctx: () => ({
        iconHelpCircle: N,
        useLayout: I,
        useModal: M,
        getMetaApi: f,
        META_SERVICE: v,
        getMergeMeta: T,
        ToolbarBase: U,
        isDevelopEnv: _,
        PLUGIN_NAME: m,
        activePlugin: r,
        IconHelp: u,
        globalState: p,
        state: e,
        tipBoxVisibility: i,
        tipText: d,
        form: w,
        menus: D,
        repalceTrim: y,
        getTargetUrl: b,
        actions: g,
        confirm: k,
        handleClick: C,
        rules: x,
        saveRule: V,
        handleCloseMenu: c,
        handleTitleClick: h
      })
    }), g = {
      pageManagement() {
        r(m.AppManage);
      },
      blockManagement() {
        r(m.BlockManage);
      },
      gotoPlatformCenter() {
        window.open(b("my-platform"), "_blank");
      },
      gotoMaterialCenter() {
        window.open(b("ecosystem/material"), "_blank");
      },
      logout() {
        window.location.href = "/platform-center/api/logout";
      },
      saveAppHistory() {
        e.show = !0, e.showPreview = !1;
      },
      publishApp() {
        e.show = !0;
        const s = localStorage.getItem("tinyengine_publishMsg") ? JSON.parse(localStorage.getItem("tinyengine_publishMsg")) : "";
        s && (e.formData.branch = s.branch, e.formData.allGenerate = !1), e.showPreview = !0;
      },
      previewApp() {
        const s = p.appInfo.id, t = B(() => new URLSearchParams(location.search).get("tenant"), {
          metaData: {
            id: "engine.toolbars.logo.Main.getTenant"
          },
          ctx: () => ({
            appId: s,
            getTenant: t,
            tenantId: $,
            href: o,
            openUrl: S,
            iconHelpCircle: N,
            useLayout: I,
            useModal: M,
            getMetaApi: f,
            META_SERVICE: v,
            getMergeMeta: T,
            ToolbarBase: U,
            isDevelopEnv: _,
            PLUGIN_NAME: m,
            activePlugin: r,
            IconHelp: u,
            globalState: p,
            state: e,
            tipBoxVisibility: i,
            tipText: d,
            form: w,
            menus: D,
            repalceTrim: y,
            getTargetUrl: b,
            actions: g,
            confirm: k,
            handleClick: C,
            rules: x,
            saveRule: V,
            handleCloseMenu: c,
            handleTitleClick: h
          })
        }), $ = t() || "", o = window.location.href.split("?")[0] || "./", S = _ ? `./previewApp.html?appid=${s}&tenant=${$}` : `${o}/previewApp?appid=${s}&tenant=${$}`;
        window.open(S);
      }
    }, k = B(() => {
      var t;
      const s = p.appInfo.id;
      (t = w.value) == null || t.validate(($) => {
        if ($)
          if (e.showPreview) {
            const o = W.service({
              text: "发布中，请稍后...",
              customClass: "new-loading",
              target: document.getElementById("tiny-loading"),
              background: "rgba(0, 0, 0, 0.6)"
            });
            e.show = !1;
            const S = {
              commitMsg: e.formData.commitMsg,
              branch: e.formData.branch,
              canCreateNewBranch: e.formData.canCreateNewBranch,
              allGenerate: e.formData.allGenerate
            };
            localStorage.setItem("tinyengine_publishMsg", JSON.stringify(S)), f(v.Http).post(`/app-center/api/apps/publish/${s}`, S).then((A) => {
              var L;
              A.code === 200 ? d.value = "发布成功" : d.value = ((L = A == null ? void 0 : A.error) == null ? void 0 : L.message) || "发布失败，请重新发布", o.close(), J(() => {
                i.value = !0;
              }), setTimeout(() => {
                i.value = !1;
              }, 5e3);
            }).catch((A) => {
              var L;
              o.close(), d.value = ((L = A == null ? void 0 : A.error) == null ? void 0 : L.message) || "发布失败，请重新发布", J(() => {
                i.value = !0;
              }), setTimeout(() => {
                i.value = !1;
              }, 5e3);
            });
          } else {
            const o = W.service({
              text: "应用保存中，请稍后...",
              customClass: "new-loading",
              target: document.getElementById("tiny-loading"),
              background: "rgba(0, 0, 0, 0.8)"
            });
            f(v.Http).get(`/app-center/api/apps/save/${s}?version=${e.formData.version}`).then((S) => {
              e.show = !1, o.close(), S ? M().message({
                message: "保存成功"
              }) : M().message({
                message: "保存失败"
              });
            });
          }
      });
    }, {
      metaData: {
        id: "engine.toolbars.logo.Main.confirm"
      },
      ctx: () => ({
        iconHelpCircle: N,
        useLayout: I,
        useModal: M,
        getMetaApi: f,
        META_SERVICE: v,
        getMergeMeta: T,
        ToolbarBase: U,
        isDevelopEnv: _,
        PLUGIN_NAME: m,
        activePlugin: r,
        IconHelp: u,
        globalState: p,
        state: e,
        tipBoxVisibility: i,
        tipText: d,
        form: w,
        menus: D,
        repalceTrim: y,
        getTargetUrl: b,
        actions: g,
        confirm: k,
        handleClick: C,
        rules: x,
        saveRule: V,
        handleCloseMenu: c,
        handleTitleClick: h
      })
    }), C = B(({
      code: s
    }) => {
      var t;
      (t = g[s]) == null || t.call(g);
    }, {
      metaData: {
        id: "engine.toolbars.logo.Main.handleClick"
      },
      ctx: () => ({
        iconHelpCircle: N,
        useLayout: I,
        useModal: M,
        getMetaApi: f,
        META_SERVICE: v,
        getMergeMeta: T,
        ToolbarBase: U,
        isDevelopEnv: _,
        PLUGIN_NAME: m,
        activePlugin: r,
        IconHelp: u,
        globalState: p,
        state: e,
        tipBoxVisibility: i,
        tipText: d,
        form: w,
        menus: D,
        repalceTrim: y,
        getTargetUrl: b,
        actions: g,
        confirm: k,
        handleClick: C,
        rules: x,
        saveRule: V,
        handleCloseMenu: c,
        handleTitleClick: h
      })
    }), x = {
      account: [{
        required: !0,
        message: "必填",
        trigger: "change"
      }],
      password: [{
        required: !0,
        message: "必填",
        trigger: "change"
      }],
      commitMsg: [{
        required: !0,
        message: "必填",
        trigger: "change"
      }],
      branch: [{
        required: !0,
        message: "必填",
        trigger: "change"
      }]
    }, V = {
      version: [{
        required: !0,
        message: "必填",
        trigger: "change"
      }]
    }, c = B(() => {
      e.showMenu = !1, window.removeEventListener("click", c);
    }, {
      metaData: {
        id: "engine.toolbars.logo.Main.handleCloseMenu"
      },
      ctx: () => ({
        iconHelpCircle: N,
        useLayout: I,
        useModal: M,
        getMetaApi: f,
        META_SERVICE: v,
        getMergeMeta: T,
        ToolbarBase: U,
        isDevelopEnv: _,
        PLUGIN_NAME: m,
        activePlugin: r,
        IconHelp: u,
        globalState: p,
        state: e,
        tipBoxVisibility: i,
        tipText: d,
        form: w,
        menus: D,
        repalceTrim: y,
        getTargetUrl: b,
        actions: g,
        confirm: k,
        handleClick: C,
        rules: x,
        saveRule: V,
        handleCloseMenu: c,
        handleTitleClick: h
      })
    }), h = B(() => {
      e.showMenu = !e.showMenu, e.showMenu ? window.addEventListener("click", c) : window.removeEventListener("click", c);
    }, {
      metaData: {
        id: "engine.toolbars.logo.Main.handleTitleClick"
      },
      ctx: () => ({
        iconHelpCircle: N,
        useLayout: I,
        useModal: M,
        getMetaApi: f,
        META_SERVICE: v,
        getMergeMeta: T,
        ToolbarBase: U,
        isDevelopEnv: _,
        PLUGIN_NAME: m,
        activePlugin: r,
        IconHelp: u,
        globalState: p,
        state: e,
        tipBoxVisibility: i,
        tipText: d,
        form: w,
        menus: D,
        repalceTrim: y,
        getTargetUrl: b,
        actions: g,
        confirm: k,
        handleClick: C,
        rules: x,
        saveRule: V,
        handleCloseMenu: c,
        handleTitleClick: h
      })
    });
    return ue(B(B(() => {
      window.removeEventListener("click", c);
    }, {
      metaData: {
        id: "engine.toolbars.logo.Main.onUnmounted[0]"
      },
      ctx: () => ({
        iconHelpCircle: N,
        useLayout: I,
        useModal: M,
        getMetaApi: f,
        META_SERVICE: v,
        getMergeMeta: T,
        ToolbarBase: U,
        isDevelopEnv: _,
        PLUGIN_NAME: m,
        activePlugin: r,
        IconHelp: u,
        globalState: p,
        state: e,
        tipBoxVisibility: i,
        tipText: d,
        form: w,
        menus: D,
        repalceTrim: y,
        getTargetUrl: b,
        actions: g,
        confirm: k,
        handleClick: C,
        rules: x,
        saveRule: V,
        handleCloseMenu: c,
        handleTitleClick: h
      })
    }), {
      metaData: {
        id: "engine.toolbars.logo.Main.onUnmounted[0]"
      },
      ctx: () => ({
        __props: P,
        PLUGIN_NAME: m,
        activePlugin: r,
        IconHelp: u,
        globalState: p,
        state: e,
        tipBoxVisibility: i,
        tipText: d,
        form: w,
        menus: D,
        repalceTrim: y,
        getTargetUrl: b,
        actions: g,
        confirm: k,
        handleClick: C,
        rules: x,
        saveRule: V,
        handleCloseMenu: c,
        handleTitleClick: h,
        _hoisted_1: te,
        _hoisted_2: oe,
        _hoisted_3: ae,
        _hoisted_4: ne,
        _hoisted_5: le,
        _hoisted_6: se,
        _callEntry: B,
        _useCompile: re,
        _metaData: ie,
        iconHelpCircle: N,
        useLayout: I,
        useModal: M,
        getMetaApi: f,
        META_SERVICE: v,
        getMergeMeta: T,
        ToolbarBase: U,
        isDevelopEnv: _
      })
    })), (s, t) => {
      const $ = de("svg-icon");
      return G(), K(a(U), {
        options: P.options
      }, {
        default: n(() => [E("div", te, [E("h1", {
          class: "logo-wrap",
          onClick: t[0] || (t[0] = ge(
            //@ts-ignore
            (...o) => a(h) && a(h)(...o),
            ["stop"]
          ))
        }, [E("div", oe, [l($, {
          name: P.options.icon.default || P.options.icon
        }, null, 8, ["name"])])]), e.showMenu ? (G(), O("div", ae, [E("ul", null, [(G(!0), O(fe, null, ve(D.value, (o, S) => (G(), O("li", {
          key: S,
          onClick: (A) => a(C)(o)
        }, [E("span", le, Q(o.name), 1)], 8, ne))), 128))])])) : ce("", !0), l(a(X), {
          visible: e.show,
          "onUpdate:visible": t[7] || (t[7] = (o) => e.show = o),
          title: e.title,
          width: "400px",
          "append-to-body": !0
        }, {
          footer: n(() => [l(a(ee), {
            type: "primary",
            onClick: a(k)
          }, {
            default: n(() => t[15] || (t[15] = [F("确定", -1)])),
            _: 1,
            __: [15]
          }, 8, ["onClick"]), l(a(ee), {
            onClick: t[6] || (t[6] = (o) => e.show = !1)
          }, {
            default: n(() => t[16] || (t[16] = [F("取消", -1)])),
            _: 1,
            __: [16]
          })]),
          default: n(() => [l(a(we), {
            ref_key: "form",
            ref: w,
            class: "publish-app-form",
            model: e.formData,
            rules: e.showPreview ? x : V,
            "validate-position": "bottom-start",
            "inline-message": !0,
            "validate-type": "text",
            "label-position": "left",
            "label-align": !0,
            "label-width": "110px"
          }, {
            default: n(() => [e.showPreview ? (G(), O("div", se, [l(a(q), {
              prop: "commitMsg",
              label: "提交日志"
            }, {
              default: n(() => [l(a(R), {
                modelValue: e.formData.commitMsg,
                "onUpdate:modelValue": t[2] || (t[2] = (o) => e.formData.commitMsg = o),
                placeholder: "请输入提交到git库的日志",
                onBlur: a(y)
              }, null, 8, ["modelValue", "onBlur"])]),
              _: 1
            }), l(a(q), {
              prop: "branch",
              label: "分支名称"
            }, {
              default: n(() => [l(a(R), {
                modelValue: e.formData.branch,
                "onUpdate:modelValue": t[3] || (t[3] = (o) => e.formData.branch = o),
                placeholder: "请输入分支名称"
              }, null, 8, ["modelValue"])]),
              _: 1
            }), l(a(q), {
              prop: "canCreateNewBranch"
            }, {
              label: n(() => t[9] || (t[9] = [F("创建分支 ", -1)])),
              default: n(() => [l(a(Y), {
                modelValue: e.formData.canCreateNewBranch,
                "onUpdate:modelValue": t[4] || (t[4] = (o) => e.formData.canCreateNewBranch = o)
              }, {
                open: n(() => t[10] || (t[10] = [E("span", null, "是", -1)])),
                close: n(() => t[11] || (t[11] = [E("span", null, "否", -1)])),
                _: 1
              }, 8, ["modelValue"]), l(a(Z), {
                class: "item",
                effect: "light",
                content: "分支不存在的时候创建分支。若不开启，分支不存在时发布应用会失败。",
                placement: "top",
                "popper-class": "help-tooltip"
              }, {
                default: n(() => [l(a(u), {
                  class: "tiny-svg-size icon-help"
                })]),
                _: 1
              })]),
              _: 1
            }), l(a(q), {
              prop: "allGenerate"
            }, {
              label: n(() => t[12] || (t[12] = [F("生成工程配置 ", -1)])),
              default: n(() => [l(a(Y), {
                modelValue: e.formData.allGenerate,
                "onUpdate:modelValue": t[5] || (t[5] = (o) => e.formData.allGenerate = o)
              }, {
                open: n(() => t[13] || (t[13] = [E("span", null, "是", -1)])),
                close: n(() => t[14] || (t[14] = [E("span", null, "否", -1)])),
                _: 1
              }, 8, ["modelValue"]), l(a(Z), {
                class: "item",
                effect: "light",
                content: "是否生成工程默认配置，如package.json等文件。如选择为否，只生成页面对应代码，不生成配置文件。",
                placement: "top",
                "popper-class": "help-tooltip"
              }, {
                default: n(() => [l(a(u), {
                  class: "tiny-svg-size icon-help"
                })]),
                _: 1
              })]),
              _: 1
            })])) : (G(), K(a(q), {
              key: 0,
              prop: "version",
              label: "历史版本"
            }, {
              default: n(() => [l(a(R), {
                modelValue: e.formData.version,
                "onUpdate:modelValue": t[1] || (t[1] = (o) => e.formData.version = o),
                placeholder: "请输入版本号"
              }, null, 8, ["modelValue"])]),
              _: 1
            }))]),
            _: 1
          }, 8, ["model", "rules"])]),
          _: 1
        }, 8, ["visible", "title"]), l(a(X), {
          visible: i.value,
          "onUpdate:visible": t[8] || (t[8] = (o) => i.value = o),
          title: "消息",
          width: "30%",
          modal: !1
        }, {
          footer: n(() => t[17] || (t[17] = [])),
          default: n(() => [E("span", null, Q(d.value), 1)]),
          _: 1
        }, 8, ["visible"])])]),
        _: 1
      }, 8, ["options"]);
    };
  }
}), he = (P, m) => {
  const r = P.__vccOpts || P;
  for (const [u, p] of m)
    r[u] = p;
  return r;
}, Me = /* @__PURE__ */ he(be, [["__scopeId", "data-v-29a68ab7"]]), Te = {
  ...ie,
  entry: Me
};
export {
  Te as default
};
//# sourceMappingURL=index.js.map
