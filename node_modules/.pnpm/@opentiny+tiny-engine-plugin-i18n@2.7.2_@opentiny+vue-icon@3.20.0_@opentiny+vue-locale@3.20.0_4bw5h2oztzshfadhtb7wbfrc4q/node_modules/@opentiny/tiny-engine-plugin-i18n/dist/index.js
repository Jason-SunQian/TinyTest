import "./style.css";
import { resolveComponent as ze, createVNode as F, reactive as Ze, ref as Be, computed as We, provide as $e, onMounted as et, watch as tt, watchEffect as nt, nextTick as ot, createBlock as Ye, openBlock as Fe, withCtx as je, createElementVNode as Ue, withDirectives as at, createTextVNode as Ge, vShow as it, createElementBlock as Je, createCommentVNode as rt, withModifiers as st, toDisplayString as ct } from "vue";
import { callEntry as I, getMergeMeta as le, useLayout as de, META_SERVICE as C, getMetaApi as k, useHelp as fe, useModal as ue, useTranslate as Z, useCanvas as ie, useResource as Ee, HOOK_NAME as lt } from "@opentiny/tiny-engine-meta-register";
import { FileUpload as ut, Select as dt, GridColumn as ft, Grid as pt, Button as yt, Input as gt, Tooltip as vt, Popover as mt, Loading as ht } from "@opentiny/vue";
import { iconLoadingShadow as pe } from "@opentiny/vue-icon";
import { SearchEmpty as ye, PluginPanel as ge } from "@opentiny/tiny-engine-common";
import { constants as A, utils as D } from "@opentiny/tiny-engine-utils";
import { BASE_URL as ae, isVsCodeEnv as Ce } from "@opentiny/tiny-engine-common/js/environments";
import { generateI18n as ke } from "@opentiny/tiny-engine-common/js/vscodeGenerateFile";
import { PROP_DATA_TYPE as he } from "@opentiny/tiny-engine-common/js/constants";
var bt = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof global < "u" ? global : typeof self < "u" ? self : {};
function _t(u) {
  return u && u.__esModule && Object.prototype.hasOwnProperty.call(u, "default") ? u.default : u;
}
var Qe = { exports: {} };
/*!
 * clipboard.js v2.0.11
 * https://clipboardjs.com/
 *
 * Licensed MIT Â© Zeno Rocha
 */
(function(u, t) {
  (function(n, h) {
    u.exports = h();
  })(bt, function() {
    return (
      /******/
      function() {
        var g = {
          /***/
          686: (
            /***/
            function(r, i, e) {
              e.d(i, {
                default: function() {
                  return (
                    /* binding */
                    oe
                  );
                }
              });
              var s = e(279), l = /* @__PURE__ */ e.n(s), y = e(370), b = /* @__PURE__ */ e.n(y), T = e(817), S = /* @__PURE__ */ e.n(T);
              function _(p) {
                try {
                  return document.execCommand(p);
                } catch {
                  return !1;
                }
              }
              var x = function(a) {
                var o = S()(a);
                return _("cut"), o;
              }, w = x;
              function m(p) {
                var a = document.documentElement.getAttribute("dir") === "rtl", o = document.createElement("textarea");
                o.style.fontSize = "12pt", o.style.border = "0", o.style.padding = "0", o.style.margin = "0", o.style.position = "absolute", o.style[a ? "right" : "left"] = "-9999px";
                var d = window.pageYOffset || document.documentElement.scrollTop;
                return o.style.top = "".concat(d, "px"), o.setAttribute("readonly", ""), o.value = p, o;
              }
              var P = function(a, o) {
                var d = m(a);
                o.container.appendChild(d);
                var f = S()(d);
                return _("copy"), d.remove(), f;
              }, H = function(a) {
                var o = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
                  container: document.body
                }, d = "";
                return typeof a == "string" ? d = P(a, o) : a instanceof HTMLInputElement && !["text", "search", "url", "tel", "password"].includes(a == null ? void 0 : a.type) ? d = P(a.value, o) : (d = S()(a), _("copy")), d;
              }, j = H;
              function M(p) {
                "@babel/helpers - typeof";
                return typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? M = function(o) {
                  return typeof o;
                } : M = function(o) {
                  return o && typeof Symbol == "function" && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
                }, M(p);
              }
              var G = function() {
                var a = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, o = a.action, d = o === void 0 ? "copy" : o, f = a.container, v = a.target, L = a.text;
                if (d !== "copy" && d !== "cut")
                  throw new Error('Invalid "action" value, use either "copy" or "cut"');
                if (v !== void 0)
                  if (v && M(v) === "object" && v.nodeType === 1) {
                    if (d === "copy" && v.hasAttribute("disabled"))
                      throw new Error('Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute');
                    if (d === "cut" && (v.hasAttribute("readonly") || v.hasAttribute("disabled")))
                      throw new Error(`Invalid "target" attribute. You can't cut text from elements with "readonly" or "disabled" attributes`);
                  } else
                    throw new Error('Invalid "target" value, use a valid Element');
                if (L)
                  return j(L, {
                    container: f
                  });
                if (v)
                  return d === "cut" ? w(v) : j(v, {
                    container: f
                  });
              }, z = G;
              function R(p) {
                "@babel/helpers - typeof";
                return typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? R = function(o) {
                  return typeof o;
                } : R = function(o) {
                  return o && typeof Symbol == "function" && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
                }, R(p);
              }
              function Q(p, a) {
                if (!(p instanceof a))
                  throw new TypeError("Cannot call a class as a function");
              }
              function O(p, a) {
                for (var o = 0; o < a.length; o++) {
                  var d = a[o];
                  d.enumerable = d.enumerable || !1, d.configurable = !0, "value" in d && (d.writable = !0), Object.defineProperty(p, d.key, d);
                }
              }
              function $(p, a, o) {
                return a && O(p.prototype, a), o && O(p, o), p;
              }
              function K(p, a) {
                if (typeof a != "function" && a !== null)
                  throw new TypeError("Super expression must either be null or a function");
                p.prototype = Object.create(a && a.prototype, { constructor: { value: p, writable: !0, configurable: !0 } }), a && V(p, a);
              }
              function V(p, a) {
                return V = Object.setPrototypeOf || function(d, f) {
                  return d.__proto__ = f, d;
                }, V(p, a);
              }
              function X(p) {
                var a = q();
                return function() {
                  var d = B(p), f;
                  if (a) {
                    var v = B(this).constructor;
                    f = Reflect.construct(d, arguments, v);
                  } else
                    f = d.apply(this, arguments);
                  return ee(this, f);
                };
              }
              function ee(p, a) {
                return a && (R(a) === "object" || typeof a == "function") ? a : te(p);
              }
              function te(p) {
                if (p === void 0)
                  throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                return p;
              }
              function q() {
                if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham) return !1;
                if (typeof Proxy == "function") return !0;
                try {
                  return Date.prototype.toString.call(Reflect.construct(Date, [], function() {
                  })), !0;
                } catch {
                  return !1;
                }
              }
              function B(p) {
                return B = Object.setPrototypeOf ? Object.getPrototypeOf : function(o) {
                  return o.__proto__ || Object.getPrototypeOf(o);
                }, B(p);
              }
              function J(p, a) {
                var o = "data-clipboard-".concat(p);
                if (a.hasAttribute(o))
                  return a.getAttribute(o);
              }
              var ne = /* @__PURE__ */ function(p) {
                K(o, p);
                var a = X(o);
                function o(d, f) {
                  var v;
                  return Q(this, o), v = a.call(this), v.resolveOptions(f), v.listenClick(d), v;
                }
                return $(o, [{
                  key: "resolveOptions",
                  value: function() {
                    var f = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
                    this.action = typeof f.action == "function" ? f.action : this.defaultAction, this.target = typeof f.target == "function" ? f.target : this.defaultTarget, this.text = typeof f.text == "function" ? f.text : this.defaultText, this.container = R(f.container) === "object" ? f.container : document.body;
                  }
                  /**
                   * Adds a click event listener to the passed trigger.
                   * @param {String|HTMLElement|HTMLCollection|NodeList} trigger
                   */
                }, {
                  key: "listenClick",
                  value: function(f) {
                    var v = this;
                    this.listener = b()(f, "click", function(L) {
                      return v.onClick(L);
                    });
                  }
                  /**
                   * Defines a new `ClipboardAction` on each click event.
                   * @param {Event} e
                   */
                }, {
                  key: "onClick",
                  value: function(f) {
                    var v = f.delegateTarget || f.currentTarget, L = this.action(v) || "copy", c = z({
                      action: L,
                      container: this.container,
                      target: this.target(v),
                      text: this.text(v)
                    });
                    this.emit(c ? "success" : "error", {
                      action: L,
                      text: c,
                      trigger: v,
                      clearSelection: function() {
                        v && v.focus(), window.getSelection().removeAllRanges();
                      }
                    });
                  }
                  /**
                   * Default `action` lookup function.
                   * @param {Element} trigger
                   */
                }, {
                  key: "defaultAction",
                  value: function(f) {
                    return J("action", f);
                  }
                  /**
                   * Default `target` lookup function.
                   * @param {Element} trigger
                   */
                }, {
                  key: "defaultTarget",
                  value: function(f) {
                    var v = J("target", f);
                    if (v)
                      return document.querySelector(v);
                  }
                  /**
                   * Allow fire programmatically a copy action
                   * @param {String|HTMLElement} target
                   * @param {Object} options
                   * @returns Text copied.
                   */
                }, {
                  key: "defaultText",
                  /**
                   * Default `text` lookup function.
                   * @param {Element} trigger
                   */
                  value: function(f) {
                    return J("text", f);
                  }
                  /**
                   * Destroy lifecycle.
                   */
                }, {
                  key: "destroy",
                  value: function() {
                    this.listener.destroy();
                  }
                }], [{
                  key: "copy",
                  value: function(f) {
                    var v = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
                      container: document.body
                    };
                    return j(f, v);
                  }
                  /**
                   * Allow fire programmatically a cut action
                   * @param {String|HTMLElement} target
                   * @returns Text cutted.
                   */
                }, {
                  key: "cut",
                  value: function(f) {
                    return w(f);
                  }
                  /**
                   * Returns the support of the given action, or all actions if no action is
                   * given.
                   * @param {String} [action]
                   */
                }, {
                  key: "isSupported",
                  value: function() {
                    var f = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : ["copy", "cut"], v = typeof f == "string" ? [f] : f, L = !!document.queryCommandSupported;
                    return v.forEach(function(c) {
                      L = L && !!document.queryCommandSupported(c);
                    }), L;
                  }
                }]), o;
              }(l()), oe = ne;
            }
          ),
          /***/
          828: (
            /***/
            function(r) {
              var i = 9;
              if (typeof Element < "u" && !Element.prototype.matches) {
                var e = Element.prototype;
                e.matches = e.matchesSelector || e.mozMatchesSelector || e.msMatchesSelector || e.oMatchesSelector || e.webkitMatchesSelector;
              }
              function s(l, y) {
                for (; l && l.nodeType !== i; ) {
                  if (typeof l.matches == "function" && l.matches(y))
                    return l;
                  l = l.parentNode;
                }
              }
              r.exports = s;
            }
          ),
          /***/
          438: (
            /***/
            function(r, i, e) {
              var s = e(828);
              function l(T, S, _, x, w) {
                var m = b.apply(this, arguments);
                return T.addEventListener(_, m, w), {
                  destroy: function() {
                    T.removeEventListener(_, m, w);
                  }
                };
              }
              function y(T, S, _, x, w) {
                return typeof T.addEventListener == "function" ? l.apply(null, arguments) : typeof _ == "function" ? l.bind(null, document).apply(null, arguments) : (typeof T == "string" && (T = document.querySelectorAll(T)), Array.prototype.map.call(T, function(m) {
                  return l(m, S, _, x, w);
                }));
              }
              function b(T, S, _, x) {
                return function(w) {
                  w.delegateTarget = s(w.target, S), w.delegateTarget && x.call(T, w);
                };
              }
              r.exports = y;
            }
          ),
          /***/
          879: (
            /***/
            function(r, i) {
              i.node = function(e) {
                return e !== void 0 && e instanceof HTMLElement && e.nodeType === 1;
              }, i.nodeList = function(e) {
                var s = Object.prototype.toString.call(e);
                return e !== void 0 && (s === "[object NodeList]" || s === "[object HTMLCollection]") && "length" in e && (e.length === 0 || i.node(e[0]));
              }, i.string = function(e) {
                return typeof e == "string" || e instanceof String;
              }, i.fn = function(e) {
                var s = Object.prototype.toString.call(e);
                return s === "[object Function]";
              };
            }
          ),
          /***/
          370: (
            /***/
            function(r, i, e) {
              var s = e(879), l = e(438);
              function y(_, x, w) {
                if (!_ && !x && !w)
                  throw new Error("Missing required arguments");
                if (!s.string(x))
                  throw new TypeError("Second argument must be a String");
                if (!s.fn(w))
                  throw new TypeError("Third argument must be a Function");
                if (s.node(_))
                  return b(_, x, w);
                if (s.nodeList(_))
                  return T(_, x, w);
                if (s.string(_))
                  return S(_, x, w);
                throw new TypeError("First argument must be a String, HTMLElement, HTMLCollection, or NodeList");
              }
              function b(_, x, w) {
                return _.addEventListener(x, w), {
                  destroy: function() {
                    _.removeEventListener(x, w);
                  }
                };
              }
              function T(_, x, w) {
                return Array.prototype.forEach.call(_, function(m) {
                  m.addEventListener(x, w);
                }), {
                  destroy: function() {
                    Array.prototype.forEach.call(_, function(m) {
                      m.removeEventListener(x, w);
                    });
                  }
                };
              }
              function S(_, x, w) {
                return l(document.body, _, x, w);
              }
              r.exports = y;
            }
          ),
          /***/
          817: (
            /***/
            function(r) {
              function i(e) {
                var s;
                if (e.nodeName === "SELECT")
                  e.focus(), s = e.value;
                else if (e.nodeName === "INPUT" || e.nodeName === "TEXTAREA") {
                  var l = e.hasAttribute("readonly");
                  l || e.setAttribute("readonly", ""), e.select(), e.setSelectionRange(0, e.value.length), l || e.removeAttribute("readonly"), s = e.value;
                } else {
                  e.hasAttribute("contenteditable") && e.focus();
                  var y = window.getSelection(), b = document.createRange();
                  b.selectNodeContents(e), y.removeAllRanges(), y.addRange(b), s = y.toString();
                }
                return s;
              }
              r.exports = i;
            }
          ),
          /***/
          279: (
            /***/
            function(r) {
              function i() {
              }
              i.prototype = {
                on: function(e, s, l) {
                  var y = this.e || (this.e = {});
                  return (y[e] || (y[e] = [])).push({
                    fn: s,
                    ctx: l
                  }), this;
                },
                once: function(e, s, l) {
                  var y = this;
                  function b() {
                    y.off(e, b), s.apply(l, arguments);
                  }
                  return b._ = s, this.on(e, b, l);
                },
                emit: function(e) {
                  var s = [].slice.call(arguments, 1), l = ((this.e || (this.e = {}))[e] || []).slice(), y = 0, b = l.length;
                  for (y; y < b; y++)
                    l[y].fn.apply(l[y].ctx, s);
                  return this;
                },
                off: function(e, s) {
                  var l = this.e || (this.e = {}), y = l[e], b = [];
                  if (y && s)
                    for (var T = 0, S = y.length; T < S; T++)
                      y[T].fn !== s && y[T].fn._ !== s && b.push(y[T]);
                  return b.length ? l[e] = b : delete l[e], this;
                }
              }, r.exports = i, r.exports.TinyEmitter = i;
            }
          )
          /******/
        }, n = {};
        function h(r) {
          if (n[r])
            return n[r].exports;
          var i = n[r] = {
            /******/
            // no module.id needed
            /******/
            // no module.loaded needed
            /******/
            exports: {}
            /******/
          };
          return g[r](i, i.exports, h), i.exports;
        }
        return function() {
          h.n = function(r) {
            var i = r && r.__esModule ? (
              /******/
              function() {
                return r.default;
              }
            ) : (
              /******/
              function() {
                return r;
              }
            );
            return h.d(i, { a: i }), i;
          };
        }(), function() {
          h.d = function(r, i) {
            for (var e in i)
              h.o(i, e) && !h.o(r, e) && Object.defineProperty(r, e, { enumerable: !0, get: i[e] });
          };
        }(), function() {
          h.o = function(r, i) {
            return Object.prototype.hasOwnProperty.call(r, i);
          };
        }(), h(686);
      }().default
    );
  });
})(Qe);
var wt = Qe.exports;
const Tt = /* @__PURE__ */ _t(wt), ve = (u) => {
  const t = (u == null ? void 0 : u.appendToBody) === void 0 ? !0 : u.appendToBody;
  return {
    toClipboard(g, n) {
      return new Promise((h, r) => {
        const i = document.createElement("button"), e = new Tt(i, {
          text: () => g,
          action: () => "copy",
          container: n !== void 0 ? n : document.body
        });
        e.on("success", (s) => {
          e.destroy(), h(s);
        }), e.on("error", (s) => {
          e.destroy(), r(s);
        }), t && document.body.appendChild(i), i.click(), t && document.body.removeChild(i);
      });
    }
  };
}, {
  OPEN_DELAY: me
} = A, xt = {
  components: {
    TinyPopover: mt,
    TinyTooltip: vt,
    TinyInput: gt,
    TinyButton: yt,
    TinyGrid: pt,
    TinyGridColumn: ft,
    PluginPanel: ge,
    TinySelect: dt,
    TinyFileUpload: ut,
    SearchEmpty: ye
  },
  props: {
    fixedPanels: {
      type: Array
    }
  },
  setup(u, {
    emit: t
  }) {
    const g = ze("SvgIcon"), n = pe(), h = I(() => F(g, {
      name: "loading"
    }, null), {
      metaData: {
        id: "engine.plugins.i18n.Main.darkSpinnerIcon"
      },
      ctx: () => ({
        props: u,
        emit: t,
        SvgIcon: g,
        lightSpinnerIcon: n,
        darkSpinnerIcon: h,
        isLightTheme: r,
        getLangs: i,
        i18nResource: e,
        currentLanguage: s,
        getI18nData: l,
        toClipboard: y,
        PLUGIN_NAME: b,
        panelState: T,
        fullLangList: S,
        i18nSearchTypes: _,
        docsUrl: x,
        docsContent: w,
        currentSearchType: m,
        copyTipContent: P,
        searchKey: H,
        activedRow: j,
        langList: M,
        copyRowIndex: G,
        isEditMode: z,
        isLoading: R,
        upload: Q,
        i18nTable: O,
        selectedRowLength: $,
        notEmpty: K,
        current: V,
        editingRow: X,
        validateKey: ee,
        validRules: te,
        sortByLetter: q,
        sortTypeChanges: B,
        confirm: J,
        editClosed: ne,
        batchDelete: oe,
        downloadFile: p,
        openDeletePopover: a,
        getActiveRow: o,
        openEditor: d,
        copyId: f,
        handleAvatarSuccess: v,
        handleChange: L,
        useClipboard: ve,
        iconLoadingShadow: pe,
        PluginPanel: ge,
        SearchEmpty: ye,
        useTranslate: Z,
        useModal: ue,
        useHelp: fe,
        getMetaApi: k,
        META_SERVICE: C,
        useLayout: de,
        getMergeMeta: le,
        utils: D,
        constants: A,
        BASE_URL: ae,
        OPEN_DELAY: me
      })
    }), r = le("engine.config").theme === "light", {
      getLangs: i,
      i18nResource: e,
      currentLanguage: s,
      getI18nData: l
    } = Z(), {
      toClipboard: y
    } = ve(), {
      PLUGIN_NAME: b
    } = de(), T = Ze({
      emitEvent: t
    });
    $e("panelState", T);
    const S = We(() => {
      const c = i();
      return Object.keys(c).map((E) => ({
        ...c[E]
      })).reverse();
    }), _ = [{
      value: "byTimeDesc",
      label: "ææ¶é´ååº"
    }, {
      value: "byTimeAsc",
      label: "ææ¶é´æ­£åº"
    }, {
      value: "byLetterZh",
      label: "æä¸­ææåº"
    }, {
      value: "byLetterEn",
      label: "æè±ææåº"
    }], x = fe().getDocsUrl("i18n"), w = "éå¯¹ç»å¸ä¸­çé¡¹ç®ï¼å¯è½éè¦åæ¶æ¯æå¤ä¸ªè¯­è¨ï¼è®¾è®¡å¨æä¾äºä¸­è±æåæ¢ï¼å¯ä¸é®åæ¢è¯­è¨ï¼å½éåèµæºæ¯åºç¨çº§å«çï¼å¨ä»»ä½ä¸ä¸ªé¡µé¢é½å¯ä»¥è®¿é®ã", m = Be(""), P = Be(""), H = Be(""), j = Be(""), M = Be([]), G = Be(""), z = Be(!1), R = Be(!1), Q = Be("upload"), O = Be(null), $ = We(() => {
      var c, E;
      return ((E = (c = O.value) == null ? void 0 : c.getAllSelection) == null ? void 0 : E.call(c).length) || 0;
    }), K = We(() => M.value.length > 0), V = Be({
      lang: "zh_CN",
      label: "ä¸­æ"
    }), X = Be(null), ee = I((c, E, Y) => {
      if (!z.value && S.value.some(({
        key: Re
      }) => E === Re)) {
        Y(new Error("ä¸å¯ä¸ç°æ key éå¤"));
        return;
      }
      Y();
    }, {
      metaData: {
        id: "engine.plugins.i18n.Main.validateKey"
      },
      ctx: () => ({
        props: u,
        emit: t,
        SvgIcon: g,
        lightSpinnerIcon: n,
        darkSpinnerIcon: h,
        isLightTheme: r,
        getLangs: i,
        i18nResource: e,
        currentLanguage: s,
        getI18nData: l,
        toClipboard: y,
        PLUGIN_NAME: b,
        panelState: T,
        fullLangList: S,
        i18nSearchTypes: _,
        docsUrl: x,
        docsContent: w,
        currentSearchType: m,
        copyTipContent: P,
        searchKey: H,
        activedRow: j,
        langList: M,
        copyRowIndex: G,
        isEditMode: z,
        isLoading: R,
        upload: Q,
        i18nTable: O,
        selectedRowLength: $,
        notEmpty: K,
        current: V,
        editingRow: X,
        validateKey: ee,
        validRules: te,
        sortByLetter: q,
        sortTypeChanges: B,
        confirm: J,
        editClosed: ne,
        batchDelete: oe,
        downloadFile: p,
        openDeletePopover: a,
        getActiveRow: o,
        openEditor: d,
        copyId: f,
        handleAvatarSuccess: v,
        handleChange: L,
        useClipboard: ve,
        iconLoadingShadow: pe,
        PluginPanel: ge,
        SearchEmpty: ye,
        useTranslate: Z,
        useModal: ue,
        useHelp: fe,
        getMetaApi: k,
        META_SERVICE: C,
        useLayout: de,
        getMergeMeta: le,
        utils: D,
        constants: A,
        BASE_URL: ae,
        OPEN_DELAY: me
      })
    }), te = Ze({
      key: [{
        required: !0,
        message: "å¿å¡«"
      }, {
        validator: ee
      }]
    });
    et(I(() => {
      m.value = _[0].value;
    }, {
      metaData: {
        id: "engine.plugins.i18n.Main.onMounted[0]"
      },
      ctx: () => ({
        props: u,
        emit: t,
        SvgIcon: g,
        lightSpinnerIcon: n,
        darkSpinnerIcon: h,
        isLightTheme: r,
        getLangs: i,
        i18nResource: e,
        currentLanguage: s,
        getI18nData: l,
        toClipboard: y,
        PLUGIN_NAME: b,
        panelState: T,
        fullLangList: S,
        i18nSearchTypes: _,
        docsUrl: x,
        docsContent: w,
        currentSearchType: m,
        copyTipContent: P,
        searchKey: H,
        activedRow: j,
        langList: M,
        copyRowIndex: G,
        isEditMode: z,
        isLoading: R,
        upload: Q,
        i18nTable: O,
        selectedRowLength: $,
        notEmpty: K,
        current: V,
        editingRow: X,
        validateKey: ee,
        validRules: te,
        sortByLetter: q,
        sortTypeChanges: B,
        confirm: J,
        editClosed: ne,
        batchDelete: oe,
        downloadFile: p,
        openDeletePopover: a,
        getActiveRow: o,
        openEditor: d,
        copyId: f,
        handleAvatarSuccess: v,
        handleChange: L,
        useClipboard: ve,
        iconLoadingShadow: pe,
        PluginPanel: ge,
        SearchEmpty: ye,
        useTranslate: Z,
        useModal: ue,
        useHelp: fe,
        getMetaApi: k,
        META_SERVICE: C,
        useLayout: de,
        getMergeMeta: le,
        utils: D,
        constants: A,
        BASE_URL: ae,
        OPEN_DELAY: me
      })
    }));
    const q = I((c = "zh_CN") => {
      M.value = M.value.sort((E, Y) => typeof E[c] > "u" && typeof Y[c] > "u" ? 0 : typeof E[c] > "u" ? 1 : typeof Y[c] > "u" ? -1 : c === "zh_CN" ? E[c].localeCompare(Y[c], "zh") : E[c].localeCompare(Y[c]));
    }, {
      metaData: {
        id: "engine.plugins.i18n.Main.sortByLetter"
      },
      ctx: () => ({
        props: u,
        emit: t,
        SvgIcon: g,
        lightSpinnerIcon: n,
        darkSpinnerIcon: h,
        isLightTheme: r,
        getLangs: i,
        i18nResource: e,
        currentLanguage: s,
        getI18nData: l,
        toClipboard: y,
        PLUGIN_NAME: b,
        panelState: T,
        fullLangList: S,
        i18nSearchTypes: _,
        docsUrl: x,
        docsContent: w,
        currentSearchType: m,
        copyTipContent: P,
        searchKey: H,
        activedRow: j,
        langList: M,
        copyRowIndex: G,
        isEditMode: z,
        isLoading: R,
        upload: Q,
        i18nTable: O,
        selectedRowLength: $,
        notEmpty: K,
        current: V,
        editingRow: X,
        validateKey: ee,
        validRules: te,
        sortByLetter: q,
        sortTypeChanges: B,
        confirm: J,
        editClosed: ne,
        batchDelete: oe,
        downloadFile: p,
        openDeletePopover: a,
        getActiveRow: o,
        openEditor: d,
        copyId: f,
        handleAvatarSuccess: v,
        handleChange: L,
        useClipboard: ve,
        iconLoadingShadow: pe,
        PluginPanel: ge,
        SearchEmpty: ye,
        useTranslate: Z,
        useModal: ue,
        useHelp: fe,
        getMetaApi: k,
        META_SERVICE: C,
        useLayout: de,
        getMergeMeta: le,
        utils: D,
        constants: A,
        BASE_URL: ae,
        OPEN_DELAY: me
      })
    }), B = I((c) => {
      switch (c) {
        case "byTimeAsc":
          M.value.reverse();
          break;
        case "byLetterZh":
          q();
          break;
        case "byLetterEn":
          q("en_US");
          break;
      }
    }, {
      metaData: {
        id: "engine.plugins.i18n.Main.sortTypeChanges"
      },
      ctx: () => ({
        props: u,
        emit: t,
        SvgIcon: g,
        lightSpinnerIcon: n,
        darkSpinnerIcon: h,
        isLightTheme: r,
        getLangs: i,
        i18nResource: e,
        currentLanguage: s,
        getI18nData: l,
        toClipboard: y,
        PLUGIN_NAME: b,
        panelState: T,
        fullLangList: S,
        i18nSearchTypes: _,
        docsUrl: x,
        docsContent: w,
        currentSearchType: m,
        copyTipContent: P,
        searchKey: H,
        activedRow: j,
        langList: M,
        copyRowIndex: G,
        isEditMode: z,
        isLoading: R,
        upload: Q,
        i18nTable: O,
        selectedRowLength: $,
        notEmpty: K,
        current: V,
        editingRow: X,
        validateKey: ee,
        validRules: te,
        sortByLetter: q,
        sortTypeChanges: B,
        confirm: J,
        editClosed: ne,
        batchDelete: oe,
        downloadFile: p,
        openDeletePopover: a,
        getActiveRow: o,
        openEditor: d,
        copyId: f,
        handleAvatarSuccess: v,
        handleChange: L,
        useClipboard: ve,
        iconLoadingShadow: pe,
        PluginPanel: ge,
        SearchEmpty: ye,
        useTranslate: Z,
        useModal: ue,
        useHelp: fe,
        getMetaApi: k,
        META_SERVICE: C,
        useLayout: de,
        getMergeMeta: le,
        utils: D,
        constants: A,
        BASE_URL: ae,
        OPEN_DELAY: me
      })
    });
    tt(() => [S.value, m.value, H.value], () => {
      M.value = S.value.filter((c) => {
        const E = new RegExp(H.value, "i");
        return E.test(c == null ? void 0 : c.zh_CN) || E.test(c == null ? void 0 : c.en_US) || E.test(c == null ? void 0 : c.key);
      }), B(m.value);
    }), nt(() => {
      e.locales.length && (V.value = e.locales.find((c) => c.lang === s.value));
    });
    const J = I((c) => {
      Z().ensureI18n(c, !0);
    }, {
      metaData: {
        id: "engine.plugins.i18n.Main.confirm"
      },
      ctx: () => ({
        props: u,
        emit: t,
        SvgIcon: g,
        lightSpinnerIcon: n,
        darkSpinnerIcon: h,
        isLightTheme: r,
        getLangs: i,
        i18nResource: e,
        currentLanguage: s,
        getI18nData: l,
        toClipboard: y,
        PLUGIN_NAME: b,
        panelState: T,
        fullLangList: S,
        i18nSearchTypes: _,
        docsUrl: x,
        docsContent: w,
        currentSearchType: m,
        copyTipContent: P,
        searchKey: H,
        activedRow: j,
        langList: M,
        copyRowIndex: G,
        isEditMode: z,
        isLoading: R,
        upload: Q,
        i18nTable: O,
        selectedRowLength: $,
        notEmpty: K,
        current: V,
        editingRow: X,
        validateKey: ee,
        validRules: te,
        sortByLetter: q,
        sortTypeChanges: B,
        confirm: J,
        editClosed: ne,
        batchDelete: oe,
        downloadFile: p,
        openDeletePopover: a,
        getActiveRow: o,
        openEditor: d,
        copyId: f,
        handleAvatarSuccess: v,
        handleChange: L,
        useClipboard: ve,
        iconLoadingShadow: pe,
        PluginPanel: ge,
        SearchEmpty: ye,
        useTranslate: Z,
        useModal: ue,
        useHelp: fe,
        getMetaApi: k,
        META_SERVICE: C,
        useLayout: de,
        getMergeMeta: le,
        utils: D,
        constants: A,
        BASE_URL: ae,
        OPEN_DELAY: me
      })
    }), ne = I((c) => {
      O.value.validate(c.row, (E) => {
        E && J(c.row);
      });
    }, {
      metaData: {
        id: "engine.plugins.i18n.Main.editClosed"
      },
      ctx: () => ({
        props: u,
        emit: t,
        SvgIcon: g,
        lightSpinnerIcon: n,
        darkSpinnerIcon: h,
        isLightTheme: r,
        getLangs: i,
        i18nResource: e,
        currentLanguage: s,
        getI18nData: l,
        toClipboard: y,
        PLUGIN_NAME: b,
        panelState: T,
        fullLangList: S,
        i18nSearchTypes: _,
        docsUrl: x,
        docsContent: w,
        currentSearchType: m,
        copyTipContent: P,
        searchKey: H,
        activedRow: j,
        langList: M,
        copyRowIndex: G,
        isEditMode: z,
        isLoading: R,
        upload: Q,
        i18nTable: O,
        selectedRowLength: $,
        notEmpty: K,
        current: V,
        editingRow: X,
        validateKey: ee,
        validRules: te,
        sortByLetter: q,
        sortTypeChanges: B,
        confirm: J,
        editClosed: ne,
        batchDelete: oe,
        downloadFile: p,
        openDeletePopover: a,
        getActiveRow: o,
        openEditor: d,
        copyId: f,
        handleAvatarSuccess: v,
        handleChange: L,
        useClipboard: ve,
        iconLoadingShadow: pe,
        PluginPanel: ge,
        SearchEmpty: ye,
        useTranslate: Z,
        useModal: ue,
        useHelp: fe,
        getMetaApi: k,
        META_SERVICE: C,
        useLayout: de,
        getMergeMeta: le,
        utils: D,
        constants: A,
        BASE_URL: ae,
        OPEN_DELAY: me
      })
    }), oe = I(() => {
      const c = O.value.getSelectRecords();
      if (!c.length)
        return;
      const {
        confirm: E
      } = ue();
      E({
        title: "æ¹éå é¤",
        message: `æ¨ç¡®å®å é¤ ${c.length} æ¡æ°æ®åï¼`,
        exec: () => {
          const Y = c.map(({
            key: Re
          }) => Re);
          Z().removeI18n(Y), O.value.clearSelection();
        }
      });
    }, {
      metaData: {
        id: "engine.plugins.i18n.Main.batchDelete"
      },
      ctx: () => ({
        props: u,
        emit: t,
        SvgIcon: g,
        lightSpinnerIcon: n,
        darkSpinnerIcon: h,
        isLightTheme: r,
        getLangs: i,
        i18nResource: e,
        currentLanguage: s,
        getI18nData: l,
        toClipboard: y,
        PLUGIN_NAME: b,
        panelState: T,
        fullLangList: S,
        i18nSearchTypes: _,
        docsUrl: x,
        docsContent: w,
        currentSearchType: m,
        copyTipContent: P,
        searchKey: H,
        activedRow: j,
        langList: M,
        copyRowIndex: G,
        isEditMode: z,
        isLoading: R,
        upload: Q,
        i18nTable: O,
        selectedRowLength: $,
        notEmpty: K,
        current: V,
        editingRow: X,
        validateKey: ee,
        validRules: te,
        sortByLetter: q,
        sortTypeChanges: B,
        editClosed: ne,
        batchDelete: oe,
        downloadFile: p,
        openDeletePopover: a,
        getActiveRow: o,
        openEditor: d,
        copyId: f,
        handleAvatarSuccess: v,
        handleChange: L,
        useClipboard: ve,
        iconLoadingShadow: pe,
        PluginPanel: ge,
        SearchEmpty: ye,
        useTranslate: Z,
        useModal: ue,
        useHelp: fe,
        getMetaApi: k,
        META_SERVICE: C,
        useLayout: de,
        getMergeMeta: le,
        utils: D,
        constants: A,
        BASE_URL: ae,
        OPEN_DELAY: me
      })
    }), p = I(() => {
      const {
        batchImportTempDownloadUrl: c,
        batchImportTempDownMethod: E
      } = le("engine.plugins.i18n").options || {};
      if (E && typeof E == "function") {
        E();
        return;
      }
      const Y = `${ae.endsWith("/") ? ae.slice(0, -1) : ae}/i18n-template-for-batch-import.zip`, Re = document.createElement("a");
      Re.href = c || Y, Re.download = "i18n-template-for-batch-import.zip", Re.target = "_blank", document.body.appendChild(Re), Re.click(), document.body.removeChild(Re);
    }, {
      metaData: {
        id: "engine.plugins.i18n.Main.downloadFile"
      },
      ctx: () => ({
        props: u,
        emit: t,
        SvgIcon: g,
        lightSpinnerIcon: n,
        darkSpinnerIcon: h,
        isLightTheme: r,
        getLangs: i,
        i18nResource: e,
        currentLanguage: s,
        getI18nData: l,
        toClipboard: y,
        PLUGIN_NAME: b,
        panelState: T,
        fullLangList: S,
        i18nSearchTypes: _,
        docsUrl: x,
        docsContent: w,
        currentSearchType: m,
        copyTipContent: P,
        searchKey: H,
        activedRow: j,
        langList: M,
        copyRowIndex: G,
        isEditMode: z,
        isLoading: R,
        upload: Q,
        i18nTable: O,
        selectedRowLength: $,
        notEmpty: K,
        current: V,
        editingRow: X,
        validateKey: ee,
        validRules: te,
        sortByLetter: q,
        sortTypeChanges: B,
        confirm: J,
        editClosed: ne,
        batchDelete: oe,
        downloadFile: p,
        openDeletePopover: a,
        getActiveRow: o,
        openEditor: d,
        copyId: f,
        handleAvatarSuccess: v,
        handleChange: L,
        useClipboard: ve,
        iconLoadingShadow: pe,
        PluginPanel: ge,
        SearchEmpty: ye,
        useTranslate: Z,
        useModal: ue,
        useHelp: fe,
        getMetaApi: k,
        META_SERVICE: C,
        useLayout: de,
        getMergeMeta: le,
        utils: D,
        constants: A,
        BASE_URL: ae,
        OPEN_DELAY: me
      })
    }), a = I((c) => {
      const {
        confirm: E
      } = ue();
      E({
        title: "å é¤è¯æ¡",
        message: `æ¨ç¡®å®å é¤ key ä¸º ${c.key} çè¯æ¡åï¼`,
        exec: () => {
          const Y = [c.key];
          Z().removeI18n(Y), O.value.clearSelection();
        }
      });
    }, {
      metaData: {
        id: "engine.plugins.i18n.Main.openDeletePopover"
      },
      ctx: () => ({
        props: u,
        emit: t,
        SvgIcon: g,
        lightSpinnerIcon: n,
        darkSpinnerIcon: h,
        isLightTheme: r,
        getLangs: i,
        i18nResource: e,
        currentLanguage: s,
        getI18nData: l,
        toClipboard: y,
        PLUGIN_NAME: b,
        panelState: T,
        fullLangList: S,
        i18nSearchTypes: _,
        docsUrl: x,
        docsContent: w,
        currentSearchType: m,
        copyTipContent: P,
        searchKey: H,
        activedRow: j,
        langList: M,
        copyRowIndex: G,
        isEditMode: z,
        isLoading: R,
        upload: Q,
        i18nTable: O,
        selectedRowLength: $,
        notEmpty: K,
        current: V,
        editingRow: X,
        validateKey: ee,
        validRules: te,
        sortByLetter: q,
        sortTypeChanges: B,
        editClosed: ne,
        batchDelete: oe,
        downloadFile: p,
        openDeletePopover: a,
        getActiveRow: o,
        openEditor: d,
        copyId: f,
        handleAvatarSuccess: v,
        handleChange: L,
        useClipboard: ve,
        iconLoadingShadow: pe,
        PluginPanel: ge,
        SearchEmpty: ye,
        useTranslate: Z,
        useModal: ue,
        useHelp: fe,
        getMetaApi: k,
        META_SERVICE: C,
        useLayout: de,
        getMergeMeta: le,
        utils: D,
        constants: A,
        BASE_URL: ae,
        OPEN_DELAY: me
      })
    }), o = I(() => {
      var c;
      j.value = ((c = O.value.getActiveRow()) == null ? void 0 : c.rowIndex) ?? "";
    }, {
      metaData: {
        id: "engine.plugins.i18n.Main.getActiveRow"
      },
      ctx: () => ({
        props: u,
        emit: t,
        SvgIcon: g,
        lightSpinnerIcon: n,
        darkSpinnerIcon: h,
        isLightTheme: r,
        getLangs: i,
        i18nResource: e,
        currentLanguage: s,
        getI18nData: l,
        toClipboard: y,
        PLUGIN_NAME: b,
        panelState: T,
        fullLangList: S,
        i18nSearchTypes: _,
        docsUrl: x,
        docsContent: w,
        currentSearchType: m,
        copyTipContent: P,
        searchKey: H,
        activedRow: j,
        langList: M,
        copyRowIndex: G,
        isEditMode: z,
        isLoading: R,
        upload: Q,
        i18nTable: O,
        selectedRowLength: $,
        notEmpty: K,
        current: V,
        editingRow: X,
        validateKey: ee,
        validRules: te,
        sortByLetter: q,
        sortTypeChanges: B,
        confirm: J,
        editClosed: ne,
        batchDelete: oe,
        downloadFile: p,
        openDeletePopover: a,
        getActiveRow: o,
        openEditor: d,
        copyId: f,
        handleAvatarSuccess: v,
        handleChange: L,
        useClipboard: ve,
        iconLoadingShadow: pe,
        PluginPanel: ge,
        SearchEmpty: ye,
        useTranslate: Z,
        useModal: ue,
        useHelp: fe,
        getMetaApi: k,
        META_SERVICE: C,
        useLayout: de,
        getMergeMeta: le,
        utils: D,
        constants: A,
        BASE_URL: ae,
        OPEN_DELAY: me
      })
    }), d = I((c, E) => {
      z.value = !!E.key, X.value = E, z.value || (E.key = `lowcode.${D.guid()}`, M.value.unshift(E)), O.value.setActiveRow(E).then(() => {
        o();
      });
    }, {
      metaData: {
        id: "engine.plugins.i18n.Main.openEditor"
      },
      ctx: () => ({
        props: u,
        emit: t,
        SvgIcon: g,
        lightSpinnerIcon: n,
        darkSpinnerIcon: h,
        isLightTheme: r,
        getLangs: i,
        i18nResource: e,
        currentLanguage: s,
        getI18nData: l,
        toClipboard: y,
        PLUGIN_NAME: b,
        panelState: T,
        fullLangList: S,
        i18nSearchTypes: _,
        docsUrl: x,
        docsContent: w,
        currentSearchType: m,
        copyTipContent: P,
        searchKey: H,
        activedRow: j,
        langList: M,
        copyRowIndex: G,
        isEditMode: z,
        isLoading: R,
        upload: Q,
        i18nTable: O,
        selectedRowLength: $,
        notEmpty: K,
        current: V,
        editingRow: X,
        validateKey: ee,
        validRules: te,
        sortByLetter: q,
        sortTypeChanges: B,
        confirm: J,
        editClosed: ne,
        batchDelete: oe,
        downloadFile: p,
        openDeletePopover: a,
        getActiveRow: o,
        openEditor: d,
        copyId: f,
        handleAvatarSuccess: v,
        handleChange: L,
        useClipboard: ve,
        iconLoadingShadow: pe,
        PluginPanel: ge,
        SearchEmpty: ye,
        useTranslate: Z,
        useModal: ue,
        useHelp: fe,
        getMetaApi: k,
        META_SERVICE: C,
        useLayout: de,
        getMergeMeta: le,
        utils: D,
        constants: A,
        BASE_URL: ae,
        OPEN_DELAY: me
      })
    }), f = I(async (c, E) => {
      G.value = E;
      try {
        await y(c.key), P.value = "å¤å¶æå";
      } catch (Y) {
        P.value = "å¤å¶å¤±è´¥", console.error("Clipboard operation failed:", Y);
      } finally {
        setTimeout(() => {
          G.value = "";
        }, 3e3);
      }
    }, {
      metaData: {
        id: "engine.plugins.i18n.Main.copyId"
      },
      ctx: () => ({
        props: u,
        emit: t,
        SvgIcon: g,
        lightSpinnerIcon: n,
        darkSpinnerIcon: h,
        isLightTheme: r,
        getLangs: i,
        i18nResource: e,
        currentLanguage: s,
        getI18nData: l,
        toClipboard: y,
        PLUGIN_NAME: b,
        panelState: T,
        fullLangList: S,
        i18nSearchTypes: _,
        docsUrl: x,
        docsContent: w,
        currentSearchType: m,
        copyTipContent: P,
        searchKey: H,
        activedRow: j,
        langList: M,
        copyRowIndex: G,
        isEditMode: z,
        isLoading: R,
        upload: Q,
        i18nTable: O,
        selectedRowLength: $,
        notEmpty: K,
        current: V,
        editingRow: X,
        validateKey: ee,
        validRules: te,
        sortByLetter: q,
        sortTypeChanges: B,
        confirm: J,
        editClosed: ne,
        batchDelete: oe,
        downloadFile: p,
        openDeletePopover: a,
        getActiveRow: o,
        openEditor: d,
        copyId: f,
        handleAvatarSuccess: v,
        handleChange: L,
        useClipboard: ve,
        iconLoadingShadow: pe,
        PluginPanel: ge,
        SearchEmpty: ye,
        useTranslate: Z,
        useModal: ue,
        useHelp: fe,
        getMetaApi: k,
        META_SERVICE: C,
        useLayout: de,
        getMergeMeta: le,
        utils: D,
        constants: A,
        BASE_URL: ae,
        OPEN_DELAY: me
      })
    }), v = I(() => {
      l().then((c) => {
        var Ke, He;
        const E = ((Ke = c == null ? void 0 : c.messages) == null ? void 0 : Ke.zh_CN) || {}, Y = ((He = c == null ? void 0 : c.messages) == null ? void 0 : He.en_US) || {}, Re = [...Object.keys(E), ...Object.keys(Y)];
        [...new Set(Re)].forEach((Ve) => {
          Ve && Z().ensureI18n({
            en_US: Y[Ve] || "",
            key: Ve,
            type: "i18n",
            zh_CN: E[Ve] || ""
          }, !1);
        });
      });
    }, {
      metaData: {
        id: "engine.plugins.i18n.Main.handleAvatarSuccess"
      },
      ctx: () => ({
        props: u,
        emit: t,
        SvgIcon: g,
        lightSpinnerIcon: n,
        darkSpinnerIcon: h,
        isLightTheme: r,
        getLangs: i,
        i18nResource: e,
        currentLanguage: s,
        getI18nData: l,
        toClipboard: y,
        PLUGIN_NAME: b,
        panelState: T,
        fullLangList: S,
        i18nSearchTypes: _,
        docsUrl: x,
        docsContent: w,
        currentSearchType: m,
        copyTipContent: P,
        searchKey: H,
        activedRow: j,
        langList: M,
        copyRowIndex: G,
        isEditMode: z,
        isLoading: R,
        upload: Q,
        i18nTable: O,
        selectedRowLength: $,
        notEmpty: K,
        current: V,
        editingRow: X,
        validateKey: ee,
        validRules: te,
        sortByLetter: q,
        sortTypeChanges: B,
        confirm: J,
        editClosed: ne,
        batchDelete: oe,
        downloadFile: p,
        openDeletePopover: a,
        getActiveRow: o,
        openEditor: d,
        copyId: f,
        handleAvatarSuccess: v,
        handleChange: L,
        useClipboard: ve,
        iconLoadingShadow: pe,
        PluginPanel: ge,
        SearchEmpty: ye,
        useTranslate: Z,
        useModal: ue,
        useHelp: fe,
        getMetaApi: k,
        META_SERVICE: C,
        useLayout: de,
        getMergeMeta: le,
        utils: D,
        constants: A,
        BASE_URL: ae,
        OPEN_DELAY: me
      })
    }), L = I((c) => {
      const Y = `/app-center/api/apps/${k(C.GlobalService).getBaseInfo().id}/i18n/entries/update`, Re = K.value ? "#boxeight" : "#empty-loading-box", Xe = K.value ? "" : "æ­£å¨å¯¼å¥", Ke = r ? n : h;
      R.value = !0;
      let He;
      ot(() => {
        He = ht.service({
          lock: !0,
          text: Xe,
          spinner: Ke,
          target: Re,
          background: "transparent"
        });
      });
      const Ve = new FormData();
      let qe = "1";
      c.name.indexOf("en") > -1 && (qe = "2"), Ve.set(qe, c.raw), k(C.Http).post(Y, Ve).then(() => {
        v();
      }).finally(() => {
        He.close(), R.value = !1;
      });
    }, {
      metaData: {
        id: "engine.plugins.i18n.Main.handleChange"
      },
      ctx: () => ({
        props: u,
        emit: t,
        SvgIcon: g,
        lightSpinnerIcon: n,
        darkSpinnerIcon: h,
        isLightTheme: r,
        getLangs: i,
        i18nResource: e,
        currentLanguage: s,
        getI18nData: l,
        toClipboard: y,
        PLUGIN_NAME: b,
        panelState: T,
        fullLangList: S,
        i18nSearchTypes: _,
        docsUrl: x,
        docsContent: w,
        currentSearchType: m,
        copyTipContent: P,
        searchKey: H,
        activedRow: j,
        langList: M,
        copyRowIndex: G,
        isEditMode: z,
        isLoading: R,
        upload: Q,
        i18nTable: O,
        selectedRowLength: $,
        notEmpty: K,
        current: V,
        editingRow: X,
        validateKey: ee,
        validRules: te,
        sortByLetter: q,
        sortTypeChanges: B,
        confirm: J,
        editClosed: ne,
        batchDelete: oe,
        downloadFile: p,
        openDeletePopover: a,
        getActiveRow: o,
        openEditor: d,
        copyId: f,
        handleAvatarSuccess: v,
        handleChange: L,
        useClipboard: ve,
        iconLoadingShadow: pe,
        PluginPanel: ge,
        SearchEmpty: ye,
        useTranslate: Z,
        useModal: ue,
        useHelp: fe,
        getMetaApi: k,
        META_SERVICE: C,
        useLayout: de,
        getMergeMeta: le,
        utils: D,
        constants: A,
        BASE_URL: ae,
        OPEN_DELAY: me
      })
    });
    return {
      PLUGIN_NAME: b,
      sortTypeChanges: B,
      currentSearchType: m,
      i18nSearchTypes: _,
      selectedRowLength: $,
      notEmpty: K,
      copyTipContent: P,
      validRules: te,
      langList: M,
      searchKey: H,
      activedRow: j,
      i18nResource: e,
      copyRowIndex: G,
      editClosed: ne,
      openEditor: d,
      openDeletePopover: a,
      copyId: f,
      handleChange: L,
      upload: Q,
      handleAvatarSuccess: v,
      isLoading: R,
      current: V,
      confirm: J,
      i18nTable: O,
      downloadFile: p,
      isEditMode: z,
      editingRow: X,
      batchDelete: oe,
      docsUrl: x,
      docsContent: w,
      OPEN_DELAY: me
    };
  }
}, Et = (u, t) => {
  const g = u.__vccOpts || u;
  for (const [n, h] of t)
    g[n] = h;
  return g;
}, Ct = { class: "language-search-box" }, kt = { class: "icon" }, St = { class: "btn-box" }, Dt = { class: "language-plugin-table lowcode-scrollbar" }, At = {
  key: 0,
  class: "i18n-opera"
}, It = { class: "icon" }, Lt = { class: "icon" }, Mt = { class: "icon" }, Ot = {
  key: 0,
  id: "empty-loading-box",
  class: "i18n-loading"
};
function Pt(u, t, g, n, h, r) {
  const i = ze("tiny-select"), e = ze("svg-icon"), s = ze("tiny-input"), l = ze("tiny-button"), y = ze("tiny-file-upload"), b = ze("tiny-grid-column"), T = ze("tiny-popover"), S = ze("tiny-tooltip"), _ = ze("search-empty"), x = ze("tiny-grid"), w = ze("plugin-panel");
  return Fe(), Ye(w, {
    title: "å½éåèµæº",
    class: "plugin-i18n",
    "fixed-name": n.PLUGIN_NAME.I18n,
    fixedPanels: g.fixedPanels,
    docsUrl: n.docsUrl,
    docsContent: n.docsContent,
    isShowDocsIcon: !0
  }, {
    content: je(() => [
      Ue("div", Ct, [
        F(i, {
          modelValue: n.currentSearchType,
          "onUpdate:modelValue": t[0] || (t[0] = (m) => n.currentSearchType = m),
          options: n.i18nSearchTypes
        }, null, 8, ["modelValue", "options"]),
        F(s, {
          modelValue: n.searchKey,
          "onUpdate:modelValue": t[1] || (t[1] = (m) => n.searchKey = m),
          class: "plugin-i18n-search",
          placeholder: "è¯·è¾å¥å³é®å­",
          type: "text",
          clearable: ""
        }, {
          prefix: je(() => [
            Ue("span", kt, [
              F(e, { name: "basic-search" })
            ])
          ]),
          _: 1
        }, 8, ["modelValue"])
      ]),
      Ue("div", St, [
        F(l, {
          onClick: t[2] || (t[2] = (m) => n.openEditor(m, {}))
        }, {
          default: je(() => [
            F(e, {
              name: "add",
              class: "btn-icon"
            }),
            t[5] || (t[5] = Ge("æ·»å è¯æ¡ ", -1))
          ]),
          _: 1,
          __: [5]
        }),
        F(l, {
          class: "middle-btn",
          onClick: n.batchDelete,
          disabled: !n.selectedRowLength
        }, {
          default: je(() => [
            F(e, {
              class: "btn-icon",
              name: "delete"
            }),
            t[6] || (t[6] = Ge("å é¤", -1))
          ]),
          _: 1,
          __: [6]
        }, 8, ["onClick", "disabled"]),
        F(y, {
          ref: "upload",
          size: "small",
          "auto-upload": !1,
          "show-file-list": !1,
          action: "/",
          onChange: n.handleChange
        }, {
          trigger: je(() => [
            F(l, null, {
              default: je(() => [
                F(e, {
                  class: "btn-icon",
                  name: "upload"
                }),
                t[7] || (t[7] = Ge("æ¹éä¸ä¼ ", -1))
              ]),
              _: 1,
              __: [7]
            })
          ]),
          _: 1
        }, 8, ["onChange"]),
        Ue("a", {
          class: "download-btn",
          onClick: t[3] || (t[3] = (...m) => n.downloadFile && n.downloadFile(...m))
        }, " ä¸è½½å¯¼å¥æ¨¡æ¿ "),
        at(Ue("p", null, t[8] || (t[8] = [
          Ue("span", {
            id: "boxeight",
            class: "i18n-loading"
          }, null, -1),
          Ue("span", null, "æ­£å¨å¯¼å¥ï¼è¯·ç¨å...", -1)
        ]), 512), [
          [it, n.isLoading && n.notEmpty]
        ])
      ]),
      Ue("div", Dt, [
        F(x, {
          ref: "i18nTable",
          data: n.langList,
          "auto-resize": "",
          class: "stripe-tiny-grid",
          onEditClosed: t[4] || (t[4] = (m) => n.editClosed(m)),
          "edit-config": { trigger: "manual", mode: "row", showStatus: !1 },
          "tooltip-config": { appendToBody: !1, placement: "right" },
          "edit-rules": n.validRules
        }, {
          empty: je(() => [
            n.isLoading ? (Fe(), Je("div", Ot)) : (Fe(), Ye(_, { key: 1 }))
          ]),
          default: je(() => [
            F(b, {
              type: "selection",
              width: "42"
            }),
            n.isEditMode ? (Fe(), Ye(b, {
              key: 0,
              width: "120",
              field: "key",
              title: "key",
              "show-overflow": "",
              "show-icon": !1
            })) : (Fe(), Ye(b, {
              key: 1,
              width: "120",
              field: "key",
              title: "key",
              "show-overflow": "",
              "show-icon": !1,
              editor: { component: "input", autoselect: !0 }
            })),
            F(b, {
              width: "160",
              field: "zh_CN",
              title: "ç®ä½ä¸­æ",
              "show-icon": !1,
              editor: { component: "input", autoselect: !0 }
            }),
            F(b, {
              width: "160",
              field: "en_US",
              title: "English",
              "show-icon": !1,
              editor: { component: "input", autoselect: !0 }
            }),
            F(b, {
              width: "90",
              field: "operation",
              title: "æä½"
            }, {
              default: je((m) => [
                n.editingRow !== m.row ? (Fe(), Je("div", At, [
                  Ue("span", It, [
                    F(e, {
                      name: "to-edit",
                      onClick: st((P) => n.openEditor(P, m.row), ["stop"])
                    }, null, 8, ["onClick"])
                  ]),
                  F(S, {
                    class: "item",
                    effect: "light",
                    placement: "bottom",
                    "open-delay": n.OPEN_DELAY.Default
                  }, {
                    content: je(() => [
                      Ue("div", null, [
                        t[9] || (t[9] = Ge(" å¤å¶é®å¼ï¼å¯ä¸æ è¯ï¼", -1)),
                        t[10] || (t[10] = Ue("br", null, null, -1)),
                        Ge(" " + ct(m.row.key), 1)
                      ])
                    ]),
                    default: je(() => [
                      F(T, {
                        placement: "top",
                        "visible-arrow": !1,
                        trigger: "manual",
                        content: n.copyTipContent,
                        modelValue: m.row.key && m.rowIndex === n.copyRowIndex
                      }, {
                        reference: je(() => [
                          Ue("span", Lt, [
                            F(e, {
                              name: "copy",
                              onClick: (P) => n.copyId(m.row, m.rowIndex)
                            }, null, 8, ["onClick"])
                          ])
                        ]),
                        _: 2
                      }, 1032, ["content", "modelValue"])
                    ]),
                    _: 2
                  }, 1032, ["open-delay"]),
                  Ue("span", Mt, [
                    F(e, {
                      name: "delete",
                      onClick: (P) => n.openDeletePopover(m.row)
                    }, null, 8, ["onClick"])
                  ])
                ])) : rt("", !0)
              ]),
              _: 1
            })
          ]),
          _: 1
        }, 8, ["data", "edit-rules"])
      ])
    ]),
    _: 1
  }, 8, ["fixed-name", "fixedPanels", "docsUrl", "docsContent"]);
}
const Nt = /* @__PURE__ */ Et(xt, [["render", Pt], ["__scopeId", "data-v-bcf6d113"]]), Rt = {
  id: "engine.plugins.i18n",
  title: "å½éå",
  type: "plugins",
  width: 600,
  icon: "plugin-icon-i18n"
}, {
  HOST_TYPE: re
} = A, be = Ze({
  langs: {}
}), _e = Be("zh_CN"), N = Ze({
  messages: {},
  locales: []
}), se = "/app-center/api/i18n/entries", U = {
  host: "",
  host_type: ""
}, W = I(() => be.langs, {
  metaData: {
    id: "engine.service.translate.useTranslate.getLangs"
  },
  ctx: () => ({
    utils: D,
    isVsCodeEnv: Ce,
    constants: A,
    generateI18n: ke,
    PROP_DATA_TYPE: he,
    useResource: Ee,
    useCanvas: ie,
    getMetaApi: k,
    META_SERVICE: C,
    HOST_TYPE: re,
    state: be,
    currentLanguage: _e,
    i18nResource: N,
    i18nApi: se,
    globalParams: U,
    getLangs: W,
    setLangs: we,
    removeI18n: Ae,
    ensureI18n: Te,
    getI18nData: xe,
    getI18n: Se,
    initI18n: ce,
    initAppI18n: Ie,
    initBlockI18n: Le,
    initBlockLocalI18n: Me,
    format: De,
    translate: Oe,
    getData: Pe,
    batchCreateI18n: Ne
  })
}), we = I((u = {}) => {
  be.langs = u;
}, {
  metaData: {
    id: "engine.service.translate.useTranslate.setLangs"
  },
  ctx: () => ({
    utils: D,
    isVsCodeEnv: Ce,
    constants: A,
    generateI18n: ke,
    PROP_DATA_TYPE: he,
    useResource: Ee,
    useCanvas: ie,
    getMetaApi: k,
    META_SERVICE: C,
    HOST_TYPE: re,
    state: be,
    currentLanguage: _e,
    i18nResource: N,
    i18nApi: se,
    globalParams: U,
    getLangs: W,
    setLangs: we,
    removeI18n: Ae,
    ensureI18n: Te,
    getI18nData: xe,
    getI18n: Se,
    initI18n: ce,
    initAppI18n: Ie,
    initBlockI18n: Le,
    initBlockLocalI18n: Me,
    format: De,
    translate: Oe,
    getData: Pe,
    batchCreateI18n: Ne
  })
}), Ae = I((u = []) => {
  if (!u.length)
    return;
  const t = W();
  u.forEach((g) => {
    delete t[g];
  }), k(C.Http).post(`${se}/bulk/delete`, {
    ...U,
    key_in: u
  });
}, {
  metaData: {
    id: "engine.service.translate.useTranslate.removeI18n"
  },
  ctx: () => ({
    utils: D,
    isVsCodeEnv: Ce,
    constants: A,
    generateI18n: ke,
    PROP_DATA_TYPE: he,
    useResource: Ee,
    useCanvas: ie,
    getMetaApi: k,
    META_SERVICE: C,
    HOST_TYPE: re,
    state: be,
    currentLanguage: _e,
    i18nResource: N,
    i18nApi: se,
    globalParams: U,
    getLangs: W,
    setLangs: we,
    removeI18n: Ae,
    ensureI18n: Te,
    getI18nData: xe,
    getI18n: Se,
    initI18n: ce,
    initAppI18n: Ie,
    initBlockI18n: Le,
    initBlockLocalI18n: Me,
    format: De,
    translate: Oe,
    getData: Pe,
    batchCreateI18n: Ne
  })
}), Te = I((u, t) => {
  var i, e;
  const {
    locales: g
  } = N, n = Object.fromEntries(g.map(({
    lang: s
  }) => [s, u[s] || ""])), h = W(), r = u.key || D.guid();
  if (t) {
    const s = h[r];
    U.host && k(C.Http).post(`${se}/${s ? "update" : "create"}`, {
      ...U,
      key: r,
      contents: n
    }), g.forEach((l) => {
      var y;
      (y = N[l]) != null && y[r] && (N[l][r] = n[l]);
    }), Ce && ke({
      key: r,
      contents: n
    });
  }
  try {
    const s = {};
    Object.entries(n).forEach(([l, y]) => {
      s[l] = {
        [r]: y
      };
    }), (e = (i = ie().canvasApi.value) == null ? void 0 : i.setLocales) == null || e.call(i, s, !0);
  } catch {
  }
  return h[r] = {
    key: r,
    ...n,
    type: he.I18N
  }, h[n.key];
}, {
  metaData: {
    id: "engine.service.translate.useTranslate.ensureI18n"
  },
  ctx: () => ({
    utils: D,
    isVsCodeEnv: Ce,
    constants: A,
    generateI18n: ke,
    PROP_DATA_TYPE: he,
    useResource: Ee,
    useCanvas: ie,
    getMetaApi: k,
    META_SERVICE: C,
    HOST_TYPE: re,
    state: be,
    currentLanguage: _e,
    i18nResource: N,
    i18nApi: se,
    globalParams: U,
    getLangs: W,
    setLangs: we,
    removeI18n: Ae,
    ensureI18n: Te,
    getI18nData: xe,
    getI18n: Se,
    initI18n: ce,
    initAppI18n: Ie,
    initBlockI18n: Le,
    initBlockLocalI18n: Me,
    format: De,
    translate: Oe,
    getData: Pe,
    batchCreateI18n: Ne
  })
}), xe = I(() => k(C.Http).get(se, {
  params: {
    ...U,
    _limit: -1
  }
}), {
  metaData: {
    id: "engine.service.translate.useTranslate.getI18nData"
  },
  ctx: () => ({
    utils: D,
    isVsCodeEnv: Ce,
    constants: A,
    generateI18n: ke,
    PROP_DATA_TYPE: he,
    useResource: Ee,
    useCanvas: ie,
    getMetaApi: k,
    META_SERVICE: C,
    HOST_TYPE: re,
    state: be,
    currentLanguage: _e,
    i18nResource: N,
    i18nApi: se,
    globalParams: U,
    getLangs: W,
    setLangs: we,
    removeI18n: Ae,
    ensureI18n: Te,
    getI18nData: xe,
    getI18n: Se,
    initI18n: ce,
    initAppI18n: Ie,
    initBlockI18n: Le,
    initBlockLocalI18n: Me,
    format: De,
    translate: Oe,
    getData: Pe,
    batchCreateI18n: Ne
  })
}), Se = I(async ({
  init: u,
  local: t
}) => {
  var n;
  const {
    appSchemaState: g
  } = Ee();
  if (t) {
    const h = ((n = g == null ? void 0 : g.langs) == null ? void 0 : n.locales) || [], r = {}, i = W();
    return Array.isArray(h) && h.forEach(({
      lang: e
    }) => {
      r[e] = {}, Object.entries(i).forEach(([s, l]) => {
        r[e][s] = l[e];
      });
    }), {
      locales: h,
      messages: r
    };
  } else
    return u ? g.langs : await xe();
}, {
  metaData: {
    id: "engine.service.translate.useTranslate.getI18n"
  },
  ctx: () => ({
    utils: D,
    isVsCodeEnv: Ce,
    constants: A,
    generateI18n: ke,
    PROP_DATA_TYPE: he,
    useResource: Ee,
    useCanvas: ie,
    getMetaApi: k,
    META_SERVICE: C,
    HOST_TYPE: re,
    state: be,
    currentLanguage: _e,
    i18nResource: N,
    i18nApi: se,
    globalParams: U,
    getLangs: W,
    setLangs: we,
    removeI18n: Ae,
    ensureI18n: Te,
    getI18nData: xe,
    getI18n: Se,
    initI18n: ce,
    initAppI18n: Ie,
    initBlockI18n: Le,
    initBlockLocalI18n: Me,
    format: De,
    translate: Oe,
    getData: Pe,
    batchCreateI18n: Ne
  })
}), ce = I(async ({
  host: u,
  hostType: t,
  init: g,
  local: n
}) => {
  U.host = u || "";
  const h = "host_type";
  U[h] = t || re.App;
  const {
    locales: r = [],
    messages: i = {}
  } = await Se({
    host: u,
    hostType: t,
    init: g,
    local: n
  }), e = r.map((l) => l.lang), s = i[e[0] || "zh_CN"];
  N.locales = r, N.messages = i, Object.keys(s || {}).forEach((l) => {
    const y = {
      key: l
    };
    e.forEach((b) => i[b] && Object.assign(y, {
      [b]: i[b][l]
    })), Te(y);
  });
}, {
  metaData: {
    id: "engine.service.translate.useTranslate.initI18n"
  },
  ctx: () => ({
    utils: D,
    isVsCodeEnv: Ce,
    constants: A,
    generateI18n: ke,
    PROP_DATA_TYPE: he,
    useResource: Ee,
    useCanvas: ie,
    getMetaApi: k,
    META_SERVICE: C,
    HOST_TYPE: re,
    state: be,
    currentLanguage: _e,
    i18nResource: N,
    i18nApi: se,
    globalParams: U,
    getLangs: W,
    setLangs: we,
    removeI18n: Ae,
    ensureI18n: Te,
    getI18nData: xe,
    getI18n: Se,
    initI18n: ce,
    initAppI18n: Ie,
    initBlockI18n: Le,
    initBlockLocalI18n: Me,
    format: De,
    translate: Oe,
    getData: Pe,
    batchCreateI18n: Ne
  })
}), Ie = I(async (u) => {
  var t, g;
  u && (await ce({
    host: u,
    hostType: re.App
  }), (g = (t = ie().canvasApi.value) == null ? void 0 : t.setLocales) == null || g.call(t, N.messages));
}, {
  metaData: {
    id: "engine.service.translate.useTranslate.initAppI18n"
  },
  ctx: () => ({
    utils: D,
    isVsCodeEnv: Ce,
    constants: A,
    generateI18n: ke,
    PROP_DATA_TYPE: he,
    useResource: Ee,
    useCanvas: ie,
    getMetaApi: k,
    META_SERVICE: C,
    HOST_TYPE: re,
    state: be,
    currentLanguage: _e,
    i18nResource: N,
    i18nApi: se,
    globalParams: U,
    getLangs: W,
    setLangs: we,
    removeI18n: Ae,
    ensureI18n: Te,
    getI18nData: xe,
    getI18n: Se,
    initI18n: ce,
    initAppI18n: Ie,
    initBlockI18n: Le,
    initBlockLocalI18n: Me,
    format: De,
    translate: Oe,
    getData: Pe,
    batchCreateI18n: Ne
  })
}), Le = I(async (u) => {
  var t, g;
  u && (await ce({
    host: u,
    hostType: re.Block
  }), (g = (t = ie().canvasApi.value) == null ? void 0 : t.setLocales) == null || g.call(t, N.messages));
}, {
  metaData: {
    id: "engine.service.translate.useTranslate.initBlockI18n"
  },
  ctx: () => ({
    utils: D,
    isVsCodeEnv: Ce,
    constants: A,
    generateI18n: ke,
    PROP_DATA_TYPE: he,
    useResource: Ee,
    useCanvas: ie,
    getMetaApi: k,
    META_SERVICE: C,
    HOST_TYPE: re,
    state: be,
    currentLanguage: _e,
    i18nResource: N,
    i18nApi: se,
    globalParams: U,
    getLangs: W,
    setLangs: we,
    removeI18n: Ae,
    ensureI18n: Te,
    getI18nData: xe,
    getI18n: Se,
    initI18n: ce,
    initAppI18n: Ie,
    initBlockI18n: Le,
    initBlockLocalI18n: Me,
    format: De,
    translate: Oe,
    getData: Pe,
    batchCreateI18n: Ne
  })
}), Me = I(async (u = {}) => {
  var t, g;
  we(u), await ce({
    host: "",
    hostType: re.Block,
    local: !0
  }), (g = (t = ie().canvasApi.value) == null ? void 0 : t.setLocales) == null || g.call(t, N.messages);
}, {
  metaData: {
    id: "engine.service.translate.useTranslate.initBlockLocalI18n"
  },
  ctx: () => ({
    utils: D,
    isVsCodeEnv: Ce,
    constants: A,
    generateI18n: ke,
    PROP_DATA_TYPE: he,
    useResource: Ee,
    useCanvas: ie,
    getMetaApi: k,
    META_SERVICE: C,
    HOST_TYPE: re,
    state: be,
    currentLanguage: _e,
    i18nResource: N,
    i18nApi: se,
    globalParams: U,
    getLangs: W,
    setLangs: we,
    removeI18n: Ae,
    ensureI18n: Te,
    getI18nData: xe,
    getI18n: Se,
    initI18n: ce,
    initAppI18n: Ie,
    initBlockI18n: Le,
    initBlockLocalI18n: Me,
    format: De,
    translate: Oe,
    getData: Pe,
    batchCreateI18n: Ne
  })
}), De = I((u = "", t = {}) => u.replace(/\$\{(.+?)\}/g, (g, n) => t[n] || ""), {
  metaData: {
    id: "engine.service.translate.useTranslate.format"
  },
  ctx: () => ({
    utils: D,
    isVsCodeEnv: Ce,
    constants: A,
    generateI18n: ke,
    PROP_DATA_TYPE: he,
    useResource: Ee,
    useCanvas: ie,
    getMetaApi: k,
    META_SERVICE: C,
    HOST_TYPE: re,
    state: be,
    currentLanguage: _e,
    i18nResource: N,
    i18nApi: se,
    globalParams: U,
    getLangs: W,
    setLangs: we,
    removeI18n: Ae,
    ensureI18n: Te,
    getI18nData: xe,
    getI18n: Se,
    initI18n: ce,
    initAppI18n: Ie,
    initBlockI18n: Le,
    initBlockLocalI18n: Me,
    format: De,
    translate: Oe,
    getData: Pe,
    batchCreateI18n: Ne
  })
}), Oe = I((u) => {
  const {
    type: t,
    key: g = D.guid()
  } = u || {};
  if (t === he.I18N) {
    const r = W()[g] || u;
    return De(r[_e.value] || r.key, u.params);
  }
  return u;
}, {
  metaData: {
    id: "engine.service.translate.useTranslate.translate"
  },
  ctx: () => ({
    utils: D,
    isVsCodeEnv: Ce,
    constants: A,
    generateI18n: ke,
    PROP_DATA_TYPE: he,
    useResource: Ee,
    useCanvas: ie,
    getMetaApi: k,
    META_SERVICE: C,
    HOST_TYPE: re,
    state: be,
    currentLanguage: _e,
    i18nResource: N,
    i18nApi: se,
    globalParams: U,
    getLangs: W,
    setLangs: we,
    removeI18n: Ae,
    ensureI18n: Te,
    getI18nData: xe,
    getI18n: Se,
    initI18n: ce,
    initAppI18n: Ie,
    initBlockI18n: Le,
    initBlockLocalI18n: Me,
    format: De,
    translate: Oe,
    getData: Pe,
    batchCreateI18n: Ne
  })
}), Pe = I(() => N.messages, {
  metaData: {
    id: "engine.service.translate.useTranslate.getData"
  },
  ctx: () => ({
    utils: D,
    isVsCodeEnv: Ce,
    constants: A,
    generateI18n: ke,
    PROP_DATA_TYPE: he,
    useResource: Ee,
    useCanvas: ie,
    getMetaApi: k,
    META_SERVICE: C,
    HOST_TYPE: re,
    state: be,
    currentLanguage: _e,
    i18nResource: N,
    i18nApi: se,
    globalParams: U,
    getLangs: W,
    setLangs: we,
    removeI18n: Ae,
    ensureI18n: Te,
    getI18nData: xe,
    getI18n: Se,
    initI18n: ce,
    initAppI18n: Ie,
    initBlockI18n: Le,
    initBlockLocalI18n: Me,
    format: De,
    translate: Oe,
    getData: Pe,
    batchCreateI18n: Ne
  })
}), Ne = I(({
  host: u,
  hostType: t
}) => {
  if (!u)
    return;
  U.host = u, U.host_type = t || "";
  const {
    locales: g
  } = N, n = W(), h = Object.entries(n).map(([r, i]) => ({
    key: r,
    contents: Object.fromEntries(g.map(({
      lang: e
    }) => [e, i[e]]))
  }));
  k(C.Http).post(`${se}/batch/create`, {
    ...U,
    entries: h
  });
}, {
  metaData: {
    id: "engine.service.translate.useTranslate.batchCreateI18n"
  },
  ctx: () => ({
    utils: D,
    isVsCodeEnv: Ce,
    constants: A,
    generateI18n: ke,
    PROP_DATA_TYPE: he,
    useResource: Ee,
    useCanvas: ie,
    getMetaApi: k,
    META_SERVICE: C,
    HOST_TYPE: re,
    state: be,
    currentLanguage: _e,
    i18nResource: N,
    i18nApi: se,
    globalParams: U,
    getLangs: W,
    setLangs: we,
    removeI18n: Ae,
    ensureI18n: Te,
    getI18nData: xe,
    getI18n: Se,
    initI18n: ce,
    initAppI18n: Ie,
    initBlockI18n: Le,
    initBlockLocalI18n: Me,
    format: De,
    translate: Oe,
    getData: Pe,
    batchCreateI18n: Ne
  })
}), Ut = () => ({
  i18nResource: N,
  currentLanguage: _e,
  getLangs: W,
  setLangs: we,
  getData: Pe,
  translate: Oe,
  removeI18n: Ae,
  ensureI18n: Te,
  initI18n: ce,
  batchCreateI18n: Ne,
  initAppI18n: Ie,
  initBlockI18n: Le,
  getI18nData: xe,
  initBlockLocalI18n: Me
}), Bt = {
  id: "engine.service.translate",
  type: "MetaService",
  apis: Ut(),
  composable: {
    name: lt.useTranslate
  }
}, Xt = {
  ...Rt,
  entry: Nt,
  options: {
    batchImportTempDownloadUrl: "",
    batchImportTempDownMethod: ""
  },
  metas: [Bt]
};
export {
  Bt as TranslateService,
  Xt as default
};
//# sourceMappingURL=index.js.map
