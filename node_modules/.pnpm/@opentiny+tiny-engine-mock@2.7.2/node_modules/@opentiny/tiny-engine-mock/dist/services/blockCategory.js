"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _path = _interopRequireDefault(require("path"));
var _nedb = _interopRequireDefault(require("@seald-io/nedb"));
var _Common = require("../tool/Common");
var _appinfo = _interopRequireDefault(require("../assets/json/appinfo.json"));
/**
 * Copyright (c) 2023 - present TinyEngine Authors.
 * Copyright (c) 2023 - present Huawei Cloud Computing Technologies Co., Ltd.
 *
 * Use of this source code is governed by an MIT-style license.
 *
 * THE OPEN SOURCE SOFTWARE IN THIS PRODUCT IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL,
 * BUT WITHOUT ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF MERCHANTABILITY OR FITNESS FOR
 * A PARTICULAR PURPOSE. SEE THE APPLICABLE LICENSES FOR MORE DETAILS.
 *
 */

class BlockCategoryService {
  constructor() {
    this.db = new _nedb.default({
      filename: _path.default.resolve(__dirname, '../database/blockCategories.db'),
      autoload: true
    });
    this.db.ensureIndex({
      fieldName: 'name',
      unique: true
    });
    this.blockCategoriesModel = {
      id: '',
      app: '',
      name: '',
      desc: '',
      blocks: []
    };
  }
  async create(params) {
    const blockCategoriesData = {
      ...this.blockCategoriesModel,
      ...params
    };
    blockCategoriesData.app = _appinfo.default.app;
    const result = await this.db.insertAsync(blockCategoriesData);
    const {
      _id
    } = result;
    await this.db.updateAsync({
      _id
    }, {
      $set: {
        id: _id
      }
    });
    result.id = result._id;
    return (0, _Common.getResponseData)(result);
  }
  async update(id, params) {
    if (params?._id) {
      const categories = await this.db.findOneAsync({
        _id: id
      });
      if (categories) {
        categories.blocks.push(params._id);
        await this.db.updateAsync({
          _id: id
        }, {
          $set: categories
        });
        return (0, _Common.getResponseData)(categories);
      }
    }
    params.app = _appinfo.default.app;
    await this.db.updateAsync({
      _id: id
    }, {
      $set: params
    });
    const result = await this.db.findOneAsync({
      _id: id
    });
    return (0, _Common.getResponseData)(result);
  }
  async find(params) {
    const result = await this.db.findAsync();
    return (0, _Common.getResponseData)(result);
  }
  async delete(id) {
    const result = await this.db.findOneAsync({
      _id: id
    });
    await this.db.removeAsync({
      _id: id
    });
    return (0, _Common.getResponseData)(result);
  }
  async list(appId) {
    const result = await this.db.findAsync();
    return (0, _Common.getResponseData)(result);
  }
}
exports.default = BlockCategoryService;