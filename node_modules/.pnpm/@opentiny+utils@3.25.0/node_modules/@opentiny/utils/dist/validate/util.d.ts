/**
 * Copyright (c) 2022 - present TinyVue Authors.
 * Copyright (c) 2022 - present Huawei Cloud Computing Technologies Co., Ltd.
 *
 * Use of this source code is governed by an MIT-style license.
 *
 * THE OPEN SOURCE SOFTWARE IN THIS PRODUCT IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL,
 * BUT WITHOUT ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF MERCHANTABILITY OR FITNESS FOR
 * A PARTICULAR PURPOSE. SEE THE APPLICABLE LICENSES FOR MORE DETAILS.
 *
 */
/**
 * @description 警告函数（当前未实现）
 * @returns undefined
 */
export declare const warning: () => undefined;
/**
 * @description 转换返回错误的数据结构，将错误数组转换为按字段分组的对象
 * @param errors 错误数组
 * @returns 按字段分组的错误对象或null
 */
export declare function convertFieldsError(errors: Array<{
    field: string;
    [key: string]: any;
}> | null | undefined): Record<string, any[]> | null;
/**
 * @description 生成校验错误的提示信息，支持格式化占位符
 * @param i18nTemplate 带占位符的字符串或函数
 * @param rest 替换占位符的字符串参数
 * @returns 格式化后的字符串
 * 例：format('%s 必须等于 %s', 'A', 'B') 返回 A 必须等于 B
 */
export declare function format(i18nTemplate: Function | string, ...rest: string[]): string;
/**
 * @description 判断对应的类型是否是空值
 * @param data 要检查的数据
 * @param dataType 数据类型
 * @returns 是否为空值
 */
export declare function isEmptyValue(data: any, dataType?: string): boolean;
/**
 * @description 判断对象是否为空
 * @param data 要检查的对象
 * @returns 对象是否为空
 */
export declare function isEmptyObject(data: Record<string, any>): boolean;
/**
 * @description 异步映射处理对象数组，支持串行或并行处理
 * @param objArray 对象数组
 * @param option 选项配置
 * @param func 处理函数
 * @param callback 完成回调
 * @returns Promise对象
 */
export declare function asyncMap(objArray: Record<string, any[]>, option: {
    first?: boolean;
    firstFields?: boolean | string[];
}, func: (rule: any, callback: (errors: any[]) => void) => void, callback: (errors: any[]) => void): Promise<void>;
/**
 * @description 处理返回的错误，补充错误信息
 * @param rule 规则对象
 * @returns 处理函数
 */
export declare function complementError(rule: {
    fullField?: string;
    [key: string]: any;
}): (onError: string | Function | {
    message?: string;
    field?: string;
}) => {
    message: string;
    field: string;
};
/**
 * @description 深度合并对象
 * @param target 目标对象
 * @param sources 源对象
 * @returns 合并后的对象
 */
export declare function deepMerge(target: Record<string, any>, sources: Record<string, any>): Record<string, any>;
