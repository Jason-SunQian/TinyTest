import { Node } from './node';
interface TreeStoreOptions {
    data: any;
    key?: string;
    props?: Record<string, any>;
    load?: (node: Node, callback: (data: any) => void) => void;
    lazy?: boolean;
    checkStrictly?: boolean;
    defaultCheckedKeys?: any[];
    defaultExpandedKeys?: any[];
    autoExpandParent?: boolean;
    afterLoad?: (params: {
        data: any;
        init: boolean;
    }) => void;
    filterNodeMethod?: (value: any, data: any, node: Node) => boolean;
    [key: string]: any;
}
type NodeType = any;
type FilterNodeMethodType = (value: any, data: any, node: NodeType) => boolean;
export declare class TreeStore {
    currentNode: NodeType | null;
    currentNodeKey: any;
    nodesMap: Record<string, NodeType>;
    root: NodeType;
    data: any;
    lazy: boolean;
    load?: (node: NodeType, callback: (data: any) => void) => void;
    afterLoad?: (params: {
        data: any;
        init: boolean;
    }) => void;
    props: Record<string, any>;
    filterNodeMethod?: FilterNodeMethodType;
    key: string;
    defaultCheckedKeys: any[];
    checkStrictly: boolean;
    defaultExpandedKeys: any[];
    autoExpandParent: boolean;
    constructor(options: TreeStoreOptions);
    getMappingData(data: any): any;
    filter(value: any): void;
    setData(newVal: any): void;
    getNode(data: any): NodeType | null;
    insertBefore(data: any, insertData: any): void;
    insertAfter(data: any, insertData: any): void;
    remove(data: any, isSaveChildNode?: boolean, isNode?: boolean): void;
    append(data: any, parentData?: any, index?: number): void;
    setDefaultCheckedKey(newValue: any[]): void;
    _initDefaultCheckedNodes(): void;
    _initDefaultCheckedNode(node: NodeType): void;
    getCheckedKeys(leafOnly?: boolean): any[];
    getHalfCheckedKeys(): any[];
    deregisterNode(node: NodeType): void;
    registerNode(node: NodeType): void;
    getCheckedNodes(leafOnly?: boolean, includeHalfChecked?: boolean, isNode?: boolean): any[];
    getHalfCheckedNodes(): any[];
    _getAllNodes(): NodeType[];
    updateChildren(key: string, data: any[]): void;
    _setCheckedKeys(key: string, leafOnly?: boolean, checkedKeys?: {}): void;
    setDefaultExpandedKeys(keys: any[]): void;
    setCheckedKeys(keys: any[], leafOnly?: boolean): void;
    setCheckedNodes(array: any[], leafOnly?: boolean): void;
    setChecked(data: any, checked: boolean, deep: boolean): void;
    setCurrentNode(currentNode: NodeType): void;
    getCurrentNode(): any;
    setCurrentNodeKey(key: any): void;
    setUserCurrentNode(node: any): void;
    getData(data: any): any;
    getAllData(): any;
}
export {};
