{"version":3,"file":"completion.js","sources":["../../js/completion.js"],"sourcesContent":["/**\n * Copyright (c) 2023 - present TinyEngine Authors.\n * Copyright (c) 2023 - present Huawei Cloud Computing Technologies Co., Ltd.\n *\n * Use of this source code is governed by an MIT-style license.\n *\n * THE OPEN SOURCE SOFTWARE IN THIS PRODUCT IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL,\n * BUT WITHOUT ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF MERCHANTABILITY OR FITNESS FOR\n * A PARTICULAR PURPOSE. SEE THE APPLICABLE LICENSES FOR MORE DETAILS.\n *\n */\n\nimport { useCanvas, useResource } from '@opentiny/tiny-engine-meta-register'\n\nconst keyWords = [\n  'state',\n  'stores',\n  'props',\n  'emit',\n  'setState',\n  'route',\n  'i18n',\n  'getLocale',\n  'setLocale',\n  'history',\n  'utils',\n  'bridge',\n  'dataSourceMap'\n]\n\nconst snippets = [\n  {\n    lable: 'new function',\n    type: 'Function',\n    insertText: `function \\${1:funName} (\\${2}) {\n  \\${3}\n}`,\n    detail: 'create new function'\n  }\n]\n\nconst TYPES = {\n  KeyWord: 'KeyWord',\n  Function: 'Function',\n  Method: 'Method',\n  Value: 'Value',\n  Variable: 'Variable'\n}\n\nconst getApiSuggestions = (monaco, range, wordContent) =>\n  keyWords\n    .map((item) => ({\n      label: `this.${item}`,\n      kind: monaco.languages.CompletionItemKind.Keyword,\n      insertText: `this.${item}`,\n      detail: `Lowcode API`,\n      range\n    }))\n    .filter(({ insertText }) => insertText.indexOf(wordContent) === 0)\n\nconst getSnippetsSuggestions = (monaco, range, wordContent) =>\n  snippets\n    .map((item) => ({\n      label: item.lable,\n      insertText: item.insertText,\n      detail: item.detail,\n      kind: monaco.languages.CompletionItemKind[item.type],\n      insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n      range\n    }))\n    .filter(({ insertText }) => insertText.indexOf(wordContent) === 0)\n\nconst getUserWords = () => {\n  const { bridge = [], dataSource = [], utils = [], globalState = [] } = useResource().appSchemaState\n\n  return {\n    state: {\n      type: TYPES.Variable,\n      getInsertText: (value) => `this.state.${value}`,\n      data: Object.keys(useCanvas().getPageSchema().state || {})\n    },\n    stores: {\n      type: TYPES.Variable,\n      getInsertText: (value) => `this.stores.${value}`,\n      data: globalState\n        .filter((item) => item.id)\n        .map((item) => [\n          item.id,\n          ...[...Object.keys(item.state), ...Object.keys(item.getters)].map((name) => `${item.id}.${name}`)\n        ])\n        .flat()\n    },\n    storeFn: {\n      type: TYPES.Method,\n      getInsertText: (value) => `this.stores.${value}()`,\n      data: globalState\n        .filter((item) => item.id)\n        .map((item) => Object.keys(item.actions).map((name) => `${item.id}.${name}`))\n        .flat()\n    },\n    utils: {\n      type: TYPES.Variable,\n      getInsertText: (value) => `this.utils.${value}`,\n      data: utils.map((item) => item.name)\n    },\n    dataSource: {\n      type: TYPES.Method,\n      getInsertText: (value) => `this.dataSourceMap.${value}.load()`,\n      data: dataSource.map((item) => item.name)\n    },\n    bridge: {\n      type: TYPES.Variable,\n      getInsertText: (value) => `this.bridge.${value}`,\n      data: bridge.map((item) => item.name)\n    }\n  }\n}\n\nconst getUserSuggestions = (monaco, range, wordContent) => {\n  const userWords = getUserWords()\n\n  return Object.entries(userWords)\n    .map(([_itemKey, itemContent]) =>\n      itemContent.data.map((item) => ({\n        kind: monaco.languages.CompletionItemKind[itemContent.type],\n        label: itemContent.getInsertText(item),\n        insertText: itemContent.getInsertText(item),\n        detail: `Lowcode API`,\n        range\n      }))\n    )\n    .flat()\n    .filter(({ insertText }) => insertText.indexOf(wordContent) === 0)\n}\n\nconst getCurrentChar = (model, position) => {\n  const currentChar = model.getValueInRange({\n    startLineNumber: position.lineNumber,\n    endLineNumber: position.lineNumber,\n    startColumn: position.column - 1,\n    endColumn: position.column\n  })\n\n  return { word: currentChar, startColumn: position.column - 1, endColumn: position.column }\n}\n\nconst getWords = (model, position) => {\n  const words = []\n\n  const currentWord = model.getWordUntilPosition(position).word\n    ? model.getWordAtPosition(position)\n    : getCurrentChar(model, position)\n  words.push(currentWord)\n\n  const lastPosition = { ...position, column: currentWord.startColumn }\n  while (lastPosition.column > 1) {\n    const lastWord = model.getWordUntilPosition(lastPosition).word\n      ? model.getWordUntilPosition(lastPosition)\n      : getCurrentChar(model, lastPosition)\n    if (!/[\\w.]/.test(lastWord.word)) break\n    words.push(lastWord)\n    lastPosition.column = lastWord.startColumn\n  }\n\n  return words.reverse()\n}\n\nconst getRange = (position, words) => ({\n  startLineNumber: position.lineNumber,\n  endLineNumber: position.lineNumber,\n  startColumn: words[0].startColumn,\n  endColumn: words[words.length - 1].endColumn\n})\n\nexport const initCompletion = (monacoInstance, editorModel, conditionFn) => {\n  const completionItemProvider = {\n    provideCompletionItems(model, position, _context, _token) {\n      if (editorModel && model.id !== editorModel.id) {\n        return {\n          suggestions: []\n        }\n      }\n      const words = getWords(model, position)\n      const wordContent = words.map((item) => item.word).join('')\n      const range = getRange(position, words)\n\n      // 内置 API 提示 e.g. this.state/props/utils/...\n      const apiSuggestions = getApiSuggestions(monacoInstance, range, wordContent)\n      // 代码片段提示 e.g.  create new function\n      const snippetSuggestions = getSnippetsSuggestions(monacoInstance, range, wordContent)\n      // 用户变量数据提示 e.g. this.dataSourceMap.xxx.load()\n      const userSuggestions = getUserSuggestions(monacoInstance, range, wordContent)\n      return {\n        suggestions: [...apiSuggestions, ...snippetSuggestions, ...userSuggestions].filter((item) =>\n          conditionFn ? conditionFn(item) : true\n        )\n      }\n    },\n    triggerCharacters: ['.']\n  }\n\n  return ['javascript', 'typescript'].map((lang) =>\n    monacoInstance.languages.registerCompletionItemProvider(lang, completionItemProvider)\n  )\n}\n"],"names":["keyWords","snippets","TYPES","getApiSuggestions","monaco","range","wordContent","item","insertText","getSnippetsSuggestions","getUserWords","bridge","dataSource","utils","globalState","useResource","value","useCanvas","name","getUserSuggestions","userWords","_itemKey","itemContent","getCurrentChar","model","position","getWords","words","currentWord","lastPosition","lastWord","getRange","initCompletion","monacoInstance","editorModel","conditionFn","completionItemProvider","_context","_token","apiSuggestions","snippetSuggestions","userSuggestions","lang"],"mappings":"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"}