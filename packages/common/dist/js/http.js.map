{"version":3,"file":"http.js","sources":["../../js/http.js"],"sourcesContent":["/**\n * Copyright (c) 2023 - present TinyEngine Authors.\n * Copyright (c) 2023 - present Huawei Cloud Computing Technologies Co., Ltd.\n *\n * Use of this source code is governed by an MIT-style license.\n *\n * THE OPEN SOURCE SOFTWARE IN THIS PRODUCT IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL,\n * BUT WITHOUT ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF MERCHANTABILITY OR FITNESS FOR\n * A PARTICULAR PURPOSE. SEE THE APPLICABLE LICENSES FOR MORE DETAILS.\n *\n */\n\nimport { isVsCodeEnv } from './environments'\nimport { generateRouter, generatePage } from './vscodeGenerateFile'\nimport { usePage, useNotify, useBreadcrumb, useMessage } from '@opentiny/tiny-engine-meta-register'\nimport { getMetaApi, META_SERVICE } from '@opentiny/tiny-engine-meta-register'\n\n/**\n * 异常情况埋点上传\n * @param { json } params {\"event_type\": design_error,\"url\": \"elit in reprehenderit enim incididunt\" }\n * @returns { Promise }\n */\nexport const requestEvent = (url, params) => {\n  if (!url) {\n    return\n  }\n\n  return getMetaApi(META_SERVICE.Http)\n    .post(url, params)\n    .catch(() => {})\n}\n\n/**\n * 页面更新\n * @param { string } id 页面ID\n * @param { json } params 页面信息\n * @returns { Promise }\n *\n */\nexport const handlePageUpdate = (updateParams) => {\n  const { id, params, routerChange = false, isCurEditPage = true, isUpdateTree = true } = updateParams\n\n  return getMetaApi(META_SERVICE.Http)\n    .post(`/app-center/api/pages/update/${id}`, params)\n    .then((res) => {\n      if (isVsCodeEnv) {\n        generatePage({\n          id,\n          name: params.name,\n          page_content: params.page_content\n        })\n\n        if (routerChange) {\n          generateRouter({\n            id,\n            componentsTree: params\n          })\n        }\n      }\n\n      if (isUpdateTree) {\n        useNotify({ message: '保存成功!', type: 'success' })\n      }\n\n      // 发布 Schema 变动通知\n      useMessage().publish({\n        topic: 'pageOrBlockInit',\n        data: params.page_content\n      })\n\n      if (isCurEditPage) {\n        const { setBreadcrumbPage } = useBreadcrumb()\n        setBreadcrumbPage([params.name])\n      }\n\n      return res\n    })\n    .catch((err) => {\n      useNotify({ title: '保存失败', message: `${err?.message || ''}`, type: 'error' })\n    })\n    .finally(() => {\n      const { pageSettingState } = usePage()\n      // 更新页面管理的列表，如果不存在，说明还没有打开过页面管理面板\n      if (isUpdateTree) {\n        pageSettingState.updateTreeData?.()\n      }\n      pageSettingState.isNew = false\n    })\n}\n"],"names":["requestEvent","url","params","getMetaApi","META_SERVICE","handlePageUpdate","updateParams","id","routerChange","isCurEditPage","isUpdateTree","res","isVsCodeEnv","generatePage","generateRouter","useNotify","useMessage","setBreadcrumbPage","useBreadcrumb","err","pageSettingState","usePage","_a"],"mappings":";;;AAsBY,MAACA,IAAe,CAACC,GAAKC,MAAW;AAC3C,MAAKD;AAIL,WAAOE,EAAWC,EAAa,IAAI,EAChC,KAAKH,GAAKC,CAAM,EAChB,MAAM,MAAM;AAAA,IAAC,CAAC;AACnB,GASaG,IAAmB,CAACC,MAAiB;AAChD,QAAM,EAAE,IAAAC,GAAI,QAAAL,GAAQ,cAAAM,IAAe,IAAO,eAAAC,IAAgB,IAAM,cAAAC,IAAe,OAASJ;AAExF,SAAOH,EAAWC,EAAa,IAAI,EAChC,KAAK,gCAAgCG,CAAE,IAAIL,CAAM,EACjD,KAAK,CAACS,MAAQ;AA0Bb,QAzBIC,MACFC,EAAa;AAAA,MACX,IAAAN;AAAA,MACA,MAAML,EAAO;AAAA,MACb,cAAcA,EAAO;AAAA,IAC/B,CAAS,GAEGM,KACFM,EAAe;AAAA,MACb,IAAAP;AAAA,MACA,gBAAgBL;AAAA,IAC5B,CAAW,IAIDQ,KACFK,EAAU,EAAE,SAAS,SAAS,MAAM,UAAS,CAAE,GAIjDC,EAAU,EAAG,QAAQ;AAAA,MACnB,OAAO;AAAA,MACP,MAAMd,EAAO;AAAA,IACrB,CAAO,GAEGO,GAAe;AACjB,YAAM,EAAE,mBAAAQ,EAAiB,IAAKC,EAAa;AAC3C,MAAAD,EAAkB,CAACf,EAAO,IAAI,CAAC;AAAA,IACjC;AAEA,WAAOS;AAAA,EACT,CAAC,EACA,MAAM,CAACQ,MAAQ;AACd,IAAAJ,EAAU,EAAE,OAAO,QAAQ,SAAS,IAAGI,KAAA,gBAAAA,EAAK,YAAW,EAAE,IAAI,MAAM,QAAO,CAAE;AAAA,EAC9E,CAAC,EACA,QAAQ,MAAM;;AACb,UAAM,EAAE,kBAAAC,EAAgB,IAAKC,EAAO;AAEpC,IAAIX,OACFY,IAAAF,EAAiB,mBAAjB,QAAAE,EAAA,KAAAF,KAEFA,EAAiB,QAAQ;AAAA,EAC3B,CAAC;AACL;"}