{"version":3,"file":"preview.js","sources":["../../js/preview.js"],"sourcesContent":["/**\n * Copyright (c) 2023 - present TinyEngine Authors.\n * Copyright (c) 2023 - present Huawei Cloud Computing Technologies Co., Ltd.\n *\n * Use of this source code is governed by an MIT-style license.\n *\n * THE OPEN SOURCE SOFTWARE IN THIS PRODUCT IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL,\n * BUT WITHOUT ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF MERCHANTABILITY OR FITNESS FOR\n * A PARTICULAR PURPOSE. SEE THE APPLICABLE LICENSES FOR MORE DETAILS.\n *\n */\n\nimport { useThrottleFn } from '@vueuse/core'\nimport {\n  useMaterial,\n  useResource,\n  useMessage,\n  useCanvas,\n  usePage,\n  useBlock,\n  getMetaApi,\n  META_SERVICE,\n  getMergeMeta\n} from '@opentiny/tiny-engine-meta-register'\nimport { utils } from '@opentiny/tiny-engine-utils'\nimport { isDevelopEnv } from './environments'\n\nconst { deepClone } = utils\n\n// 保存预览窗口引用\nlet previewWindow = null\n\nconst getScriptAndStyleDeps = () => {\n  const { scripts, styles } = useMaterial().getCanvasDeps()\n  const utilsDeps = useResource().getUtilsDeps()\n\n  const scriptsDeps = [...scripts, ...utilsDeps].reduce((res, item) => {\n    res[item.package] = res[item.package] || item.script\n\n    return res\n  }, {})\n  const stylesDeps = [...styles]\n\n  return {\n    scripts: scriptsDeps,\n    styles: stylesDeps\n  }\n}\n\nconst getSchemaParams = async () => {\n  const { isBlock, getPageSchema, getCurrentPage, getSchema } = useCanvas()\n  const isBlockPreview = isBlock()\n  const { scripts, styles } = getScriptAndStyleDeps()\n\n  if (isBlockPreview) {\n    const { getCurrentBlock } = useBlock()\n    const block = getCurrentBlock()\n\n    const latestPage = {\n      ...block,\n      page_content: getSchema()\n    }\n\n    return deepClone({\n      currentPage: latestPage,\n      ancestors: [],\n      scripts,\n      styles\n    })\n  }\n\n  const pageSchema = getPageSchema()\n  const currentPage = getCurrentPage()\n  const { getFamily } = usePage()\n  const latestPage = {\n    ...currentPage,\n    page_content: pageSchema\n  }\n\n  const ancestors = await getFamily(latestPage)\n\n  return deepClone({\n    currentPage: latestPage,\n    ancestors,\n    scripts,\n    styles\n  })\n}\n\n// 当 schema 变化时发送更新\nconst sendSchemaUpdate = (data) => {\n  previewWindow.postMessage(\n    {\n      source: 'designer',\n      type: 'schema',\n      data\n    },\n    previewWindow.origin || window.location.origin\n  )\n}\n\nlet hasSchemaChangeListener = false\n\nconst cleanupSchemaChangeListener = () => {\n  const { unsubscribe } = useMessage()\n  unsubscribe({\n    topic: 'schemaChange',\n    subscriber: 'preview-communication'\n  })\n  unsubscribe({\n    topic: 'schemaImport',\n    subscriber: 'preview-communication'\n  })\n  unsubscribe({\n    topic: 'pageOrBlockInit',\n    subscriber: 'preview-communication'\n  })\n  hasSchemaChangeListener = false\n}\n\nconst handleSchemaChange = async () => {\n  // 如果预览窗口不存在或已关闭，则取消订阅\n  if (!previewWindow || previewWindow.closed) {\n    cleanupSchemaChangeListener()\n    previewWindow = null\n    return\n  }\n\n  const params = await getSchemaParams()\n  sendSchemaUpdate(params)\n}\n\n// 设置监听 schemaChange 事件，自动发送更新到预览页面\nexport const setupSchemaChangeListener = () => {\n  // 如果已经存在监听，则取消之前的监听\n  if (hasSchemaChangeListener) {\n    return\n  }\n\n  const { subscribe } = useMessage()\n\n  subscribe({\n    topic: 'schemaChange',\n    subscriber: 'preview-communication',\n    // 防抖更新，防止因为属性变化频繁触发\n    callback: useThrottleFn(handleSchemaChange, 1000, true)\n  })\n\n  subscribe({\n    topic: 'schemaImport',\n    subscriber: 'preview-communication',\n    callback: useThrottleFn(handleSchemaChange, 1000, true)\n  })\n\n  subscribe({\n    topic: 'pageOrBlockInit',\n    subscriber: 'preview-communication',\n    callback: handleSchemaChange\n  })\n\n  hasSchemaChangeListener = true\n}\n\n// 监听来自预览页面的消息\nconst setupMessageListener = () => {\n  window.addEventListener('message', async (event) => {\n    const parsedOrigin = new URL(event.origin)\n    const parsedHost = new URL(window.location.href)\n    // 确保消息来源安全\n    if (parsedOrigin.origin === parsedHost.origin || parsedOrigin.host === parsedHost.host) {\n      const { event: eventType, source } = event.data || {}\n      // 通过 heartbeat 消息来重新建立连接，避免刷新页面后 previewWindow 为 null\n      if (source === 'preview' && eventType === 'connect' && !previewWindow) {\n        previewWindow = event.source\n        setupSchemaChangeListener()\n      }\n\n      if (source === 'preview' && eventType === 'onMounted' && previewWindow) {\n        const params = await getSchemaParams()\n        sendSchemaUpdate(params)\n      }\n    }\n  })\n\n  // 创建 BroadcastChannel 实例用于通信\n  const previewChannel = new BroadcastChannel('tiny-engine-preview-channel')\n\n  // 可能是刷新，需要重新建立连接\n  previewChannel.postMessage({\n    event: 'connect',\n    source: 'designer'\n  })\n\n  previewChannel.close()\n}\n\n// 初始化消息监听\nsetupMessageListener()\n\nconst handleHistoryPreview = (params, url) => {\n  let historyPreviewWindow = null\n  const handlePreviewReady = (event) => {\n    if (event.origin === window.location.origin || event.origin.includes(window.location.hostname)) {\n      const { event: eventType, source } = event.data || {}\n      if (source === 'preview' && eventType === 'onMounted' && historyPreviewWindow) {\n        const { scripts, styles, ancestors = [], ...rest } = params\n\n        historyPreviewWindow.postMessage(\n          {\n            source: 'designer',\n            type: 'schema',\n            data: deepClone({\n              currentPage: rest,\n              ancestors,\n              scripts,\n              styles\n            })\n          },\n          historyPreviewWindow?.origin || window.location.origin\n        )\n\n        // 历史页面不需要实时更新预览，发送完消息后移除监听\n        window.removeEventListener('message', handlePreviewReady)\n      }\n    }\n  }\n\n  window.addEventListener('message', handlePreviewReady)\n\n  historyPreviewWindow = window.open(url, '_blank')\n}\n\nconst getQueryParams = (params = {}, isHistory = false) => {\n  const paramsMap = new URLSearchParams(location.search)\n  const tenant = paramsMap.get('tenant') || ''\n  const pageId = paramsMap.get('pageid')\n  const blockId = paramsMap.get('blockid')\n  const theme = getMetaApi(META_SERVICE.ThemeSwitch)?.getThemeState()?.theme\n  const framework = getMergeMeta('engine.config')?.dslMode\n  const platform = getMergeMeta('engine.config')?.platformId\n\n  let query = `tenant=${tenant}&id=${paramsMap.get('id')}&theme=${theme}&framework=${framework}`\n\n  query += `&platform=${platform}`\n\n  if (pageId) {\n    query += `&pageid=${pageId}`\n  }\n\n  if (blockId) {\n    query += `&blockid=${blockId}`\n  }\n\n  if (isHistory) {\n    query += `&history=${params.history}`\n  }\n\n  return query\n}\n\nconst open = (params = {}, isHistory = false) => {\n  const href = window.location.href.split('?')[0] || './'\n  const { scripts, styles } = getScriptAndStyleDeps()\n  const query = getQueryParams(params, isHistory)\n\n  let openUrl = ''\n\n  // 从预览组件配置获取自定义URL\n  const customPreviewUrl = getMergeMeta('engine.toolbars.preview')?.options?.previewUrl\n  const defaultPreviewUrl = isDevelopEnv ? `./preview.html` : `${href.endsWith('/') ? href : `${href}/`}preview`\n\n  if (customPreviewUrl) {\n    // 如果配置了自定义预览URL，则使用自定义URL\n    openUrl =\n      typeof customPreviewUrl === 'function'\n        ? customPreviewUrl(defaultPreviewUrl, query)\n        : `${customPreviewUrl}?${query}`\n  } else {\n    // 否则使用默认生成的URL\n    openUrl = `${defaultPreviewUrl}?${query}`\n  }\n\n  if (isHistory) {\n    handleHistoryPreview({ ...params, scripts, styles }, openUrl)\n    return\n  }\n\n  if (previewWindow && !previewWindow.closed) {\n    // 如果预览窗口存在，则聚焦预览窗口\n    previewWindow.focus()\n    return\n  }\n\n  // 打开新窗口并保存引用\n  previewWindow = window.open(openUrl, '_blank')\n\n  // 设置 schemaChange 事件监听\n  setupSchemaChangeListener()\n}\n\nexport const previewPage = (params = {}, isHistory = false) => {\n  open(params, isHistory)\n}\n"],"names":["deepClone","utils","previewWindow","getScriptAndStyleDeps","scripts","styles","useMaterial","utilsDeps","useResource","scriptsDeps","res","item","stylesDeps","getSchemaParams","isBlock","getPageSchema","getCurrentPage","getSchema","useCanvas","isBlockPreview","getCurrentBlock","useBlock","latestPage","pageSchema","currentPage","getFamily","usePage","ancestors","sendSchemaUpdate","data","hasSchemaChangeListener","cleanupSchemaChangeListener","unsubscribe","useMessage","handleSchemaChange","params","setupSchemaChangeListener","subscribe","useThrottleFn","setupMessageListener","event","parsedOrigin","parsedHost","eventType","source","previewChannel","handleHistoryPreview","url","historyPreviewWindow","handlePreviewReady","rest","getQueryParams","isHistory","paramsMap","tenant","pageId","blockId","theme","_b","_a","getMetaApi","META_SERVICE","framework","_c","getMergeMeta","platform","_d","query","open","href","openUrl","customPreviewUrl","defaultPreviewUrl","isDevelopEnv","previewPage"],"mappings":"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"}