{"version":3,"file":"vscodeGenerateFile.js","sources":["../../js/vscodeGenerateFile.js"],"sourcesContent":["/**\n * Copyright (c) 2023 - present TinyEngine Authors.\n * Copyright (c) 2023 - present Huawei Cloud Computing Technologies Co., Ltd.\n *\n * Use of this source code is governed by an MIT-style license.\n *\n * THE OPEN SOURCE SOFTWARE IN THIS PRODUCT IS DISTRIBUTED IN THE HOPE THAT IT WILL BE USEFUL,\n * BUT WITHOUT ANY WARRANTY, WITHOUT EVEN THE IMPLIED WARRANTY OF MERCHANTABILITY OR FITNESS FOR\n * A PARTICULAR PURPOSE. SEE THE APPLICABLE LICENSES FOR MORE DETAILS.\n *\n */\n\nimport { getMetaApi, META_SERVICE } from '@opentiny/tiny-engine-meta-register'\n\n/**\n * vscode生成路由文件\n *\n *\n * @param { json } params\n  {\n     pageId:\"123\",   // 当前页面ID\n     componentsTree:{}   //  整个应用的路由对象\n  }\n * @returns { string }\n */\n\nconst generateRouter = (params) => getMetaApi(META_SERVICE.Http).post('/generate/api/generateRouter', params)\n\n/**\n * vscode生成本地国际化词条\n *\n * @param { json } params\n  {\n\n    key:'lowcode.preview' // 词条的唯一key值\n      contents: {\n        en_US: \"preview\", // 英文\n        zh_CN: \"预览\"    // 中文\n    }\n  }\n * @returns { string }\n */\n\nconst generateI18n = (params) => getMetaApi(META_SERVICE.Http).post('/generate/api/generateI18n', params)\n\n/**\n * vscode生成区块\n *\n * @param { json } params\n  {\n\n    schema: '',  // 区块的schema\n    blockPath: ''// 区块的分类ID，或者说传保存路径\n}\n * @returns { string }\n */\n\nconst generateBlock = (params) => getMetaApi(META_SERVICE.Http).post('/generate/api/generateBlock', params)\n\n/**\n * vscode生成页面\n *\n * @param { json } params\n  {\n    id: 2645,       // 页面ID\n    name: 'xh-test', // 页面名称\n    page_content:{}  //页面的schema\n  }\n * @returns { string }\n */\nconst generatePage = (params) => getMetaApi(META_SERVICE.Http).post('/generate/api/generatePage', params)\n\n/**\n * vscode生成数据源\n *\n * @param { json } params\n  {\n    list:[], // 新的数据源合集\n    dataHanlder:{   \n    //全局的处理函数，可以从apps/schema/:id 接口返回中的dataSource中获取\n    type: \"JSFunction\",\n    value: \"\"\n  }\n}\n * @returns { string }\n */\nconst generateDataSource = (params) => getMetaApi(META_SERVICE.Http).post('/generate/api/generateDataSource', params)\n\n/**\n * vscode生成桥接源\n *\n * @param { json } params\n  {\n    //桥接源合集，可以从apps/schema/:id 接口返回中的bridge中获取\n    bridge:[]\n  }\n * @returns { string }\n */\nconst generateBridge = (params) => getMetaApi(META_SERVICE.Http).post('/generate/api/generateBridge', params)\n\n/**\n * vscode生成工具类\n *\n * @param { json } params\n  {\n    //桥接源合集，可以从apps/schema/:id 接口返回中的utils中获取\n    utils:[]\n  }\n * @returns { string }\n */\nconst generateUtil = (params) => getMetaApi(META_SERVICE.Http).post('/generate/api/generateUtil', params)\n\nexport { generateRouter, generateI18n, generateBlock, generatePage, generateDataSource, generateBridge, generateUtil }\n"],"names":["generateRouter","params","getMetaApi","META_SERVICE","generateI18n","generateBlock","generatePage","generateDataSource","generateBridge","generateUtil"],"mappings":";AA0BK,MAACA,IAAiB,CAACC,MAAWC,EAAWC,EAAa,IAAI,EAAE,KAAK,gCAAgCF,CAAM,GAiBtGG,IAAe,CAACH,MAAWC,EAAWC,EAAa,IAAI,EAAE,KAAK,8BAA8BF,CAAM,GAclGI,IAAgB,CAACJ,MAAWC,EAAWC,EAAa,IAAI,EAAE,KAAK,+BAA+BF,CAAM,GAapGK,IAAe,CAACL,MAAWC,EAAWC,EAAa,IAAI,EAAE,KAAK,8BAA8BF,CAAM,GAgBlGM,IAAqB,CAACN,MAAWC,EAAWC,EAAa,IAAI,EAAE,KAAK,oCAAoCF,CAAM,GAY9GO,IAAiB,CAACP,MAAWC,EAAWC,EAAa,IAAI,EAAE,KAAK,gCAAgCF,CAAM,GAYtGQ,IAAe,CAACR,MAAWC,EAAWC,EAAa,IAAI,EAAE,KAAK,8BAA8BF,CAAM;"}